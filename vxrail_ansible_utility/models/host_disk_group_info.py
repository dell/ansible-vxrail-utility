# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostDiskGroupInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'recommendation': 'CurrentDGInfoSepc',
        'current': 'CurrentDGInfoSepc',
        'options': 'list[OptionsDGInfoSepc]'
    }

    attribute_map = {
        'host': 'host',
        'recommendation': 'recommendation',
        'current': 'current',
        'options': 'options'
    }

    def __init__(self, host=None, recommendation=None, current=None, options=None):  # noqa: E501
        """HostDiskGroupInfo - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._recommendation = None
        self._current = None
        self._options = None
        self.discriminator = None
        self.host = host
        self.recommendation = recommendation
        self.current = current
        self.options = options

    @property
    def host(self):
        """Gets the host of this HostDiskGroupInfo.  # noqa: E501

        Host info SN or IP  # noqa: E501

        :return: The host of this HostDiskGroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HostDiskGroupInfo.

        Host info SN or IP  # noqa: E501

        :param host: The host of this HostDiskGroupInfo.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def recommendation(self):
        """Gets the recommendation of this HostDiskGroupInfo.  # noqa: E501


        :return: The recommendation of this HostDiskGroupInfo.  # noqa: E501
        :rtype: CurrentDGInfoSepc
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this HostDiskGroupInfo.


        :param recommendation: The recommendation of this HostDiskGroupInfo.  # noqa: E501
        :type: CurrentDGInfoSepc
        """
        if recommendation is None:
            raise ValueError("Invalid value for `recommendation`, must not be `None`")  # noqa: E501

        self._recommendation = recommendation

    @property
    def current(self):
        """Gets the current of this HostDiskGroupInfo.  # noqa: E501


        :return: The current of this HostDiskGroupInfo.  # noqa: E501
        :rtype: CurrentDGInfoSepc
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this HostDiskGroupInfo.


        :param current: The current of this HostDiskGroupInfo.  # noqa: E501
        :type: CurrentDGInfoSepc
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def options(self):
        """Gets the options of this HostDiskGroupInfo.  # noqa: E501

        Options disk group information about the hosts  # noqa: E501

        :return: The options of this HostDiskGroupInfo.  # noqa: E501
        :rtype: list[OptionsDGInfoSepc]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this HostDiskGroupInfo.

        Options disk group information about the hosts  # noqa: E501

        :param options: The options of this HostDiskGroupInfo.  # noqa: E501
        :type: list[OptionsDGInfoSepc]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostDiskGroupInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostDiskGroupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
