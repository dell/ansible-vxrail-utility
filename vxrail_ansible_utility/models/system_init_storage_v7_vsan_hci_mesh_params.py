# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemInitStorageV7VsanHciMeshParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_cluster_name': 'str',
        'primary_storage_name': 'str',
        'storage_policy_profile_name': 'str',
        'is_server_stretched_cluster': 'bool',
        'preferred_site': 'str'
    }

    attribute_map = {
        'server_cluster_name': 'server_cluster_name',
        'primary_storage_name': 'primary_storage_name',
        'storage_policy_profile_name': 'storage_policy_profile_name',
        'is_server_stretched_cluster': 'is_server_stretched_cluster',
        'preferred_site': 'preferred_site'
    }

    def __init__(self, server_cluster_name=None, primary_storage_name=None, storage_policy_profile_name=None, is_server_stretched_cluster=False, preferred_site=None):  # noqa: E501
        """SystemInitStorageV7VsanHciMeshParams - a model defined in Swagger"""  # noqa: E501
        self._server_cluster_name = None
        self._primary_storage_name = None
        self._storage_policy_profile_name = None
        self._is_server_stretched_cluster = None
        self._preferred_site = None
        self.discriminator = None
        self.server_cluster_name = server_cluster_name
        self.primary_storage_name = primary_storage_name
        if storage_policy_profile_name is not None:
            self.storage_policy_profile_name = storage_policy_profile_name
        if is_server_stretched_cluster is not None:
            self.is_server_stretched_cluster = is_server_stretched_cluster
        if preferred_site is not None:
            self.preferred_site = preferred_site

    @property
    def server_cluster_name(self):
        """Gets the server_cluster_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501

        VMware vSAN cluster name.  # noqa: E501

        :return: The server_cluster_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :rtype: str
        """
        return self._server_cluster_name

    @server_cluster_name.setter
    def server_cluster_name(self, server_cluster_name):
        """Sets the server_cluster_name of this SystemInitStorageV7VsanHciMeshParams.

        VMware vSAN cluster name.  # noqa: E501

        :param server_cluster_name: The server_cluster_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :type: str
        """
        if server_cluster_name is None:
            raise ValueError("Invalid value for `server_cluster_name`, must not be `None`")  # noqa: E501

        self._server_cluster_name = server_cluster_name

    @property
    def primary_storage_name(self):
        """Gets the primary_storage_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501

        The remote VMware vSAN datastore name.  # noqa: E501

        :return: The primary_storage_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :rtype: str
        """
        return self._primary_storage_name

    @primary_storage_name.setter
    def primary_storage_name(self, primary_storage_name):
        """Sets the primary_storage_name of this SystemInitStorageV7VsanHciMeshParams.

        The remote VMware vSAN datastore name.  # noqa: E501

        :param primary_storage_name: The primary_storage_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :type: str
        """
        if primary_storage_name is None:
            raise ValueError("Invalid value for `primary_storage_name`, must not be `None`")  # noqa: E501

        self._primary_storage_name = primary_storage_name

    @property
    def storage_policy_profile_name(self):
        """Gets the storage_policy_profile_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501

        The VMware vCenter Server policy that is applied to the VxRail Manager VM. The default policy is vSAN Default Storage Policy.  # noqa: E501

        :return: The storage_policy_profile_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :rtype: str
        """
        return self._storage_policy_profile_name

    @storage_policy_profile_name.setter
    def storage_policy_profile_name(self, storage_policy_profile_name):
        """Sets the storage_policy_profile_name of this SystemInitStorageV7VsanHciMeshParams.

        The VMware vCenter Server policy that is applied to the VxRail Manager VM. The default policy is vSAN Default Storage Policy.  # noqa: E501

        :param storage_policy_profile_name: The storage_policy_profile_name of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :type: str
        """

        self._storage_policy_profile_name = storage_policy_profile_name

    @property
    def is_server_stretched_cluster(self):
        """Gets the is_server_stretched_cluster of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501

        Indicates whether HCI Mesh server is a stretched cluster.  # noqa: E501

        :return: The is_server_stretched_cluster of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_server_stretched_cluster

    @is_server_stretched_cluster.setter
    def is_server_stretched_cluster(self, is_server_stretched_cluster):
        """Sets the is_server_stretched_cluster of this SystemInitStorageV7VsanHciMeshParams.

        Indicates whether HCI Mesh server is a stretched cluster.  # noqa: E501

        :param is_server_stretched_cluster: The is_server_stretched_cluster of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :type: bool
        """

        self._is_server_stretched_cluster = is_server_stretched_cluster

    @property
    def preferred_site(self):
        """Gets the preferred_site of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501

        The name of the remote server site (fault domain) to be linked with the client site.  # noqa: E501

        :return: The preferred_site of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :rtype: str
        """
        return self._preferred_site

    @preferred_site.setter
    def preferred_site(self, preferred_site):
        """Sets the preferred_site of this SystemInitStorageV7VsanHciMeshParams.

        The name of the remote server site (fault domain) to be linked with the client site.  # noqa: E501

        :param preferred_site: The preferred_site of this SystemInitStorageV7VsanHciMeshParams.  # noqa: E501
        :type: str
        """

        self._preferred_site = preferred_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitStorageV7VsanHciMeshParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitStorageV7VsanHciMeshParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
