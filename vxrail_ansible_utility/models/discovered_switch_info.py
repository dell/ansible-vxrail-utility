# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DiscoveredSwitchInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'str',
        'context_path': 'str',
        'domain_id': 'str',
        'vip': 'str',
        'http_service': 'str',
        'device_type': 'str'
    }

    attribute_map = {
        'profile': 'PROFILE',
        'context_path': 'CONTEXT_PATH',
        'domain_id': 'domainId',
        'vip': 'VIP',
        'http_service': 'HTTP_SERVICE',
        'device_type': 'DEVICE_TYPE'
    }

    def __init__(self, profile=None, context_path=None, domain_id=None, vip=None, http_service=None, device_type=None):  # noqa: E501
        """DiscoveredSwitchInfo - a model defined in Swagger"""  # noqa: E501
        self._profile = None
        self._context_path = None
        self._domain_id = None
        self._vip = None
        self._http_service = None
        self._device_type = None
        self.discriminator = None
        if profile is not None:
            self.profile = profile
        if context_path is not None:
            self.context_path = context_path
        if domain_id is not None:
            self.domain_id = domain_id
        if vip is not None:
            self.vip = vip
        if http_service is not None:
            self.http_service = http_service
        if device_type is not None:
            self.device_type = device_type

    @property
    def profile(self):
        """Gets the profile of this DiscoveredSwitchInfo.  # noqa: E501

        Swicth profile  # noqa: E501

        :return: The profile of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DiscoveredSwitchInfo.

        Swicth profile  # noqa: E501

        :param profile: The profile of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def context_path(self):
        """Gets the context_path of this DiscoveredSwitchInfo.  # noqa: E501

        context path of the switch  # noqa: E501

        :return: The context_path of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this DiscoveredSwitchInfo.

        context path of the switch  # noqa: E501

        :param context_path: The context_path of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._context_path = context_path

    @property
    def domain_id(self):
        """Gets the domain_id of this DiscoveredSwitchInfo.  # noqa: E501

        Switch domain id  # noqa: E501

        :return: The domain_id of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this DiscoveredSwitchInfo.

        Switch domain id  # noqa: E501

        :param domain_id: The domain_id of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def vip(self):
        """Gets the vip of this DiscoveredSwitchInfo.  # noqa: E501

        Switch IP address  # noqa: E501

        :return: The vip of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this DiscoveredSwitchInfo.

        Switch IP address  # noqa: E501

        :param vip: The vip of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._vip = vip

    @property
    def http_service(self):
        """Gets the http_service of this DiscoveredSwitchInfo.  # noqa: E501

        Switch http service  # noqa: E501

        :return: The http_service of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._http_service

    @http_service.setter
    def http_service(self, http_service):
        """Sets the http_service of this DiscoveredSwitchInfo.

        Switch http service  # noqa: E501

        :param http_service: The http_service of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._http_service = http_service

    @property
    def device_type(self):
        """Gets the device_type of this DiscoveredSwitchInfo.  # noqa: E501

        Device type  # noqa: E501

        :return: The device_type of this DiscoveredSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DiscoveredSwitchInfo.

        Device type  # noqa: E501

        :param device_type: The device_type of this DiscoveredSwitchInfo.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredSwitchInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredSwitchInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
