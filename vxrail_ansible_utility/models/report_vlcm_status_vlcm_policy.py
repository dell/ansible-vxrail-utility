# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportVlcmStatusVlcmPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enforce_hcl_validation': 'bool',
        'disable_dpm': 'bool',
        'evacuate_offline_vms': 'bool',
        'disable_hac': 'bool',
        'enable_quick_boot': 'bool',
        'stage_before_upgrade': 'bool'
    }

    attribute_map = {
        'enforce_hcl_validation': 'enforce_hcl_validation',
        'disable_dpm': 'disable_dpm',
        'evacuate_offline_vms': 'evacuate_offline_vms',
        'disable_hac': 'disable_hac',
        'enable_quick_boot': 'enable_quick_boot',
        'stage_before_upgrade': 'stage_before_upgrade'
    }

    def __init__(self, enforce_hcl_validation=None, disable_dpm=None, evacuate_offline_vms=None, disable_hac=None, enable_quick_boot=None, stage_before_upgrade=None):  # noqa: E501
        """ReportVlcmStatusVlcmPolicy - a model defined in Swagger"""  # noqa: E501
        self._enforce_hcl_validation = None
        self._disable_dpm = None
        self._evacuate_offline_vms = None
        self._disable_hac = None
        self._enable_quick_boot = None
        self._stage_before_upgrade = None
        self.discriminator = None
        if enforce_hcl_validation is not None:
            self.enforce_hcl_validation = enforce_hcl_validation
        if disable_dpm is not None:
            self.disable_dpm = disable_dpm
        if evacuate_offline_vms is not None:
            self.evacuate_offline_vms = evacuate_offline_vms
        if disable_hac is not None:
            self.disable_hac = disable_hac
        if enable_quick_boot is not None:
            self.enable_quick_boot = enable_quick_boot
        if stage_before_upgrade is not None:
            self.stage_before_upgrade = stage_before_upgrade

    @property
    def enforce_hcl_validation(self):
        """Gets the enforce_hcl_validation of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The enforce_hcl_validation of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_hcl_validation

    @enforce_hcl_validation.setter
    def enforce_hcl_validation(self, enforce_hcl_validation):
        """Sets the enforce_hcl_validation of this ReportVlcmStatusVlcmPolicy.


        :param enforce_hcl_validation: The enforce_hcl_validation of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._enforce_hcl_validation = enforce_hcl_validation

    @property
    def disable_dpm(self):
        """Gets the disable_dpm of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The disable_dpm of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._disable_dpm

    @disable_dpm.setter
    def disable_dpm(self, disable_dpm):
        """Sets the disable_dpm of this ReportVlcmStatusVlcmPolicy.


        :param disable_dpm: The disable_dpm of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._disable_dpm = disable_dpm

    @property
    def evacuate_offline_vms(self):
        """Gets the evacuate_offline_vms of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The evacuate_offline_vms of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._evacuate_offline_vms

    @evacuate_offline_vms.setter
    def evacuate_offline_vms(self, evacuate_offline_vms):
        """Sets the evacuate_offline_vms of this ReportVlcmStatusVlcmPolicy.


        :param evacuate_offline_vms: The evacuate_offline_vms of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._evacuate_offline_vms = evacuate_offline_vms

    @property
    def disable_hac(self):
        """Gets the disable_hac of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The disable_hac of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._disable_hac

    @disable_hac.setter
    def disable_hac(self, disable_hac):
        """Sets the disable_hac of this ReportVlcmStatusVlcmPolicy.


        :param disable_hac: The disable_hac of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._disable_hac = disable_hac

    @property
    def enable_quick_boot(self):
        """Gets the enable_quick_boot of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The enable_quick_boot of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_quick_boot

    @enable_quick_boot.setter
    def enable_quick_boot(self, enable_quick_boot):
        """Sets the enable_quick_boot of this ReportVlcmStatusVlcmPolicy.


        :param enable_quick_boot: The enable_quick_boot of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_quick_boot = enable_quick_boot

    @property
    def stage_before_upgrade(self):
        """Gets the stage_before_upgrade of this ReportVlcmStatusVlcmPolicy.  # noqa: E501


        :return: The stage_before_upgrade of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._stage_before_upgrade

    @stage_before_upgrade.setter
    def stage_before_upgrade(self, stage_before_upgrade):
        """Sets the stage_before_upgrade of this ReportVlcmStatusVlcmPolicy.


        :param stage_before_upgrade: The stage_before_upgrade of this ReportVlcmStatusVlcmPolicy.  # noqa: E501
        :type: bool
        """

        self._stage_before_upgrade = stage_before_upgrade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportVlcmStatusVlcmPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportVlcmStatusVlcmPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
