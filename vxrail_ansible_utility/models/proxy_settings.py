# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProxySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server': 'str',
        'port': 'int',
        'type': 'str',
        'username': 'str',
        'socks_version': 'int'
    }

    attribute_map = {
        'server': 'server',
        'port': 'port',
        'type': 'type',
        'username': 'username',
        'socks_version': 'socks_version'
    }

    def __init__(self, server=None, port=None, type=None, username=None, socks_version=None):  # noqa: E501
        """ProxySettings - a model defined in Swagger"""  # noqa: E501
        self._server = None
        self._port = None
        self._type = None
        self._username = None
        self._socks_version = None
        self.discriminator = None
        self.server = server
        self.port = port
        self.type = type
        if username is not None:
            self.username = username
        if socks_version is not None:
            self.socks_version = socks_version

    @property
    def server(self):
        """Gets the server of this ProxySettings.  # noqa: E501

        IP address or host name of the proxy server  # noqa: E501

        :return: The server of this ProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ProxySettings.

        IP address or host name of the proxy server  # noqa: E501

        :param server: The server of this ProxySettings.  # noqa: E501
        :type: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    @property
    def port(self):
        """Gets the port of this ProxySettings.  # noqa: E501

        Port of the proxy server  # noqa: E501

        :return: The port of this ProxySettings.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ProxySettings.

        Port of the proxy server  # noqa: E501

        :param port: The port of this ProxySettings.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def type(self):
        """Gets the type of this ProxySettings.  # noqa: E501

        Type of proxy server. Supported types are HTTP and SOCKS.  # noqa: E501

        :return: The type of this ProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxySettings.

        Type of proxy server. Supported types are HTTP and SOCKS.  # noqa: E501

        :param type: The type of this ProxySettings.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def username(self):
        """Gets the username of this ProxySettings.  # noqa: E501

        Username credentials for the proxy server  # noqa: E501

        :return: The username of this ProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ProxySettings.

        Username credentials for the proxy server  # noqa: E501

        :param username: The username of this ProxySettings.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def socks_version(self):
        """Gets the socks_version of this ProxySettings.  # noqa: E501

        Version of the Socks proxy server. This parameter is mandatory if the proxy type is SOCKS  # noqa: E501

        :return: The socks_version of this ProxySettings.  # noqa: E501
        :rtype: int
        """
        return self._socks_version

    @socks_version.setter
    def socks_version(self, socks_version):
        """Sets the socks_version of this ProxySettings.

        Version of the Socks proxy server. This parameter is mandatory if the proxy type is SOCKS  # noqa: E501

        :param socks_version: The socks_version of this ProxySettings.  # noqa: E501
        :type: int
        """

        self._socks_version = socks_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxySettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
