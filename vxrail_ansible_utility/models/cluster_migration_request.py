# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterMigrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_vc': 'ClusterMigrationSourceVcSpec',
        'target_vc': 'ClusterMigrationTargetVcSpec',
        'vxm_vm_name': 'str',
        'hosts': 'list[ClusterMigrationHostsSpec]',
        'cluster_type': 'str',
        'witness': 'ClusterMigrationWitnessSpec',
        'vds_name': 'list[ClusterMigrationNameSpec]',
        'portgroup_name': 'list[ClusterMigrationNameSpec]',
        'vm_folder_name': 'list[ClusterMigrationNameSpec]'
    }

    attribute_map = {
        'source_vc': 'source_vc',
        'target_vc': 'target_vc',
        'vxm_vm_name': 'vxm_vm_name',
        'hosts': 'hosts',
        'cluster_type': 'cluster_type',
        'witness': 'witness',
        'vds_name': 'vds_name',
        'portgroup_name': 'portgroup_name',
        'vm_folder_name': 'vm_folder_name'
    }

    def __init__(self, source_vc=None, target_vc=None, vxm_vm_name=None, hosts=None, cluster_type=None, witness=None, vds_name=None, portgroup_name=None, vm_folder_name=None):  # noqa: E501
        """ClusterMigrationRequest - a model defined in Swagger"""  # noqa: E501
        self._source_vc = None
        self._target_vc = None
        self._vxm_vm_name = None
        self._hosts = None
        self._cluster_type = None
        self._witness = None
        self._vds_name = None
        self._portgroup_name = None
        self._vm_folder_name = None
        self.discriminator = None
        self.source_vc = source_vc
        self.target_vc = target_vc
        if vxm_vm_name is not None:
            self.vxm_vm_name = vxm_vm_name
        if hosts is not None:
            self.hosts = hosts
        self.cluster_type = cluster_type
        if witness is not None:
            self.witness = witness
        if vds_name is not None:
            self.vds_name = vds_name
        if portgroup_name is not None:
            self.portgroup_name = portgroup_name
        if vm_folder_name is not None:
            self.vm_folder_name = vm_folder_name

    @property
    def source_vc(self):
        """Gets the source_vc of this ClusterMigrationRequest.  # noqa: E501


        :return: The source_vc of this ClusterMigrationRequest.  # noqa: E501
        :rtype: ClusterMigrationSourceVcSpec
        """
        return self._source_vc

    @source_vc.setter
    def source_vc(self, source_vc):
        """Sets the source_vc of this ClusterMigrationRequest.


        :param source_vc: The source_vc of this ClusterMigrationRequest.  # noqa: E501
        :type: ClusterMigrationSourceVcSpec
        """
        if source_vc is None:
            raise ValueError("Invalid value for `source_vc`, must not be `None`")  # noqa: E501

        self._source_vc = source_vc

    @property
    def target_vc(self):
        """Gets the target_vc of this ClusterMigrationRequest.  # noqa: E501


        :return: The target_vc of this ClusterMigrationRequest.  # noqa: E501
        :rtype: ClusterMigrationTargetVcSpec
        """
        return self._target_vc

    @target_vc.setter
    def target_vc(self, target_vc):
        """Sets the target_vc of this ClusterMigrationRequest.


        :param target_vc: The target_vc of this ClusterMigrationRequest.  # noqa: E501
        :type: ClusterMigrationTargetVcSpec
        """
        if target_vc is None:
            raise ValueError("Invalid value for `target_vc`, must not be `None`")  # noqa: E501

        self._target_vc = target_vc

    @property
    def vxm_vm_name(self):
        """Gets the vxm_vm_name of this ClusterMigrationRequest.  # noqa: E501

        name of VxM.  # noqa: E501

        :return: The vxm_vm_name of this ClusterMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._vxm_vm_name

    @vxm_vm_name.setter
    def vxm_vm_name(self, vxm_vm_name):
        """Sets the vxm_vm_name of this ClusterMigrationRequest.

        name of VxM.  # noqa: E501

        :param vxm_vm_name: The vxm_vm_name of this ClusterMigrationRequest.  # noqa: E501
        :type: str
        """

        self._vxm_vm_name = vxm_vm_name

    @property
    def hosts(self):
        """Gets the hosts of this ClusterMigrationRequest.  # noqa: E501

        esxi hosts spec  # noqa: E501

        :return: The hosts of this ClusterMigrationRequest.  # noqa: E501
        :rtype: list[ClusterMigrationHostsSpec]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this ClusterMigrationRequest.

        esxi hosts spec  # noqa: E501

        :param hosts: The hosts of this ClusterMigrationRequest.  # noqa: E501
        :type: list[ClusterMigrationHostsSpec]
        """

        self._hosts = hosts

    @property
    def cluster_type(self):
        """Gets the cluster_type of this ClusterMigrationRequest.  # noqa: E501

        to distinguish the cluster type  # noqa: E501

        :return: The cluster_type of this ClusterMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this ClusterMigrationRequest.

        to distinguish the cluster type  # noqa: E501

        :param cluster_type: The cluster_type of this ClusterMigrationRequest.  # noqa: E501
        :type: str
        """
        if cluster_type is None:
            raise ValueError("Invalid value for `cluster_type`, must not be `None`")  # noqa: E501

        self._cluster_type = cluster_type

    @property
    def witness(self):
        """Gets the witness of this ClusterMigrationRequest.  # noqa: E501


        :return: The witness of this ClusterMigrationRequest.  # noqa: E501
        :rtype: ClusterMigrationWitnessSpec
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this ClusterMigrationRequest.


        :param witness: The witness of this ClusterMigrationRequest.  # noqa: E501
        :type: ClusterMigrationWitnessSpec
        """

        self._witness = witness

    @property
    def vds_name(self):
        """Gets the vds_name of this ClusterMigrationRequest.  # noqa: E501

        vds name changing spec for cluster migration  # noqa: E501

        :return: The vds_name of this ClusterMigrationRequest.  # noqa: E501
        :rtype: list[ClusterMigrationNameSpec]
        """
        return self._vds_name

    @vds_name.setter
    def vds_name(self, vds_name):
        """Sets the vds_name of this ClusterMigrationRequest.

        vds name changing spec for cluster migration  # noqa: E501

        :param vds_name: The vds_name of this ClusterMigrationRequest.  # noqa: E501
        :type: list[ClusterMigrationNameSpec]
        """

        self._vds_name = vds_name

    @property
    def portgroup_name(self):
        """Gets the portgroup_name of this ClusterMigrationRequest.  # noqa: E501

        portgroup name changing spec for cluster migration  # noqa: E501

        :return: The portgroup_name of this ClusterMigrationRequest.  # noqa: E501
        :rtype: list[ClusterMigrationNameSpec]
        """
        return self._portgroup_name

    @portgroup_name.setter
    def portgroup_name(self, portgroup_name):
        """Sets the portgroup_name of this ClusterMigrationRequest.

        portgroup name changing spec for cluster migration  # noqa: E501

        :param portgroup_name: The portgroup_name of this ClusterMigrationRequest.  # noqa: E501
        :type: list[ClusterMigrationNameSpec]
        """

        self._portgroup_name = portgroup_name

    @property
    def vm_folder_name(self):
        """Gets the vm_folder_name of this ClusterMigrationRequest.  # noqa: E501

        vds name changing spec for cluster migration  # noqa: E501

        :return: The vm_folder_name of this ClusterMigrationRequest.  # noqa: E501
        :rtype: list[ClusterMigrationNameSpec]
        """
        return self._vm_folder_name

    @vm_folder_name.setter
    def vm_folder_name(self, vm_folder_name):
        """Sets the vm_folder_name of this ClusterMigrationRequest.

        vds name changing spec for cluster migration  # noqa: E501

        :param vm_folder_name: The vm_folder_name of this ClusterMigrationRequest.  # noqa: E501
        :type: list[ClusterMigrationNameSpec]
        """

        self._vm_folder_name = vm_folder_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterMigrationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterMigrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
