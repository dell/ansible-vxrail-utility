# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportPrecheckErrorMsg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'action': 'str',
        'alphaid': 'str',
        'severity': 'str',
        'symptom': 'str',
        'kb': 'str',
        'extension': 'ReportPrecheckErrorMsgExtension'
    }

    attribute_map = {
        'id': 'id',
        'action': 'action',
        'alphaid': 'alphaid',
        'severity': 'severity',
        'symptom': 'symptom',
        'kb': 'kb',
        'extension': 'extension'
    }

    def __init__(self, id=None, action=None, alphaid=None, severity=None, symptom=None, kb=None, extension=None):  # noqa: E501
        """ReportPrecheckErrorMsg - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._action = None
        self._alphaid = None
        self._severity = None
        self._symptom = None
        self._kb = None
        self._extension = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if action is not None:
            self.action = action
        if alphaid is not None:
            self.alphaid = alphaid
        if severity is not None:
            self.severity = severity
        if symptom is not None:
            self.symptom = symptom
        if kb is not None:
            self.kb = kb
        if extension is not None:
            self.extension = extension

    @property
    def id(self):
        """Gets the id of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The id of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportPrecheckErrorMsg.


        :param id: The id of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def action(self):
        """Gets the action of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The action of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ReportPrecheckErrorMsg.


        :param action: The action of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def alphaid(self):
        """Gets the alphaid of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The alphaid of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._alphaid

    @alphaid.setter
    def alphaid(self, alphaid):
        """Sets the alphaid of this ReportPrecheckErrorMsg.


        :param alphaid: The alphaid of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._alphaid = alphaid

    @property
    def severity(self):
        """Gets the severity of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The severity of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ReportPrecheckErrorMsg.


        :param severity: The severity of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def symptom(self):
        """Gets the symptom of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The symptom of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._symptom

    @symptom.setter
    def symptom(self, symptom):
        """Sets the symptom of this ReportPrecheckErrorMsg.


        :param symptom: The symptom of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._symptom = symptom

    @property
    def kb(self):
        """Gets the kb of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The kb of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: str
        """
        return self._kb

    @kb.setter
    def kb(self, kb):
        """Sets the kb of this ReportPrecheckErrorMsg.


        :param kb: The kb of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: str
        """

        self._kb = kb

    @property
    def extension(self):
        """Gets the extension of this ReportPrecheckErrorMsg.  # noqa: E501


        :return: The extension of this ReportPrecheckErrorMsg.  # noqa: E501
        :rtype: ReportPrecheckErrorMsgExtension
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this ReportPrecheckErrorMsg.


        :param extension: The extension of this ReportPrecheckErrorMsg.  # noqa: E501
        :type: ReportPrecheckErrorMsgExtension
        """

        self._extension = extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPrecheckErrorMsg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPrecheckErrorMsg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
