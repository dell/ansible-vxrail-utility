# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemInitSpecVxrailManager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ip': 'str',
        'netmask': 'str',
        'gateway': 'str',
        'accounts': 'SystemInitSpecVxrailManagerAccounts'
    }

    attribute_map = {
        'name': 'name',
        'ip': 'ip',
        'netmask': 'netmask',
        'gateway': 'gateway',
        'accounts': 'accounts'
    }

    def __init__(self, name=None, ip=None, netmask=None, gateway=None, accounts=None):  # noqa: E501
        """SystemInitSpecVxrailManager - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._ip = None
        self._netmask = None
        self._gateway = None
        self._accounts = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if ip is not None:
            self.ip = ip
        if netmask is not None:
            self.netmask = netmask
        if gateway is not None:
            self.gateway = gateway
        if accounts is not None:
            self.accounts = accounts

    @property
    def name(self):
        """Gets the name of this SystemInitSpecVxrailManager.  # noqa: E501


        :return: The name of this SystemInitSpecVxrailManager.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInitSpecVxrailManager.


        :param name: The name of this SystemInitSpecVxrailManager.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ip(self):
        """Gets the ip of this SystemInitSpecVxrailManager.  # noqa: E501


        :return: The ip of this SystemInitSpecVxrailManager.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this SystemInitSpecVxrailManager.


        :param ip: The ip of this SystemInitSpecVxrailManager.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def netmask(self):
        """Gets the netmask of this SystemInitSpecVxrailManager.  # noqa: E501


        :return: The netmask of this SystemInitSpecVxrailManager.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this SystemInitSpecVxrailManager.


        :param netmask: The netmask of this SystemInitSpecVxrailManager.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def gateway(self):
        """Gets the gateway of this SystemInitSpecVxrailManager.  # noqa: E501


        :return: The gateway of this SystemInitSpecVxrailManager.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this SystemInitSpecVxrailManager.


        :param gateway: The gateway of this SystemInitSpecVxrailManager.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def accounts(self):
        """Gets the accounts of this SystemInitSpecVxrailManager.  # noqa: E501


        :return: The accounts of this SystemInitSpecVxrailManager.  # noqa: E501
        :rtype: SystemInitSpecVxrailManagerAccounts
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SystemInitSpecVxrailManager.


        :param accounts: The accounts of this SystemInitSpecVxrailManager.  # noqa: E501
        :type: SystemInitSpecVxrailManagerAccounts
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitSpecVxrailManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitSpecVxrailManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
