# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'primary': 'bool',
        'version': 'str',
        'upgrade_request_id': 'str'
    }

    attribute_map = {
        'address': 'address',
        'primary': 'primary',
        'version': 'version',
        'upgrade_request_id': 'upgradeRequestId'
    }

    def __init__(self, address=None, primary=None, version=None, upgrade_request_id=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._primary = None
        self._version = None
        self._upgrade_request_id = None
        self.discriminator = None
        self.address = address
        self.primary = primary
        if version is not None:
            self.version = version
        if upgrade_request_id is not None:
            self.upgrade_request_id = upgrade_request_id

    @property
    def address(self):
        """Gets the address of this Address.  # noqa: E501

        IP address or FQDN of the SRS server  # noqa: E501

        :return: The address of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.

        IP address or FQDN of the SRS server  # noqa: E501

        :param address: The address of this Address.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def primary(self):
        """Gets the primary of this Address.  # noqa: E501

        Whether the SRS server is primary or not  # noqa: E501

        :return: The primary of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this Address.

        Whether the SRS server is primary or not  # noqa: E501

        :param primary: The primary of this Address.  # noqa: E501
        :type: bool
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")  # noqa: E501

        self._primary = primary

    @property
    def version(self):
        """Gets the version of this Address.  # noqa: E501

        Version of the SRS software  # noqa: E501

        :return: The version of this Address.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Address.

        Version of the SRS software  # noqa: E501

        :param version: The version of this Address.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def upgrade_request_id(self):
        """Gets the upgrade_request_id of this Address.  # noqa: E501

        Request ID for internal SRS upgrades only  # noqa: E501

        :return: The upgrade_request_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_request_id

    @upgrade_request_id.setter
    def upgrade_request_id(self, upgrade_request_id):
        """Sets the upgrade_request_id of this Address.

        Request ID for internal SRS upgrades only  # noqa: E501

        :param upgrade_request_id: The upgrade_request_id of this Address.  # noqa: E501
        :type: str
        """

        self._upgrade_request_id = upgrade_request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
