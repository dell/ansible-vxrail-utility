# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostDiskSlotMappingsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'all_slots': 'list[BayInfo]',
        'vsan_slots': 'HostDiskSlotMappingsResponseVsanSlots',
        'non_vsan_slots': 'list[BayInfo]',
        'diskgroup_type': 'str',
        'unmanaged_slots': 'list[BayInfo]'
    }

    attribute_map = {
        'host': 'host',
        'all_slots': 'all_slots',
        'vsan_slots': 'vsan_slots',
        'non_vsan_slots': 'non_vsan_slots',
        'diskgroup_type': 'diskgroup_type',
        'unmanaged_slots': 'unmanaged_slots'
    }

    def __init__(self, host=None, all_slots=None, vsan_slots=None, non_vsan_slots=None, diskgroup_type=None, unmanaged_slots=None):  # noqa: E501
        """HostDiskSlotMappingsResponse - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._all_slots = None
        self._vsan_slots = None
        self._non_vsan_slots = None
        self._diskgroup_type = None
        self._unmanaged_slots = None
        self.discriminator = None
        self.host = host
        if all_slots is not None:
            self.all_slots = all_slots
        if vsan_slots is not None:
            self.vsan_slots = vsan_slots
        if non_vsan_slots is not None:
            self.non_vsan_slots = non_vsan_slots
        if diskgroup_type is not None:
            self.diskgroup_type = diskgroup_type
        if unmanaged_slots is not None:
            self.unmanaged_slots = unmanaged_slots

    @property
    def host(self):
        """Gets the host of this HostDiskSlotMappingsResponse.  # noqa: E501

        If host_serial_number is supplied in the request object, this property returns the host serial number. Otherwise, the property returns the host ID ip address.  # noqa: E501

        :return: The host of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HostDiskSlotMappingsResponse.

        If host_serial_number is supplied in the request object, this property returns the host serial number. Otherwise, the property returns the host ID ip address.  # noqa: E501

        :param host: The host of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def all_slots(self):
        """Gets the all_slots of this HostDiskSlotMappingsResponse.  # noqa: E501

        Information about slot positions for all disk drives  # noqa: E501

        :return: The all_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: list[BayInfo]
        """
        return self._all_slots

    @all_slots.setter
    def all_slots(self, all_slots):
        """Sets the all_slots of this HostDiskSlotMappingsResponse.

        Information about slot positions for all disk drives  # noqa: E501

        :param all_slots: The all_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: list[BayInfo]
        """

        self._all_slots = all_slots

    @property
    def vsan_slots(self):
        """Gets the vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501


        :return: The vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: HostDiskSlotMappingsResponseVsanSlots
        """
        return self._vsan_slots

    @vsan_slots.setter
    def vsan_slots(self, vsan_slots):
        """Sets the vsan_slots of this HostDiskSlotMappingsResponse.


        :param vsan_slots: The vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: HostDiskSlotMappingsResponseVsanSlots
        """

        self._vsan_slots = vsan_slots

    @property
    def non_vsan_slots(self):
        """Gets the non_vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501

        A list of all slot positions where a disk drive is claimed for non-vSAN usage  # noqa: E501

        :return: The non_vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: list[BayInfo]
        """
        return self._non_vsan_slots

    @non_vsan_slots.setter
    def non_vsan_slots(self, non_vsan_slots):
        """Sets the non_vsan_slots of this HostDiskSlotMappingsResponse.

        A list of all slot positions where a disk drive is claimed for non-vSAN usage  # noqa: E501

        :param non_vsan_slots: The non_vsan_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: list[BayInfo]
        """

        self._non_vsan_slots = non_vsan_slots

    @property
    def diskgroup_type(self):
        """Gets the diskgroup_type of this HostDiskSlotMappingsResponse.  # noqa: E501


        :return: The diskgroup_type of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._diskgroup_type

    @diskgroup_type.setter
    def diskgroup_type(self, diskgroup_type):
        """Sets the diskgroup_type of this HostDiskSlotMappingsResponse.


        :param diskgroup_type: The diskgroup_type of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: str
        """

        self._diskgroup_type = diskgroup_type

    @property
    def unmanaged_slots(self):
        """Gets the unmanaged_slots of this HostDiskSlotMappingsResponse.  # noqa: E501

        A list of all slot positions where a disk drive is claimed for unmanaged usage  # noqa: E501

        :return: The unmanaged_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :rtype: list[BayInfo]
        """
        return self._unmanaged_slots

    @unmanaged_slots.setter
    def unmanaged_slots(self, unmanaged_slots):
        """Sets the unmanaged_slots of this HostDiskSlotMappingsResponse.

        A list of all slot positions where a disk drive is claimed for unmanaged usage  # noqa: E501

        :param unmanaged_slots: The unmanaged_slots of this HostDiskSlotMappingsResponse.  # noqa: E501
        :type: list[BayInfo]
        """

        self._unmanaged_slots = unmanaged_slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostDiskSlotMappingsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostDiskSlotMappingsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
