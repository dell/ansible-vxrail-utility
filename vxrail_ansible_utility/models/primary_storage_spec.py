# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrimaryStorageSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_storage_type': 'str',
        'primary_storage_name': 'str',
        'storage_policy_profile_name': 'str'
    }

    attribute_map = {
        'primary_storage_type': 'primary_storage_type',
        'primary_storage_name': 'primary_storage_name',
        'storage_policy_profile_name': 'storage_policy_profile_name'
    }

    def __init__(self, primary_storage_type=None, primary_storage_name=None, storage_policy_profile_name=None):  # noqa: E501
        """PrimaryStorageSpec - a model defined in Swagger"""  # noqa: E501
        self._primary_storage_type = None
        self._primary_storage_name = None
        self._storage_policy_profile_name = None
        self.discriminator = None
        if primary_storage_type is not None:
            self.primary_storage_type = primary_storage_type
        self.primary_storage_name = primary_storage_name
        if storage_policy_profile_name is not None:
            self.storage_policy_profile_name = storage_policy_profile_name

    @property
    def primary_storage_type(self):
        """Gets the primary_storage_type of this PrimaryStorageSpec.  # noqa: E501

        Primary storage type that is mounted on the dynamic node cluster  # noqa: E501

        :return: The primary_storage_type of this PrimaryStorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._primary_storage_type

    @primary_storage_type.setter
    def primary_storage_type(self, primary_storage_type):
        """Sets the primary_storage_type of this PrimaryStorageSpec.

        Primary storage type that is mounted on the dynamic node cluster  # noqa: E501

        :param primary_storage_type: The primary_storage_type of this PrimaryStorageSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["VSAN_HCI_MESH", "EXTERNAL"]  # noqa: E501
        if primary_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_storage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(primary_storage_type, allowed_values)
            )

        self._primary_storage_type = primary_storage_type

    @property
    def primary_storage_name(self):
        """Gets the primary_storage_name of this PrimaryStorageSpec.  # noqa: E501

        Name of primary storage where VxRail Manager will be migrated to  # noqa: E501

        :return: The primary_storage_name of this PrimaryStorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._primary_storage_name

    @primary_storage_name.setter
    def primary_storage_name(self, primary_storage_name):
        """Sets the primary_storage_name of this PrimaryStorageSpec.

        Name of primary storage where VxRail Manager will be migrated to  # noqa: E501

        :param primary_storage_name: The primary_storage_name of this PrimaryStorageSpec.  # noqa: E501
        :type: str
        """
        if primary_storage_name is None:
            raise ValueError("Invalid value for `primary_storage_name`, must not be `None`")  # noqa: E501

        self._primary_storage_name = primary_storage_name

    @property
    def storage_policy_profile_name(self):
        """Gets the storage_policy_profile_name of this PrimaryStorageSpec.  # noqa: E501

        The storage policy that will be applied to VxRail Manager  # noqa: E501

        :return: The storage_policy_profile_name of this PrimaryStorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._storage_policy_profile_name

    @storage_policy_profile_name.setter
    def storage_policy_profile_name(self, storage_policy_profile_name):
        """Sets the storage_policy_profile_name of this PrimaryStorageSpec.

        The storage policy that will be applied to VxRail Manager  # noqa: E501

        :param storage_policy_profile_name: The storage_policy_profile_name of this PrimaryStorageSpec.  # noqa: E501
        :type: str
        """

        self._storage_policy_profile_name = storage_policy_profile_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrimaryStorageSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimaryStorageSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
