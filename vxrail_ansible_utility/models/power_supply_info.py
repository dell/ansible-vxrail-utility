# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PowerSupplyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sn': 'str',
        'part_number': 'str',
        'revision_number': 'str',
        'name': 'str',
        'manufacturer': 'str',
        'slot': 'int',
        'health': 'str',
        'missing': 'bool'
    }

    attribute_map = {
        'sn': 'sn',
        'part_number': 'part_number',
        'revision_number': 'revision_number',
        'name': 'name',
        'manufacturer': 'manufacturer',
        'slot': 'slot',
        'health': 'health',
        'missing': 'missing'
    }

    def __init__(self, sn=None, part_number=None, revision_number=None, name=None, manufacturer=None, slot=None, health=None, missing=None):  # noqa: E501
        """PowerSupplyInfo - a model defined in Swagger"""  # noqa: E501
        self._sn = None
        self._part_number = None
        self._revision_number = None
        self._name = None
        self._manufacturer = None
        self._slot = None
        self._health = None
        self._missing = None
        self.discriminator = None
        if sn is not None:
            self.sn = sn
        if part_number is not None:
            self.part_number = part_number
        if revision_number is not None:
            self.revision_number = revision_number
        if name is not None:
            self.name = name
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if slot is not None:
            self.slot = slot
        if health is not None:
            self.health = health
        if missing is not None:
            self.missing = missing

    @property
    def sn(self):
        """Gets the sn of this PowerSupplyInfo.  # noqa: E501

        Serial number of the power supply  # noqa: E501

        :return: The sn of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this PowerSupplyInfo.

        Serial number of the power supply  # noqa: E501

        :param sn: The sn of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def part_number(self):
        """Gets the part_number of this PowerSupplyInfo.  # noqa: E501

        Part number of the power supply  # noqa: E501

        :return: The part_number of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this PowerSupplyInfo.

        Part number of the power supply  # noqa: E501

        :param part_number: The part_number of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def revision_number(self):
        """Gets the revision_number of this PowerSupplyInfo.  # noqa: E501

        Revision number of the power supply  # noqa: E501

        :return: The revision_number of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this PowerSupplyInfo.

        Revision number of the power supply  # noqa: E501

        :param revision_number: The revision_number of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._revision_number = revision_number

    @property
    def name(self):
        """Gets the name of this PowerSupplyInfo.  # noqa: E501

        Name of the power supply  # noqa: E501

        :return: The name of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerSupplyInfo.

        Name of the power supply  # noqa: E501

        :param name: The name of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this PowerSupplyInfo.  # noqa: E501

        Manufacturer of the power supply  # noqa: E501

        :return: The manufacturer of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this PowerSupplyInfo.

        Manufacturer of the power supply  # noqa: E501

        :param manufacturer: The manufacturer of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def slot(self):
        """Gets the slot of this PowerSupplyInfo.  # noqa: E501

        Slot position of the power supply  # noqa: E501

        :return: The slot of this PowerSupplyInfo.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this PowerSupplyInfo.

        Slot position of the power supply  # noqa: E501

        :param slot: The slot of this PowerSupplyInfo.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def health(self):
        """Gets the health of this PowerSupplyInfo.  # noqa: E501

        Health status of the power supply. Supported values are Critical, Error, Warning, and Healthy.  # noqa: E501

        :return: The health of this PowerSupplyInfo.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this PowerSupplyInfo.

        Health status of the power supply. Supported values are Critical, Error, Warning, and Healthy.  # noqa: E501

        :param health: The health of this PowerSupplyInfo.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def missing(self):
        """Gets the missing of this PowerSupplyInfo.  # noqa: E501

        Whether the power supply health status is critical. Supported values are false (not critical) and true (critical)  # noqa: E501

        :return: The missing of this PowerSupplyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this PowerSupplyInfo.

        Whether the power supply health status is critical. Supported values are false (not critical) and true (critical)  # noqa: E501

        :param missing: The missing of this PowerSupplyInfo.  # noqa: E501
        :type: bool
        """

        self._missing = missing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PowerSupplyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PowerSupplyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
