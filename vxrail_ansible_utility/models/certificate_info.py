# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status': 'str',
        'status_message': 'str',
        'issued_by': 'str',
        'signature_algorithm': 'str',
        'issued_time': 'str',
        'expiration_time': 'str',
        'cert': 'str',
        'filepath': 'str',
        'fingerprint': 'str'
    }

    attribute_map = {
        'name': 'name',
        'status': 'status',
        'status_message': 'status_message',
        'issued_by': 'issued_by',
        'signature_algorithm': 'signature_algorithm',
        'issued_time': 'issued_time',
        'expiration_time': 'expiration_time',
        'cert': 'cert',
        'filepath': 'filepath',
        'fingerprint': 'fingerprint'
    }

    def __init__(self, name=None, status=None, status_message=None, issued_by=None, signature_algorithm=None, issued_time=None, expiration_time=None, cert=None, filepath=None, fingerprint=None):  # noqa: E501
        """CertificateInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status = None
        self._status_message = None
        self._issued_by = None
        self._signature_algorithm = None
        self._issued_time = None
        self._expiration_time = None
        self._cert = None
        self._filepath = None
        self._fingerprint = None
        self.discriminator = None
        self.name = name
        self.status = status
        self.status_message = status_message
        self.issued_by = issued_by
        self.signature_algorithm = signature_algorithm
        self.issued_time = issued_time
        self.expiration_time = expiration_time
        self.cert = cert
        self.filepath = filepath
        self.fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this CertificateInfo.  # noqa: E501

        The name of the certificate.  # noqa: E501

        :return: The name of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateInfo.

        The name of the certificate.  # noqa: E501

        :param name: The name of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this CertificateInfo.  # noqa: E501

        The status of the certificate.  # noqa: E501

        :return: The status of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateInfo.

        The status of the certificate.  # noqa: E501

        :param status: The status of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["VALID", "INVALID", "EXPIRED", "EXPIRING_SOON"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this CertificateInfo.  # noqa: E501

        The status message of the certificate.  # noqa: E501

        :return: The status_message of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this CertificateInfo.

        The status message of the certificate.  # noqa: E501

        :param status_message: The status_message of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")  # noqa: E501

        self._status_message = status_message

    @property
    def issued_by(self):
        """Gets the issued_by of this CertificateInfo.  # noqa: E501

        Name of the issuer.  # noqa: E501

        :return: The issued_by of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this CertificateInfo.

        Name of the issuer.  # noqa: E501

        :param issued_by: The issued_by of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if issued_by is None:
            raise ValueError("Invalid value for `issued_by`, must not be `None`")  # noqa: E501

        self._issued_by = issued_by

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertificateInfo.  # noqa: E501

        The signature_algorithm  # noqa: E501

        :return: The signature_algorithm of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertificateInfo.

        The signature_algorithm  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if signature_algorithm is None:
            raise ValueError("Invalid value for `signature_algorithm`, must not be `None`")  # noqa: E501

        self._signature_algorithm = signature_algorithm

    @property
    def issued_time(self):
        """Gets the issued_time of this CertificateInfo.  # noqa: E501

        The issued time  # noqa: E501

        :return: The issued_time of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._issued_time

    @issued_time.setter
    def issued_time(self, issued_time):
        """Sets the issued_time of this CertificateInfo.

        The issued time  # noqa: E501

        :param issued_time: The issued_time of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if issued_time is None:
            raise ValueError("Invalid value for `issued_time`, must not be `None`")  # noqa: E501

        self._issued_time = issued_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this CertificateInfo.  # noqa: E501

        The expiration time  # noqa: E501

        :return: The expiration_time of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this CertificateInfo.

        The expiration time  # noqa: E501

        :param expiration_time: The expiration_time of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if expiration_time is None:
            raise ValueError("Invalid value for `expiration_time`, must not be `None`")  # noqa: E501

        self._expiration_time = expiration_time

    @property
    def cert(self):
        """Gets the cert of this CertificateInfo.  # noqa: E501

        Content of the certificate  # noqa: E501

        :return: The cert of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this CertificateInfo.

        Content of the certificate  # noqa: E501

        :param cert: The cert of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if cert is None:
            raise ValueError("Invalid value for `cert`, must not be `None`")  # noqa: E501

        self._cert = cert

    @property
    def filepath(self):
        """Gets the filepath of this CertificateInfo.  # noqa: E501

        The filepath of the certificate.  # noqa: E501

        :return: The filepath of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._filepath

    @filepath.setter
    def filepath(self, filepath):
        """Sets the filepath of this CertificateInfo.

        The filepath of the certificate.  # noqa: E501

        :param filepath: The filepath of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if filepath is None:
            raise ValueError("Invalid value for `filepath`, must not be `None`")  # noqa: E501

        self._filepath = filepath

    @property
    def fingerprint(self):
        """Gets the fingerprint of this CertificateInfo.  # noqa: E501

        The fingerprint of the certificate.  # noqa: E501

        :return: The fingerprint of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this CertificateInfo.

        The fingerprint of the certificate.  # noqa: E501

        :param fingerprint: The fingerprint of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")  # noqa: E501

        self._fingerprint = fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
