# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer3SegmentSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_label': 'str',
        'proxy_ip': 'str',
        'management_gateway': 'str',
        'management_netmask': 'str',
        'management_vlan': 'int',
        'vsan_gateway': 'str',
        'management_topology': 'str',
        'vsan_netmask': 'str',
        'vsan_vlan': 'int',
        'vsan_init_gateway': 'str',
        'vsan_topology': 'str',
        'vmotion_gateway': 'str',
        'vmotion_netmask': 'str',
        'vmotion_vlan': 'int',
        'vmotion_init_gateway': 'str',
        'vmotion_topology': 'str'
    }

    attribute_map = {
        'segment_label': 'segment_label',
        'proxy_ip': 'proxy_ip',
        'management_gateway': 'management_gateway',
        'management_netmask': 'management_netmask',
        'management_vlan': 'management_vlan',
        'vsan_gateway': 'vsan_gateway',
        'management_topology': 'management_topology',
        'vsan_netmask': 'vsan_netmask',
        'vsan_vlan': 'vsan_vlan',
        'vsan_init_gateway': 'vsan_init_gateway',
        'vsan_topology': 'vsan_topology',
        'vmotion_gateway': 'vmotion_gateway',
        'vmotion_netmask': 'vmotion_netmask',
        'vmotion_vlan': 'vmotion_vlan',
        'vmotion_init_gateway': 'vmotion_init_gateway',
        'vmotion_topology': 'vmotion_topology'
    }

    def __init__(self, segment_label=None, proxy_ip=None, management_gateway=None, management_netmask=None, management_vlan=None, vsan_gateway=None, management_topology=None, vsan_netmask=None, vsan_vlan=None, vsan_init_gateway=None, vsan_topology=None, vmotion_gateway=None, vmotion_netmask=None, vmotion_vlan=None, vmotion_init_gateway=None, vmotion_topology=None):  # noqa: E501
        """Layer3SegmentSpec - a model defined in Swagger"""  # noqa: E501
        self._segment_label = None
        self._proxy_ip = None
        self._management_gateway = None
        self._management_netmask = None
        self._management_vlan = None
        self._vsan_gateway = None
        self._management_topology = None
        self._vsan_netmask = None
        self._vsan_vlan = None
        self._vsan_init_gateway = None
        self._vsan_topology = None
        self._vmotion_gateway = None
        self._vmotion_netmask = None
        self._vmotion_vlan = None
        self._vmotion_init_gateway = None
        self._vmotion_topology = None
        self.discriminator = None
        self.segment_label = segment_label
        if proxy_ip is not None:
            self.proxy_ip = proxy_ip
        if management_gateway is not None:
            self.management_gateway = management_gateway
        if management_netmask is not None:
            self.management_netmask = management_netmask
        if management_vlan is not None:
            self.management_vlan = management_vlan
        if vsan_gateway is not None:
            self.vsan_gateway = vsan_gateway
        if management_topology is not None:
            self.management_topology = management_topology
        if vsan_netmask is not None:
            self.vsan_netmask = vsan_netmask
        if vsan_vlan is not None:
            self.vsan_vlan = vsan_vlan
        if vsan_init_gateway is not None:
            self.vsan_init_gateway = vsan_init_gateway
        if vsan_topology is not None:
            self.vsan_topology = vsan_topology
        if vmotion_gateway is not None:
            self.vmotion_gateway = vmotion_gateway
        if vmotion_netmask is not None:
            self.vmotion_netmask = vmotion_netmask
        if vmotion_vlan is not None:
            self.vmotion_vlan = vmotion_vlan
        if vmotion_init_gateway is not None:
            self.vmotion_init_gateway = vmotion_init_gateway
        if vmotion_topology is not None:
            self.vmotion_topology = vmotion_topology

    @property
    def segment_label(self):
        """Gets the segment_label of this Layer3SegmentSpec.  # noqa: E501

        The name of the segment  # noqa: E501

        :return: The segment_label of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._segment_label

    @segment_label.setter
    def segment_label(self, segment_label):
        """Sets the segment_label of this Layer3SegmentSpec.

        The name of the segment  # noqa: E501

        :param segment_label: The segment_label of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """
        if segment_label is None:
            raise ValueError("Invalid value for `segment_label`, must not be `None`")  # noqa: E501

        self._segment_label = segment_label

    @property
    def proxy_ip(self):
        """Gets the proxy_ip of this Layer3SegmentSpec.  # noqa: E501

        The IP address of the node which provides proxy service  # noqa: E501

        :return: The proxy_ip of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._proxy_ip

    @proxy_ip.setter
    def proxy_ip(self, proxy_ip):
        """Sets the proxy_ip of this Layer3SegmentSpec.

        The IP address of the node which provides proxy service  # noqa: E501

        :param proxy_ip: The proxy_ip of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._proxy_ip = proxy_ip

    @property
    def management_gateway(self):
        """Gets the management_gateway of this Layer3SegmentSpec.  # noqa: E501

        The IPv4 gateway address of the management traffic for the current segment  # noqa: E501

        :return: The management_gateway of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._management_gateway

    @management_gateway.setter
    def management_gateway(self, management_gateway):
        """Sets the management_gateway of this Layer3SegmentSpec.

        The IPv4 gateway address of the management traffic for the current segment  # noqa: E501

        :param management_gateway: The management_gateway of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._management_gateway = management_gateway

    @property
    def management_netmask(self):
        """Gets the management_netmask of this Layer3SegmentSpec.  # noqa: E501

        The subnet mask of the management traffic for the current segment  # noqa: E501

        :return: The management_netmask of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._management_netmask

    @management_netmask.setter
    def management_netmask(self, management_netmask):
        """Sets the management_netmask of this Layer3SegmentSpec.

        The subnet mask of the management traffic for the current segment  # noqa: E501

        :param management_netmask: The management_netmask of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._management_netmask = management_netmask

    @property
    def management_vlan(self):
        """Gets the management_vlan of this Layer3SegmentSpec.  # noqa: E501

        The VLAN ID of the management traffic for the current segment  # noqa: E501

        :return: The management_vlan of this Layer3SegmentSpec.  # noqa: E501
        :rtype: int
        """
        return self._management_vlan

    @management_vlan.setter
    def management_vlan(self, management_vlan):
        """Sets the management_vlan of this Layer3SegmentSpec.

        The VLAN ID of the management traffic for the current segment  # noqa: E501

        :param management_vlan: The management_vlan of this Layer3SegmentSpec.  # noqa: E501
        :type: int
        """

        self._management_vlan = management_vlan

    @property
    def vsan_gateway(self):
        """Gets the vsan_gateway of this Layer3SegmentSpec.  # noqa: E501

        The IPv4 gateway address of the vSAN traffic for the current segment  # noqa: E501

        :return: The vsan_gateway of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vsan_gateway

    @vsan_gateway.setter
    def vsan_gateway(self, vsan_gateway):
        """Sets the vsan_gateway of this Layer3SegmentSpec.

        The IPv4 gateway address of the vSAN traffic for the current segment  # noqa: E501

        :param vsan_gateway: The vsan_gateway of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vsan_gateway = vsan_gateway

    @property
    def management_topology(self):
        """Gets the management_topology of this Layer3SegmentSpec.  # noqa: E501

        The topology type for management traffic for the VxRail cluster  # noqa: E501

        :return: The management_topology of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._management_topology

    @management_topology.setter
    def management_topology(self, management_topology):
        """Sets the management_topology of this Layer3SegmentSpec.

        The topology type for management traffic for the VxRail cluster  # noqa: E501

        :param management_topology: The management_topology of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIFF_SUBNET", "SAME_SUBNET"]  # noqa: E501
        if management_topology not in allowed_values:
            raise ValueError(
                "Invalid value for `management_topology` ({0}), must be one of {1}"  # noqa: E501
                .format(management_topology, allowed_values)
            )

        self._management_topology = management_topology

    @property
    def vsan_netmask(self):
        """Gets the vsan_netmask of this Layer3SegmentSpec.  # noqa: E501

        The subnet mask for the vSAN traffic for the current segment  # noqa: E501

        :return: The vsan_netmask of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vsan_netmask

    @vsan_netmask.setter
    def vsan_netmask(self, vsan_netmask):
        """Sets the vsan_netmask of this Layer3SegmentSpec.

        The subnet mask for the vSAN traffic for the current segment  # noqa: E501

        :param vsan_netmask: The vsan_netmask of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vsan_netmask = vsan_netmask

    @property
    def vsan_vlan(self):
        """Gets the vsan_vlan of this Layer3SegmentSpec.  # noqa: E501

        The VLAN ID for the vSAN traffic for the current segment  # noqa: E501

        :return: The vsan_vlan of this Layer3SegmentSpec.  # noqa: E501
        :rtype: int
        """
        return self._vsan_vlan

    @vsan_vlan.setter
    def vsan_vlan(self, vsan_vlan):
        """Sets the vsan_vlan of this Layer3SegmentSpec.

        The VLAN ID for the vSAN traffic for the current segment  # noqa: E501

        :param vsan_vlan: The vsan_vlan of this Layer3SegmentSpec.  # noqa: E501
        :type: int
        """

        self._vsan_vlan = vsan_vlan

    @property
    def vsan_init_gateway(self):
        """Gets the vsan_init_gateway of this Layer3SegmentSpec.  # noqa: E501

        The IPv4 gateway address of the vSAN traffic for the initial segment. **Note:** When vsan_topology is set as DIFF_SUBNET, this value must be provided during the first L3 segment creation.  # noqa: E501

        :return: The vsan_init_gateway of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vsan_init_gateway

    @vsan_init_gateway.setter
    def vsan_init_gateway(self, vsan_init_gateway):
        """Sets the vsan_init_gateway of this Layer3SegmentSpec.

        The IPv4 gateway address of the vSAN traffic for the initial segment. **Note:** When vsan_topology is set as DIFF_SUBNET, this value must be provided during the first L3 segment creation.  # noqa: E501

        :param vsan_init_gateway: The vsan_init_gateway of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vsan_init_gateway = vsan_init_gateway

    @property
    def vsan_topology(self):
        """Gets the vsan_topology of this Layer3SegmentSpec.  # noqa: E501

        The topology type for the vSAN traffic for the VxRail cluster  # noqa: E501

        :return: The vsan_topology of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vsan_topology

    @vsan_topology.setter
    def vsan_topology(self, vsan_topology):
        """Sets the vsan_topology of this Layer3SegmentSpec.

        The topology type for the vSAN traffic for the VxRail cluster  # noqa: E501

        :param vsan_topology: The vsan_topology of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIFF_SUBNET", "SAME_SUBNET"]  # noqa: E501
        if vsan_topology not in allowed_values:
            raise ValueError(
                "Invalid value for `vsan_topology` ({0}), must be one of {1}"  # noqa: E501
                .format(vsan_topology, allowed_values)
            )

        self._vsan_topology = vsan_topology

    @property
    def vmotion_gateway(self):
        """Gets the vmotion_gateway of this Layer3SegmentSpec.  # noqa: E501

        The IPv4 gateway address of the vMotion traffic of the current segment  # noqa: E501

        :return: The vmotion_gateway of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vmotion_gateway

    @vmotion_gateway.setter
    def vmotion_gateway(self, vmotion_gateway):
        """Sets the vmotion_gateway of this Layer3SegmentSpec.

        The IPv4 gateway address of the vMotion traffic of the current segment  # noqa: E501

        :param vmotion_gateway: The vmotion_gateway of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vmotion_gateway = vmotion_gateway

    @property
    def vmotion_netmask(self):
        """Gets the vmotion_netmask of this Layer3SegmentSpec.  # noqa: E501

        The subnet mask for the vMotion traffic of the current segment  # noqa: E501

        :return: The vmotion_netmask of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vmotion_netmask

    @vmotion_netmask.setter
    def vmotion_netmask(self, vmotion_netmask):
        """Sets the vmotion_netmask of this Layer3SegmentSpec.

        The subnet mask for the vMotion traffic of the current segment  # noqa: E501

        :param vmotion_netmask: The vmotion_netmask of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vmotion_netmask = vmotion_netmask

    @property
    def vmotion_vlan(self):
        """Gets the vmotion_vlan of this Layer3SegmentSpec.  # noqa: E501

        The VLAN ID for the vMotion traffic of the current segment  # noqa: E501

        :return: The vmotion_vlan of this Layer3SegmentSpec.  # noqa: E501
        :rtype: int
        """
        return self._vmotion_vlan

    @vmotion_vlan.setter
    def vmotion_vlan(self, vmotion_vlan):
        """Sets the vmotion_vlan of this Layer3SegmentSpec.

        The VLAN ID for the vMotion traffic of the current segment  # noqa: E501

        :param vmotion_vlan: The vmotion_vlan of this Layer3SegmentSpec.  # noqa: E501
        :type: int
        """

        self._vmotion_vlan = vmotion_vlan

    @property
    def vmotion_init_gateway(self):
        """Gets the vmotion_init_gateway of this Layer3SegmentSpec.  # noqa: E501

        The IPv4 gateway address of the vMotion traffic for the initial segment. **Note:** When vmotion_topology is set as DIFF_SUBNET, this value must be provided during the first L3 segment creation.  # noqa: E501

        :return: The vmotion_init_gateway of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vmotion_init_gateway

    @vmotion_init_gateway.setter
    def vmotion_init_gateway(self, vmotion_init_gateway):
        """Sets the vmotion_init_gateway of this Layer3SegmentSpec.

        The IPv4 gateway address of the vMotion traffic for the initial segment. **Note:** When vmotion_topology is set as DIFF_SUBNET, this value must be provided during the first L3 segment creation.  # noqa: E501

        :param vmotion_init_gateway: The vmotion_init_gateway of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """

        self._vmotion_init_gateway = vmotion_init_gateway

    @property
    def vmotion_topology(self):
        """Gets the vmotion_topology of this Layer3SegmentSpec.  # noqa: E501

        The topology type for the vMotion traffic for the VxRail cluster  # noqa: E501

        :return: The vmotion_topology of this Layer3SegmentSpec.  # noqa: E501
        :rtype: str
        """
        return self._vmotion_topology

    @vmotion_topology.setter
    def vmotion_topology(self, vmotion_topology):
        """Sets the vmotion_topology of this Layer3SegmentSpec.

        The topology type for the vMotion traffic for the VxRail cluster  # noqa: E501

        :param vmotion_topology: The vmotion_topology of this Layer3SegmentSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIFF_SUBNET", "SAME_SUBNET"]  # noqa: E501
        if vmotion_topology not in allowed_values:
            raise ValueError(
                "Invalid value for `vmotion_topology` ({0}), must be one of {1}"  # noqa: E501
                .format(vmotion_topology, allowed_values)
            )

        self._vmotion_topology = vmotion_topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer3SegmentSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer3SegmentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
