# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.350
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostFolderLCMSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'host_folder_id': 'str',
        'target_version': 'str',
        'control': 'HostFolderLCMControlSpec'
    }

    attribute_map = {
        'action': 'action',
        'host_folder_id': 'host_folder_id',
        'target_version': 'target_version',
        'control': 'control'
    }

    def __init__(self, action=None, host_folder_id=None, target_version=None, control=None):  # noqa: E501
        """HostFolderLCMSpec - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._host_folder_id = None
        self._target_version = None
        self._control = None
        self.discriminator = None
        self.action = action
        self.host_folder_id = host_folder_id
        self.target_version = target_version
        if control is not None:
            self.control = control

    @property
    def action(self):
        """Gets the action of this HostFolderLCMSpec.  # noqa: E501

        STAGE transfers the upgrade bundle to the nodes but will not initiate the upgrade procedure. UPGRADE initiates the upgrade procedure.  # noqa: E501

        :return: The action of this HostFolderLCMSpec.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this HostFolderLCMSpec.

        STAGE transfers the upgrade bundle to the nodes but will not initiate the upgrade procedure. UPGRADE initiates the upgrade procedure.  # noqa: E501

        :param action: The action of this HostFolderLCMSpec.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["UPGRADE", "STAGE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def host_folder_id(self):
        """Gets the host_folder_id of this HostFolderLCMSpec.  # noqa: E501

        Host folder id  # noqa: E501

        :return: The host_folder_id of this HostFolderLCMSpec.  # noqa: E501
        :rtype: str
        """
        return self._host_folder_id

    @host_folder_id.setter
    def host_folder_id(self, host_folder_id):
        """Sets the host_folder_id of this HostFolderLCMSpec.

        Host folder id  # noqa: E501

        :param host_folder_id: The host_folder_id of this HostFolderLCMSpec.  # noqa: E501
        :type: str
        """
        if host_folder_id is None:
            raise ValueError("Invalid value for `host_folder_id`, must not be `None`")  # noqa: E501

        self._host_folder_id = host_folder_id

    @property
    def target_version(self):
        """Gets the target_version of this HostFolderLCMSpec.  # noqa: E501

        The target VxRail system version  # noqa: E501

        :return: The target_version of this HostFolderLCMSpec.  # noqa: E501
        :rtype: str
        """
        return self._target_version

    @target_version.setter
    def target_version(self, target_version):
        """Sets the target_version of this HostFolderLCMSpec.

        The target VxRail system version  # noqa: E501

        :param target_version: The target_version of this HostFolderLCMSpec.  # noqa: E501
        :type: str
        """
        if target_version is None:
            raise ValueError("Invalid value for `target_version`, must not be `None`")  # noqa: E501

        self._target_version = target_version

    @property
    def control(self):
        """Gets the control of this HostFolderLCMSpec.  # noqa: E501


        :return: The control of this HostFolderLCMSpec.  # noqa: E501
        :rtype: HostFolderLCMControlSpec
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this HostFolderLCMSpec.


        :param control: The control of this HostFolderLCMSpec.  # noqa: E501
        :type: HostFolderLCMControlSpec
        """

        self._control = control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostFolderLCMSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostFolderLCMSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
