# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EncryptionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security_status': 'SecurityStatus',
        'encryption_mode': 'EncryptionMode'
    }

    attribute_map = {
        'security_status': 'security_status',
        'encryption_mode': 'encryption_mode'
    }

    def __init__(self, security_status=None, encryption_mode=None):  # noqa: E501
        """EncryptionStatus - a model defined in Swagger"""  # noqa: E501
        self._security_status = None
        self._encryption_mode = None
        self.discriminator = None
        if security_status is not None:
            self.security_status = security_status
        if encryption_mode is not None:
            self.encryption_mode = encryption_mode

    @property
    def security_status(self):
        """Gets the security_status of this EncryptionStatus.  # noqa: E501


        :return: The security_status of this EncryptionStatus.  # noqa: E501
        :rtype: SecurityStatus
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """Sets the security_status of this EncryptionStatus.


        :param security_status: The security_status of this EncryptionStatus.  # noqa: E501
        :type: SecurityStatus
        """

        self._security_status = security_status

    @property
    def encryption_mode(self):
        """Gets the encryption_mode of this EncryptionStatus.  # noqa: E501


        :return: The encryption_mode of this EncryptionStatus.  # noqa: E501
        :rtype: EncryptionMode
        """
        return self._encryption_mode

    @encryption_mode.setter
    def encryption_mode(self, encryption_mode):
        """Sets the encryption_mode of this EncryptionStatus.


        :param encryption_mode: The encryption_mode of this EncryptionStatus.  # noqa: E501
        :type: EncryptionMode
        """

        self._encryption_mode = encryption_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EncryptionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EncryptionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
