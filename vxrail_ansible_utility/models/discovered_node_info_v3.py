# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DiscoveredNodeInfoV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'DiscoveredNodeIdInfo',
        'esxi_version': 'str',
        'vxm_system_version': 'str',
        'evo_uuid': 'str',
        'primary_ip': 'str',
        'fallback_ip': 'str',
        'idrac_ip': 'str',
        'prerecoded_ip': 'str',
        'ip': 'str',
        'asset_tag': 'str',
        'serial_number': 'str',
        'primary': 'bool',
        'cluster_affinity': 'str',
        'rsa_public_key': 'str',
        'ssl_thumbprint': 'str',
        'ssh_thumbprint': 'str',
        'uuid': 'DiscoveredNodeUuidInfo',
        'hardware_profile': 'DiscoveredNodeHardwareProfileInfo',
        'disk_group_config': 'DiscoveredNodeDiskGroupConfigInfo',
        'discovered_date': 'int',
        'configuration_state': 'str',
        'model': 'str',
        'ip_set': 'object',
        'node_version_info': 'DiscoveredNodeVersionInfo',
        'violations': 'list[str]',
        'hw_filtering_skipped': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'esxi_version': 'esxi_version',
        'vxm_system_version': 'vxm_system_version',
        'evo_uuid': 'evo_uuid',
        'primary_ip': 'primary_ip',
        'fallback_ip': 'fallback_ip',
        'idrac_ip': 'idrac_ip',
        'prerecoded_ip': 'prerecoded_ip',
        'ip': 'ip',
        'asset_tag': 'asset_tag',
        'serial_number': 'serial_number',
        'primary': 'primary',
        'cluster_affinity': 'cluster_affinity',
        'rsa_public_key': 'rsa_public_key',
        'ssl_thumbprint': 'ssl_thumbprint',
        'ssh_thumbprint': 'ssh_thumbprint',
        'uuid': 'uuid',
        'hardware_profile': 'hardware_profile',
        'disk_group_config': 'disk_group_config',
        'discovered_date': 'discovered_date',
        'configuration_state': 'configuration_state',
        'model': 'model',
        'ip_set': 'ip_set',
        'node_version_info': 'node_version_info',
        'violations': 'violations',
        'hw_filtering_skipped': 'hw_filtering_skipped'
    }

    def __init__(self, id=None, esxi_version=None, vxm_system_version=None, evo_uuid=None, primary_ip=None, fallback_ip=None, idrac_ip=None, prerecoded_ip=None, ip=None, asset_tag=None, serial_number=None, primary=None, cluster_affinity=None, rsa_public_key=None, ssl_thumbprint=None, ssh_thumbprint=None, uuid=None, hardware_profile=None, disk_group_config=None, discovered_date=None, configuration_state=None, model=None, ip_set=None, node_version_info=None, violations=None, hw_filtering_skipped=None):  # noqa: E501
        """DiscoveredNodeInfoV3 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._esxi_version = None
        self._vxm_system_version = None
        self._evo_uuid = None
        self._primary_ip = None
        self._fallback_ip = None
        self._idrac_ip = None
        self._prerecoded_ip = None
        self._ip = None
        self._asset_tag = None
        self._serial_number = None
        self._primary = None
        self._cluster_affinity = None
        self._rsa_public_key = None
        self._ssl_thumbprint = None
        self._ssh_thumbprint = None
        self._uuid = None
        self._hardware_profile = None
        self._disk_group_config = None
        self._discovered_date = None
        self._configuration_state = None
        self._model = None
        self._ip_set = None
        self._node_version_info = None
        self._violations = None
        self._hw_filtering_skipped = None
        self.discriminator = None
        self.id = id
        self.esxi_version = esxi_version
        if vxm_system_version is not None:
            self.vxm_system_version = vxm_system_version
        if evo_uuid is not None:
            self.evo_uuid = evo_uuid
        if primary_ip is not None:
            self.primary_ip = primary_ip
        if fallback_ip is not None:
            self.fallback_ip = fallback_ip
        self.idrac_ip = idrac_ip
        if prerecoded_ip is not None:
            self.prerecoded_ip = prerecoded_ip
        if ip is not None:
            self.ip = ip
        self.asset_tag = asset_tag
        self.serial_number = serial_number
        self.primary = primary
        if cluster_affinity is not None:
            self.cluster_affinity = cluster_affinity
        if rsa_public_key is not None:
            self.rsa_public_key = rsa_public_key
        self.ssl_thumbprint = ssl_thumbprint
        self.ssh_thumbprint = ssh_thumbprint
        if uuid is not None:
            self.uuid = uuid
        self.hardware_profile = hardware_profile
        if disk_group_config is not None:
            self.disk_group_config = disk_group_config
        if discovered_date is not None:
            self.discovered_date = discovered_date
        if configuration_state is not None:
            self.configuration_state = configuration_state
        self.model = model
        if ip_set is not None:
            self.ip_set = ip_set
        if node_version_info is not None:
            self.node_version_info = node_version_info
        if violations is not None:
            self.violations = violations
        if hw_filtering_skipped is not None:
            self.hw_filtering_skipped = hw_filtering_skipped

    @property
    def id(self):
        """Gets the id of this DiscoveredNodeInfoV3.  # noqa: E501


        :return: The id of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: DiscoveredNodeIdInfo
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveredNodeInfoV3.


        :param id: The id of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: DiscoveredNodeIdInfo
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def esxi_version(self):
        """Gets the esxi_version of this DiscoveredNodeInfoV3.  # noqa: E501

        The ESXi version of the node  # noqa: E501

        :return: The esxi_version of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._esxi_version

    @esxi_version.setter
    def esxi_version(self, esxi_version):
        """Sets the esxi_version of this DiscoveredNodeInfoV3.

        The ESXi version of the node  # noqa: E501

        :param esxi_version: The esxi_version of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if esxi_version is None:
            raise ValueError("Invalid value for `esxi_version`, must not be `None`")  # noqa: E501

        self._esxi_version = esxi_version

    @property
    def vxm_system_version(self):
        """Gets the vxm_system_version of this DiscoveredNodeInfoV3.  # noqa: E501

        The VxRail system version  # noqa: E501

        :return: The vxm_system_version of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._vxm_system_version

    @vxm_system_version.setter
    def vxm_system_version(self, vxm_system_version):
        """Sets the vxm_system_version of this DiscoveredNodeInfoV3.

        The VxRail system version  # noqa: E501

        :param vxm_system_version: The vxm_system_version of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._vxm_system_version = vxm_system_version

    @property
    def evo_uuid(self):
        """Gets the evo_uuid of this DiscoveredNodeInfoV3.  # noqa: E501

        UUID of VxRail Manager VM  # noqa: E501

        :return: The evo_uuid of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._evo_uuid

    @evo_uuid.setter
    def evo_uuid(self, evo_uuid):
        """Sets the evo_uuid of this DiscoveredNodeInfoV3.

        UUID of VxRail Manager VM  # noqa: E501

        :param evo_uuid: The evo_uuid of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._evo_uuid = evo_uuid

    @property
    def primary_ip(self):
        """Gets the primary_ip of this DiscoveredNodeInfoV3.  # noqa: E501

        The IPv6 address of the first virtual NIC (vmk0) of the node (with a \":%eth1\" suffix)  # noqa: E501

        :return: The primary_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._primary_ip

    @primary_ip.setter
    def primary_ip(self, primary_ip):
        """Sets the primary_ip of this DiscoveredNodeInfoV3.

        The IPv6 address of the first virtual NIC (vmk0) of the node (with a \":%eth1\" suffix)  # noqa: E501

        :param primary_ip: The primary_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._primary_ip = primary_ip

    @property
    def fallback_ip(self):
        """Gets the fallback_ip of this DiscoveredNodeInfoV3.  # noqa: E501

        Null. (For internal use only)  # noqa: E501

        :return: The fallback_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._fallback_ip

    @fallback_ip.setter
    def fallback_ip(self, fallback_ip):
        """Sets the fallback_ip of this DiscoveredNodeInfoV3.

        Null. (For internal use only)  # noqa: E501

        :param fallback_ip: The fallback_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._fallback_ip = fallback_ip

    @property
    def idrac_ip(self):
        """Gets the idrac_ip of this DiscoveredNodeInfoV3.  # noqa: E501

        The iDRAC IP address of the node  # noqa: E501

        :return: The idrac_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._idrac_ip

    @idrac_ip.setter
    def idrac_ip(self, idrac_ip):
        """Sets the idrac_ip of this DiscoveredNodeInfoV3.

        The iDRAC IP address of the node  # noqa: E501

        :param idrac_ip: The idrac_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if idrac_ip is None:
            raise ValueError("Invalid value for `idrac_ip`, must not be `None`")  # noqa: E501

        self._idrac_ip = idrac_ip

    @property
    def prerecoded_ip(self):
        """Gets the prerecoded_ip of this DiscoveredNodeInfoV3.  # noqa: E501

        Null. (For internal use only)  # noqa: E501

        :return: The prerecoded_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._prerecoded_ip

    @prerecoded_ip.setter
    def prerecoded_ip(self, prerecoded_ip):
        """Sets the prerecoded_ip of this DiscoveredNodeInfoV3.

        Null. (For internal use only)  # noqa: E501

        :param prerecoded_ip: The prerecoded_ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._prerecoded_ip = prerecoded_ip

    @property
    def ip(self):
        """Gets the ip of this DiscoveredNodeInfoV3.  # noqa: E501

        The IPv4 address of the node  # noqa: E501

        :return: The ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DiscoveredNodeInfoV3.

        The IPv4 address of the node  # noqa: E501

        :param ip: The ip of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def asset_tag(self):
        """Gets the asset_tag of this DiscoveredNodeInfoV3.  # noqa: E501

        The asset tag of the node  # noqa: E501

        :return: The asset_tag of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this DiscoveredNodeInfoV3.

        The asset tag of the node  # noqa: E501

        :param asset_tag: The asset_tag of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if asset_tag is None:
            raise ValueError("Invalid value for `asset_tag`, must not be `None`")  # noqa: E501

        self._asset_tag = asset_tag

    @property
    def serial_number(self):
        """Gets the serial_number of this DiscoveredNodeInfoV3.  # noqa: E501

        The serial number of the node  # noqa: E501

        :return: The serial_number of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DiscoveredNodeInfoV3.

        The serial number of the node  # noqa: E501

        :param serial_number: The serial_number of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def primary(self):
        """Gets the primary of this DiscoveredNodeInfoV3.  # noqa: E501

        Whether the node is the primary node  # noqa: E501

        :return: The primary of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this DiscoveredNodeInfoV3.

        Whether the node is the primary node  # noqa: E501

        :param primary: The primary of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: bool
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")  # noqa: E501

        self._primary = primary

    @property
    def cluster_affinity(self):
        """Gets the cluster_affinity of this DiscoveredNodeInfoV3.  # noqa: E501

        Null. (For internal use only)  # noqa: E501

        :return: The cluster_affinity of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._cluster_affinity

    @cluster_affinity.setter
    def cluster_affinity(self, cluster_affinity):
        """Sets the cluster_affinity of this DiscoveredNodeInfoV3.

        Null. (For internal use only)  # noqa: E501

        :param cluster_affinity: The cluster_affinity of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "MINE", "OTHER"]  # noqa: E501
        if cluster_affinity not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_affinity` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_affinity, allowed_values)
            )

        self._cluster_affinity = cluster_affinity

    @property
    def rsa_public_key(self):
        """Gets the rsa_public_key of this DiscoveredNodeInfoV3.  # noqa: E501

        RSA public key of the node  # noqa: E501

        :return: The rsa_public_key of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._rsa_public_key

    @rsa_public_key.setter
    def rsa_public_key(self, rsa_public_key):
        """Sets the rsa_public_key of this DiscoveredNodeInfoV3.

        RSA public key of the node  # noqa: E501

        :param rsa_public_key: The rsa_public_key of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """

        self._rsa_public_key = rsa_public_key

    @property
    def ssl_thumbprint(self):
        """Gets the ssl_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501

        SSL thumbprint of the node  # noqa: E501

        :return: The ssl_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._ssl_thumbprint

    @ssl_thumbprint.setter
    def ssl_thumbprint(self, ssl_thumbprint):
        """Sets the ssl_thumbprint of this DiscoveredNodeInfoV3.

        SSL thumbprint of the node  # noqa: E501

        :param ssl_thumbprint: The ssl_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if ssl_thumbprint is None:
            raise ValueError("Invalid value for `ssl_thumbprint`, must not be `None`")  # noqa: E501

        self._ssl_thumbprint = ssl_thumbprint

    @property
    def ssh_thumbprint(self):
        """Gets the ssh_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501

        SSH thumbprint of the node  # noqa: E501

        :return: The ssh_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._ssh_thumbprint

    @ssh_thumbprint.setter
    def ssh_thumbprint(self, ssh_thumbprint):
        """Sets the ssh_thumbprint of this DiscoveredNodeInfoV3.

        SSH thumbprint of the node  # noqa: E501

        :param ssh_thumbprint: The ssh_thumbprint of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if ssh_thumbprint is None:
            raise ValueError("Invalid value for `ssh_thumbprint`, must not be `None`")  # noqa: E501

        self._ssh_thumbprint = ssh_thumbprint

    @property
    def uuid(self):
        """Gets the uuid of this DiscoveredNodeInfoV3.  # noqa: E501


        :return: The uuid of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: DiscoveredNodeUuidInfo
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DiscoveredNodeInfoV3.


        :param uuid: The uuid of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: DiscoveredNodeUuidInfo
        """

        self._uuid = uuid

    @property
    def hardware_profile(self):
        """Gets the hardware_profile of this DiscoveredNodeInfoV3.  # noqa: E501


        :return: The hardware_profile of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: DiscoveredNodeHardwareProfileInfo
        """
        return self._hardware_profile

    @hardware_profile.setter
    def hardware_profile(self, hardware_profile):
        """Sets the hardware_profile of this DiscoveredNodeInfoV3.


        :param hardware_profile: The hardware_profile of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: DiscoveredNodeHardwareProfileInfo
        """
        if hardware_profile is None:
            raise ValueError("Invalid value for `hardware_profile`, must not be `None`")  # noqa: E501

        self._hardware_profile = hardware_profile

    @property
    def disk_group_config(self):
        """Gets the disk_group_config of this DiscoveredNodeInfoV3.  # noqa: E501


        :return: The disk_group_config of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: DiscoveredNodeDiskGroupConfigInfo
        """
        return self._disk_group_config

    @disk_group_config.setter
    def disk_group_config(self, disk_group_config):
        """Sets the disk_group_config of this DiscoveredNodeInfoV3.


        :param disk_group_config: The disk_group_config of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: DiscoveredNodeDiskGroupConfigInfo
        """

        self._disk_group_config = disk_group_config

    @property
    def discovered_date(self):
        """Gets the discovered_date of this DiscoveredNodeInfoV3.  # noqa: E501

        Discovered date of the node  # noqa: E501

        :return: The discovered_date of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: int
        """
        return self._discovered_date

    @discovered_date.setter
    def discovered_date(self, discovered_date):
        """Sets the discovered_date of this DiscoveredNodeInfoV3.

        Discovered date of the node  # noqa: E501

        :param discovered_date: The discovered_date of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: int
        """

        self._discovered_date = discovered_date

    @property
    def configuration_state(self):
        """Gets the configuration_state of this DiscoveredNodeInfoV3.  # noqa: E501

        Configuration state of the node  # noqa: E501

        :return: The configuration_state of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._configuration_state

    @configuration_state.setter
    def configuration_state(self, configuration_state):
        """Sets the configuration_state of this DiscoveredNodeInfoV3.

        Configuration state of the node  # noqa: E501

        :param configuration_state: The configuration_state of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNCONFIGURED", "CONFIGURING", "CONFIGURED"]  # noqa: E501
        if configuration_state not in allowed_values:
            raise ValueError(
                "Invalid value for `configuration_state` ({0}), must be one of {1}"  # noqa: E501
                .format(configuration_state, allowed_values)
            )

        self._configuration_state = configuration_state

    @property
    def model(self):
        """Gets the model of this DiscoveredNodeInfoV3.  # noqa: E501

        Platform model of the node  # noqa: E501

        :return: The model of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DiscoveredNodeInfoV3.

        Platform model of the node  # noqa: E501

        :param model: The model of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def ip_set(self):
        """Gets the ip_set of this DiscoveredNodeInfoV3.  # noqa: E501

        Null. (For internal use only)  # noqa: E501

        :return: The ip_set of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: object
        """
        return self._ip_set

    @ip_set.setter
    def ip_set(self, ip_set):
        """Sets the ip_set of this DiscoveredNodeInfoV3.

        Null. (For internal use only)  # noqa: E501

        :param ip_set: The ip_set of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: object
        """

        self._ip_set = ip_set

    @property
    def node_version_info(self):
        """Gets the node_version_info of this DiscoveredNodeInfoV3.  # noqa: E501


        :return: The node_version_info of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: DiscoveredNodeVersionInfo
        """
        return self._node_version_info

    @node_version_info.setter
    def node_version_info(self, node_version_info):
        """Sets the node_version_info of this DiscoveredNodeInfoV3.


        :param node_version_info: The node_version_info of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: DiscoveredNodeVersionInfo
        """

        self._node_version_info = node_version_info

    @property
    def violations(self):
        """Gets the violations of this DiscoveredNodeInfoV3.  # noqa: E501

        Messages about hardware profile violations  # noqa: E501

        :return: The violations of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this DiscoveredNodeInfoV3.

        Messages about hardware profile violations  # noqa: E501

        :param violations: The violations of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: list[str]
        """

        self._violations = violations

    @property
    def hw_filtering_skipped(self):
        """Gets the hw_filtering_skipped of this DiscoveredNodeInfoV3.  # noqa: E501

        For internal use only.  # noqa: E501

        :return: The hw_filtering_skipped of this DiscoveredNodeInfoV3.  # noqa: E501
        :rtype: bool
        """
        return self._hw_filtering_skipped

    @hw_filtering_skipped.setter
    def hw_filtering_skipped(self, hw_filtering_skipped):
        """Sets the hw_filtering_skipped of this DiscoveredNodeInfoV3.

        For internal use only.  # noqa: E501

        :param hw_filtering_skipped: The hw_filtering_skipped of this DiscoveredNodeInfoV3.  # noqa: E501
        :type: bool
        """

        self._hw_filtering_skipped = hw_filtering_skipped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredNodeInfoV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredNodeInfoV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
