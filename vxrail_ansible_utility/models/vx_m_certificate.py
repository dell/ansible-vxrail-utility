# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VxMCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert': 'str',
        'primary_key': 'str',
        'root_cert_chain': 'str',
        'password': 'str'
    }

    attribute_map = {
        'cert': 'cert',
        'primary_key': 'primary_key',
        'root_cert_chain': 'root_cert_chain',
        'password': 'password'
    }

    def __init__(self, cert=None, primary_key=None, root_cert_chain=None, password=None):  # noqa: E501
        """VxMCertificate - a model defined in Swagger"""  # noqa: E501
        self._cert = None
        self._primary_key = None
        self._root_cert_chain = None
        self._password = None
        self.discriminator = None
        self.cert = cert
        self.primary_key = primary_key
        self.root_cert_chain = root_cert_chain
        self.password = password

    @property
    def cert(self):
        """Gets the cert of this VxMCertificate.  # noqa: E501

        The content of the new certificate in PEM format.  # noqa: E501

        :return: The cert of this VxMCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this VxMCertificate.

        The content of the new certificate in PEM format.  # noqa: E501

        :param cert: The cert of this VxMCertificate.  # noqa: E501
        :type: str
        """
        if cert is None:
            raise ValueError("Invalid value for `cert`, must not be `None`")  # noqa: E501

        self._cert = cert

    @property
    def primary_key(self):
        """Gets the primary_key of this VxMCertificate.  # noqa: E501

        The contents of the private key in PEM format. Only an RSA private key is allowed.  # noqa: E501

        :return: The primary_key of this VxMCertificate.  # noqa: E501
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this VxMCertificate.

        The contents of the private key in PEM format. Only an RSA private key is allowed.  # noqa: E501

        :param primary_key: The primary_key of this VxMCertificate.  # noqa: E501
        :type: str
        """
        if primary_key is None:
            raise ValueError("Invalid value for `primary_key`, must not be `None`")  # noqa: E501

        self._primary_key = primary_key

    @property
    def root_cert_chain(self):
        """Gets the root_cert_chain of this VxMCertificate.  # noqa: E501

        The contents of the certificate chain in PEM format. The root CA certificate comes first followed by the intermediate CA certificates if any.  # noqa: E501

        :return: The root_cert_chain of this VxMCertificate.  # noqa: E501
        :rtype: str
        """
        return self._root_cert_chain

    @root_cert_chain.setter
    def root_cert_chain(self, root_cert_chain):
        """Sets the root_cert_chain of this VxMCertificate.

        The contents of the certificate chain in PEM format. The root CA certificate comes first followed by the intermediate CA certificates if any.  # noqa: E501

        :param root_cert_chain: The root_cert_chain of this VxMCertificate.  # noqa: E501
        :type: str
        """
        if root_cert_chain is None:
            raise ValueError("Invalid value for `root_cert_chain`, must not be `None`")  # noqa: E501

        self._root_cert_chain = root_cert_chain

    @property
    def password(self):
        """Gets the password of this VxMCertificate.  # noqa: E501

        The password for the new .pfx file  # noqa: E501

        :return: The password of this VxMCertificate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VxMCertificate.

        The password for the new .pfx file  # noqa: E501

        :param password: The password of this VxMCertificate.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VxMCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VxMCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
