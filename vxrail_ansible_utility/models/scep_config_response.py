# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScepConfigResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scep_enabled': 'bool',
        'error_code': 'int',
        'error_message': 'str',
        'caserver_url': 'str',
        'scep_on': 'bool',
        'scep_renewal_interval_in_minutes': 'int',
        'scep_days_before_expire': 'int'
    }

    attribute_map = {
        'scep_enabled': 'scep_enabled',
        'error_code': 'error_code',
        'error_message': 'error_message',
        'caserver_url': 'caserver_url',
        'scep_on': 'scep_on',
        'scep_renewal_interval_in_minutes': 'scep_renewal_interval_in_minutes',
        'scep_days_before_expire': 'scep_days_before_expire'
    }

    def __init__(self, scep_enabled=None, error_code=None, error_message=None, caserver_url=None, scep_on=None, scep_renewal_interval_in_minutes=None, scep_days_before_expire=None):  # noqa: E501
        """ScepConfigResponse - a model defined in Swagger"""  # noqa: E501
        self._scep_enabled = None
        self._error_code = None
        self._error_message = None
        self._caserver_url = None
        self._scep_on = None
        self._scep_renewal_interval_in_minutes = None
        self._scep_days_before_expire = None
        self.discriminator = None
        self.scep_enabled = scep_enabled
        self.error_code = error_code
        self.error_message = error_message
        self.caserver_url = caserver_url
        self.scep_on = scep_on
        self.scep_renewal_interval_in_minutes = scep_renewal_interval_in_minutes
        self.scep_days_before_expire = scep_days_before_expire

    @property
    def scep_enabled(self):
        """Gets the scep_enabled of this ScepConfigResponse.  # noqa: E501

        Whether the automated renewal is enabled or not  # noqa: E501

        :return: The scep_enabled of this ScepConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._scep_enabled

    @scep_enabled.setter
    def scep_enabled(self, scep_enabled):
        """Sets the scep_enabled of this ScepConfigResponse.

        Whether the automated renewal is enabled or not  # noqa: E501

        :param scep_enabled: The scep_enabled of this ScepConfigResponse.  # noqa: E501
        :type: bool
        """
        if scep_enabled is None:
            raise ValueError("Invalid value for `scep_enabled`, must not be `None`")  # noqa: E501

        self._scep_enabled = scep_enabled

    @property
    def error_code(self):
        """Gets the error_code of this ScepConfigResponse.  # noqa: E501

        Error code of the operation  # noqa: E501

        :return: The error_code of this ScepConfigResponse.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ScepConfigResponse.

        Error code of the operation  # noqa: E501

        :param error_code: The error_code of this ScepConfigResponse.  # noqa: E501
        :type: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ScepConfigResponse.  # noqa: E501

        Error message of the operation  # noqa: E501

        :return: The error_message of this ScepConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ScepConfigResponse.

        Error message of the operation  # noqa: E501

        :param error_message: The error_message of this ScepConfigResponse.  # noqa: E501
        :type: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")  # noqa: E501

        self._error_message = error_message

    @property
    def caserver_url(self):
        """Gets the caserver_url of this ScepConfigResponse.  # noqa: E501

        Certificate Authority server URL  # noqa: E501

        :return: The caserver_url of this ScepConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._caserver_url

    @caserver_url.setter
    def caserver_url(self, caserver_url):
        """Sets the caserver_url of this ScepConfigResponse.

        Certificate Authority server URL  # noqa: E501

        :param caserver_url: The caserver_url of this ScepConfigResponse.  # noqa: E501
        :type: str
        """
        if caserver_url is None:
            raise ValueError("Invalid value for `caserver_url`, must not be `None`")  # noqa: E501

        self._caserver_url = caserver_url

    @property
    def scep_on(self):
        """Gets the scep_on of this ScepConfigResponse.  # noqa: E501

        Whether the automated renewal is enabled or not  # noqa: E501

        :return: The scep_on of this ScepConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._scep_on

    @scep_on.setter
    def scep_on(self, scep_on):
        """Sets the scep_on of this ScepConfigResponse.

        Whether the automated renewal is enabled or not  # noqa: E501

        :param scep_on: The scep_on of this ScepConfigResponse.  # noqa: E501
        :type: bool
        """
        if scep_on is None:
            raise ValueError("Invalid value for `scep_on`, must not be `None`")  # noqa: E501

        self._scep_on = scep_on

    @property
    def scep_renewal_interval_in_minutes(self):
        """Gets the scep_renewal_interval_in_minutes of this ScepConfigResponse.  # noqa: E501

        Certificate validation frequency  # noqa: E501

        :return: The scep_renewal_interval_in_minutes of this ScepConfigResponse.  # noqa: E501
        :rtype: int
        """
        return self._scep_renewal_interval_in_minutes

    @scep_renewal_interval_in_minutes.setter
    def scep_renewal_interval_in_minutes(self, scep_renewal_interval_in_minutes):
        """Sets the scep_renewal_interval_in_minutes of this ScepConfigResponse.

        Certificate validation frequency  # noqa: E501

        :param scep_renewal_interval_in_minutes: The scep_renewal_interval_in_minutes of this ScepConfigResponse.  # noqa: E501
        :type: int
        """
        if scep_renewal_interval_in_minutes is None:
            raise ValueError("Invalid value for `scep_renewal_interval_in_minutes`, must not be `None`")  # noqa: E501

        self._scep_renewal_interval_in_minutes = scep_renewal_interval_in_minutes

    @property
    def scep_days_before_expire(self):
        """Gets the scep_days_before_expire of this ScepConfigResponse.  # noqa: E501

        Days to renew the certificate before expiration  # noqa: E501

        :return: The scep_days_before_expire of this ScepConfigResponse.  # noqa: E501
        :rtype: int
        """
        return self._scep_days_before_expire

    @scep_days_before_expire.setter
    def scep_days_before_expire(self, scep_days_before_expire):
        """Sets the scep_days_before_expire of this ScepConfigResponse.

        Days to renew the certificate before expiration  # noqa: E501

        :param scep_days_before_expire: The scep_days_before_expire of this ScepConfigResponse.  # noqa: E501
        :type: int
        """
        if scep_days_before_expire is None:
            raise ValueError("Invalid value for `scep_days_before_expire`, must not be `None`")  # noqa: E501

        self._scep_days_before_expire = scep_days_before_expire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScepConfigResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScepConfigResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
