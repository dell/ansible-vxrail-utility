# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrecheckSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'str',
        'vxm_root_user': 'UserSpec',
        'vc_admin_user': 'UserSpec',
        'vc_root_user': 'UserSpec',
        'witness_spec': 'WitnessSpec',
        'migration_spec': 'MigrationSpec',
        'node_list': 'list[NodeSpec]'
    }

    attribute_map = {
        'profile': 'profile',
        'vxm_root_user': 'vxm_root_user',
        'vc_admin_user': 'vc_admin_user',
        'vc_root_user': 'vc_root_user',
        'witness_spec': 'witness_spec',
        'migration_spec': 'migration_spec',
        'node_list': 'node_list'
    }

    def __init__(self, profile=None, vxm_root_user=None, vc_admin_user=None, vc_root_user=None, witness_spec=None, migration_spec=None, node_list=None):  # noqa: E501
        """PrecheckSpec - a model defined in Swagger"""  # noqa: E501
        self._profile = None
        self._vxm_root_user = None
        self._vc_admin_user = None
        self._vc_root_user = None
        self._witness_spec = None
        self._migration_spec = None
        self._node_list = None
        self.discriminator = None
        self.profile = profile
        if vxm_root_user is not None:
            self.vxm_root_user = vxm_root_user
        if vc_admin_user is not None:
            self.vc_admin_user = vc_admin_user
        if vc_root_user is not None:
            self.vc_root_user = vc_root_user
        if witness_spec is not None:
            self.witness_spec = witness_spec
        if migration_spec is not None:
            self.migration_spec = migration_spec
        if node_list is not None:
            self.node_list = node_list

    @property
    def profile(self):
        """Gets the profile of this PrecheckSpec.  # noqa: E501

        profile name  # noqa: E501

        :return: The profile of this PrecheckSpec.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this PrecheckSpec.

        profile name  # noqa: E501

        :param profile: The profile of this PrecheckSpec.  # noqa: E501
        :type: str
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501
        allowed_values = ["PRE_UPGRADE", "PROACTIVE_HEALTH", "NODE_EXPANSION"]  # noqa: E501
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"  # noqa: E501
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def vxm_root_user(self):
        """Gets the vxm_root_user of this PrecheckSpec.  # noqa: E501


        :return: The vxm_root_user of this PrecheckSpec.  # noqa: E501
        :rtype: UserSpec
        """
        return self._vxm_root_user

    @vxm_root_user.setter
    def vxm_root_user(self, vxm_root_user):
        """Sets the vxm_root_user of this PrecheckSpec.


        :param vxm_root_user: The vxm_root_user of this PrecheckSpec.  # noqa: E501
        :type: UserSpec
        """

        self._vxm_root_user = vxm_root_user

    @property
    def vc_admin_user(self):
        """Gets the vc_admin_user of this PrecheckSpec.  # noqa: E501


        :return: The vc_admin_user of this PrecheckSpec.  # noqa: E501
        :rtype: UserSpec
        """
        return self._vc_admin_user

    @vc_admin_user.setter
    def vc_admin_user(self, vc_admin_user):
        """Sets the vc_admin_user of this PrecheckSpec.


        :param vc_admin_user: The vc_admin_user of this PrecheckSpec.  # noqa: E501
        :type: UserSpec
        """

        self._vc_admin_user = vc_admin_user

    @property
    def vc_root_user(self):
        """Gets the vc_root_user of this PrecheckSpec.  # noqa: E501


        :return: The vc_root_user of this PrecheckSpec.  # noqa: E501
        :rtype: UserSpec
        """
        return self._vc_root_user

    @vc_root_user.setter
    def vc_root_user(self, vc_root_user):
        """Sets the vc_root_user of this PrecheckSpec.


        :param vc_root_user: The vc_root_user of this PrecheckSpec.  # noqa: E501
        :type: UserSpec
        """

        self._vc_root_user = vc_root_user

    @property
    def witness_spec(self):
        """Gets the witness_spec of this PrecheckSpec.  # noqa: E501


        :return: The witness_spec of this PrecheckSpec.  # noqa: E501
        :rtype: WitnessSpec
        """
        return self._witness_spec

    @witness_spec.setter
    def witness_spec(self, witness_spec):
        """Sets the witness_spec of this PrecheckSpec.


        :param witness_spec: The witness_spec of this PrecheckSpec.  # noqa: E501
        :type: WitnessSpec
        """

        self._witness_spec = witness_spec

    @property
    def migration_spec(self):
        """Gets the migration_spec of this PrecheckSpec.  # noqa: E501


        :return: The migration_spec of this PrecheckSpec.  # noqa: E501
        :rtype: MigrationSpec
        """
        return self._migration_spec

    @migration_spec.setter
    def migration_spec(self, migration_spec):
        """Sets the migration_spec of this PrecheckSpec.


        :param migration_spec: The migration_spec of this PrecheckSpec.  # noqa: E501
        :type: MigrationSpec
        """

        self._migration_spec = migration_spec

    @property
    def node_list(self):
        """Gets the node_list of this PrecheckSpec.  # noqa: E501


        :return: The node_list of this PrecheckSpec.  # noqa: E501
        :rtype: list[NodeSpec]
        """
        return self._node_list

    @node_list.setter
    def node_list(self, node_list):
        """Sets the node_list of this PrecheckSpec.


        :param node_list: The node_list of this PrecheckSpec.  # noqa: E501
        :type: list[NodeSpec]
        """

        self._node_list = node_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrecheckSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrecheckSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
