# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportPrecheckDataContentResultsHostChecks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_id': 'str',
        'last_reboot_time': 'str',
        'checks': 'list[ReportPreCheckItem]'
    }

    attribute_map = {
        'host_id': 'host_id',
        'last_reboot_time': 'last_reboot_time',
        'checks': 'checks'
    }

    def __init__(self, host_id=None, last_reboot_time=None, checks=None):  # noqa: E501
        """ReportPrecheckDataContentResultsHostChecks - a model defined in Swagger"""  # noqa: E501
        self._host_id = None
        self._last_reboot_time = None
        self._checks = None
        self.discriminator = None
        if host_id is not None:
            self.host_id = host_id
        if last_reboot_time is not None:
            self.last_reboot_time = last_reboot_time
        if checks is not None:
            self.checks = checks

    @property
    def host_id(self):
        """Gets the host_id of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501


        :return: The host_id of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ReportPrecheckDataContentResultsHostChecks.


        :param host_id: The host_id of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def last_reboot_time(self):
        """Gets the last_reboot_time of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501


        :return: The last_reboot_time of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :rtype: str
        """
        return self._last_reboot_time

    @last_reboot_time.setter
    def last_reboot_time(self, last_reboot_time):
        """Sets the last_reboot_time of this ReportPrecheckDataContentResultsHostChecks.


        :param last_reboot_time: The last_reboot_time of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :type: str
        """

        self._last_reboot_time = last_reboot_time

    @property
    def checks(self):
        """Gets the checks of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501


        :return: The checks of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :rtype: list[ReportPreCheckItem]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this ReportPrecheckDataContentResultsHostChecks.


        :param checks: The checks of this ReportPrecheckDataContentResultsHostChecks.  # noqa: E501
        :type: list[ReportPreCheckItem]
        """

        self._checks = checks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPrecheckDataContentResultsHostChecks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPrecheckDataContentResultsHostChecks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
