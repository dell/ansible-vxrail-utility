# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemInitSpecV2Hosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_psnt': 'str',
        'hostname': 'str',
        'customer_supplied': 'CustomerSuppliedHostInfo',
        'accounts': 'SystemInitSpecAccounts',
        'network': 'list[SystemInitSpecNetwork]',
        'geo_location': 'SystemInitSpecGeoLocation'
    }

    attribute_map = {
        'host_psnt': 'host_psnt',
        'hostname': 'hostname',
        'customer_supplied': 'customer_supplied',
        'accounts': 'accounts',
        'network': 'network',
        'geo_location': 'geo_location'
    }

    def __init__(self, host_psnt=None, hostname=None, customer_supplied=None, accounts=None, network=None, geo_location=None):  # noqa: E501
        """SystemInitSpecV2Hosts - a model defined in Swagger"""  # noqa: E501
        self._host_psnt = None
        self._hostname = None
        self._customer_supplied = None
        self._accounts = None
        self._network = None
        self._geo_location = None
        self.discriminator = None
        if host_psnt is not None:
            self.host_psnt = host_psnt
        if hostname is not None:
            self.hostname = hostname
        if customer_supplied is not None:
            self.customer_supplied = customer_supplied
        if accounts is not None:
            self.accounts = accounts
        if network is not None:
            self.network = network
        if geo_location is not None:
            self.geo_location = geo_location

    @property
    def host_psnt(self):
        """Gets the host_psnt of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The host_psnt of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: str
        """
        return self._host_psnt

    @host_psnt.setter
    def host_psnt(self, host_psnt):
        """Sets the host_psnt of this SystemInitSpecV2Hosts.


        :param host_psnt: The host_psnt of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: str
        """

        self._host_psnt = host_psnt

    @property
    def hostname(self):
        """Gets the hostname of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The hostname of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SystemInitSpecV2Hosts.


        :param hostname: The hostname of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def customer_supplied(self):
        """Gets the customer_supplied of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The customer_supplied of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: CustomerSuppliedHostInfo
        """
        return self._customer_supplied

    @customer_supplied.setter
    def customer_supplied(self, customer_supplied):
        """Sets the customer_supplied of this SystemInitSpecV2Hosts.


        :param customer_supplied: The customer_supplied of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: CustomerSuppliedHostInfo
        """

        self._customer_supplied = customer_supplied

    @property
    def accounts(self):
        """Gets the accounts of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The accounts of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: SystemInitSpecAccounts
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SystemInitSpecV2Hosts.


        :param accounts: The accounts of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: SystemInitSpecAccounts
        """

        self._accounts = accounts

    @property
    def network(self):
        """Gets the network of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The network of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: list[SystemInitSpecNetwork]
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SystemInitSpecV2Hosts.


        :param network: The network of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: list[SystemInitSpecNetwork]
        """

        self._network = network

    @property
    def geo_location(self):
        """Gets the geo_location of this SystemInitSpecV2Hosts.  # noqa: E501


        :return: The geo_location of this SystemInitSpecV2Hosts.  # noqa: E501
        :rtype: SystemInitSpecGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this SystemInitSpecV2Hosts.


        :param geo_location: The geo_location of this SystemInitSpecV2Hosts.  # noqa: E501
        :type: SystemInitSpecGeoLocation
        """

        self._geo_location = geo_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitSpecV2Hosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitSpecV2Hosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
