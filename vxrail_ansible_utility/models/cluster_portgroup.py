# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterPortgroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'portgroup_key': 'str',
        'portgroup_vlan': 'int',
        'vds_name': 'str',
        'vds_uuid': 'str',
        'vds_moid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'portgroup_key': 'portgroup_key',
        'portgroup_vlan': 'portgroup_vlan',
        'vds_name': 'vds_name',
        'vds_uuid': 'vds_uuid',
        'vds_moid': 'vds_moid'
    }

    def __init__(self, name=None, type=None, portgroup_key=None, portgroup_vlan=None, vds_name=None, vds_uuid=None, vds_moid=None):  # noqa: E501
        """ClusterPortgroup - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._portgroup_key = None
        self._portgroup_vlan = None
        self._vds_name = None
        self._vds_uuid = None
        self._vds_moid = None
        self.discriminator = None
        self.name = name
        self.type = type
        self.portgroup_key = portgroup_key
        self.portgroup_vlan = portgroup_vlan
        self.vds_name = vds_name
        self.vds_uuid = vds_uuid
        self.vds_moid = vds_moid

    @property
    def name(self):
        """Gets the name of this ClusterPortgroup.  # noqa: E501

        The name of the portgroup  # noqa: E501

        :return: The name of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterPortgroup.

        The name of the portgroup  # noqa: E501

        :param name: The name of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ClusterPortgroup.  # noqa: E501

        The type of portgroup  # noqa: E501

        :return: The type of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterPortgroup.

        The type of portgroup  # noqa: E501

        :param type: The type of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def portgroup_key(self):
        """Gets the portgroup_key of this ClusterPortgroup.  # noqa: E501

        The key of the portgroup  # noqa: E501

        :return: The portgroup_key of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._portgroup_key

    @portgroup_key.setter
    def portgroup_key(self, portgroup_key):
        """Sets the portgroup_key of this ClusterPortgroup.

        The key of the portgroup  # noqa: E501

        :param portgroup_key: The portgroup_key of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if portgroup_key is None:
            raise ValueError("Invalid value for `portgroup_key`, must not be `None`")  # noqa: E501

        self._portgroup_key = portgroup_key

    @property
    def portgroup_vlan(self):
        """Gets the portgroup_vlan of this ClusterPortgroup.  # noqa: E501

        The VLAN ID of the portgroup  # noqa: E501

        :return: The portgroup_vlan of this ClusterPortgroup.  # noqa: E501
        :rtype: int
        """
        return self._portgroup_vlan

    @portgroup_vlan.setter
    def portgroup_vlan(self, portgroup_vlan):
        """Sets the portgroup_vlan of this ClusterPortgroup.

        The VLAN ID of the portgroup  # noqa: E501

        :param portgroup_vlan: The portgroup_vlan of this ClusterPortgroup.  # noqa: E501
        :type: int
        """
        if portgroup_vlan is None:
            raise ValueError("Invalid value for `portgroup_vlan`, must not be `None`")  # noqa: E501

        self._portgroup_vlan = portgroup_vlan

    @property
    def vds_name(self):
        """Gets the vds_name of this ClusterPortgroup.  # noqa: E501

        The name of the VDS  # noqa: E501

        :return: The vds_name of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._vds_name

    @vds_name.setter
    def vds_name(self, vds_name):
        """Sets the vds_name of this ClusterPortgroup.

        The name of the VDS  # noqa: E501

        :param vds_name: The vds_name of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if vds_name is None:
            raise ValueError("Invalid value for `vds_name`, must not be `None`")  # noqa: E501

        self._vds_name = vds_name

    @property
    def vds_uuid(self):
        """Gets the vds_uuid of this ClusterPortgroup.  # noqa: E501

        The UUID of the VDS  # noqa: E501

        :return: The vds_uuid of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._vds_uuid

    @vds_uuid.setter
    def vds_uuid(self, vds_uuid):
        """Sets the vds_uuid of this ClusterPortgroup.

        The UUID of the VDS  # noqa: E501

        :param vds_uuid: The vds_uuid of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if vds_uuid is None:
            raise ValueError("Invalid value for `vds_uuid`, must not be `None`")  # noqa: E501

        self._vds_uuid = vds_uuid

    @property
    def vds_moid(self):
        """Gets the vds_moid of this ClusterPortgroup.  # noqa: E501

        The Managed Object ID (MOID) of the VDS  # noqa: E501

        :return: The vds_moid of this ClusterPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._vds_moid

    @vds_moid.setter
    def vds_moid(self, vds_moid):
        """Sets the vds_moid of this ClusterPortgroup.

        The Managed Object ID (MOID) of the VDS  # noqa: E501

        :param vds_moid: The vds_moid of this ClusterPortgroup.  # noqa: E501
        :type: str
        """
        if vds_moid is None:
            raise ValueError("Invalid value for `vds_moid`, must not be `None`")  # noqa: E501

        self._vds_moid = vds_moid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterPortgroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterPortgroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
