# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveredNodeHardwareProfileInfoV2Dpus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'uuid': 'str',
        'vendor': 'str',
        'name': 'str',
        'pnics': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'uuid': 'uuid',
        'vendor': 'vendor',
        'name': 'name',
        'pnics': 'pnics'
    }

    def __init__(self, id=None, model=None, uuid=None, vendor=None, name=None, pnics=None):  # noqa: E501
        """DiscoveredNodeHardwareProfileInfoV2Dpus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._uuid = None
        self._vendor = None
        self._name = None
        self._pnics = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if uuid is not None:
            self.uuid = uuid
        if vendor is not None:
            self.vendor = vendor
        if name is not None:
            self.name = name
        if pnics is not None:
            self.pnics = pnics

    @property
    def id(self):
        """Gets the id of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        The DPU ID.  # noqa: E501

        :return: The id of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        The DPU ID.  # noqa: E501

        :param id: The id of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        The model name of the DPU.  # noqa: E501

        :return: The model of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        The model name of the DPU.  # noqa: E501

        :param model: The model of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def uuid(self):
        """Gets the uuid of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        The UUID of the DPU.  # noqa: E501

        :return: The uuid of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        The UUID of the DPU.  # noqa: E501

        :param uuid: The uuid of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor(self):
        """Gets the vendor of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        The DPU vendor.  # noqa: E501

        :return: The vendor of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        The DPU vendor.  # noqa: E501

        :param vendor: The vendor of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """Gets the name of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        The DPU name.  # noqa: E501

        :return: The name of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        The DPU name.  # noqa: E501

        :param name: The name of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pnics(self):
        """Gets the pnics of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501

        DPU pnics  # noqa: E501

        :return: The pnics of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :rtype: list[str]
        """
        return self._pnics

    @pnics.setter
    def pnics(self, pnics):
        """Sets the pnics of this DiscoveredNodeHardwareProfileInfoV2Dpus.

        DPU pnics  # noqa: E501

        :param pnics: The pnics of this DiscoveredNodeHardwareProfileInfoV2Dpus.  # noqa: E501
        :type: list[str]
        """

        self._pnics = pnics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredNodeHardwareProfileInfoV2Dpus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredNodeHardwareProfileInfoV2Dpus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
