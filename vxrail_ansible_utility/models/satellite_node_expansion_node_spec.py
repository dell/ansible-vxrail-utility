# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SatelliteNodeExpansionNodeSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_supplied': 'SatelliteNodeCustomerSuppliedSpec',
        'hostname': 'str',
        'domain_name': 'str',
        'accounts': 'NodeAccount',
        'network': 'list[SatelliteNodeNetwork]',
        'dns_servers': 'list[str]',
        'ntp_servers': 'list[str]',
        'syslog_servers': 'list[str]',
        'geo_location': 'GeoLocation'
    }

    attribute_map = {
        'customer_supplied': 'customer_supplied',
        'hostname': 'hostname',
        'domain_name': 'domain_name',
        'accounts': 'accounts',
        'network': 'network',
        'dns_servers': 'dns_servers',
        'ntp_servers': 'ntp_servers',
        'syslog_servers': 'syslog_servers',
        'geo_location': 'geo_location'
    }

    def __init__(self, customer_supplied=None, hostname=None, domain_name=None, accounts=None, network=None, dns_servers=None, ntp_servers=None, syslog_servers=None, geo_location=None):  # noqa: E501
        """SatelliteNodeExpansionNodeSpec - a model defined in Swagger"""  # noqa: E501
        self._customer_supplied = None
        self._hostname = None
        self._domain_name = None
        self._accounts = None
        self._network = None
        self._dns_servers = None
        self._ntp_servers = None
        self._syslog_servers = None
        self._geo_location = None
        self.discriminator = None
        self.customer_supplied = customer_supplied
        self.hostname = hostname
        self.domain_name = domain_name
        self.accounts = accounts
        self.network = network
        self.dns_servers = dns_servers
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if syslog_servers is not None:
            self.syslog_servers = syslog_servers
        if geo_location is not None:
            self.geo_location = geo_location

    @property
    def customer_supplied(self):
        """Gets the customer_supplied of this SatelliteNodeExpansionNodeSpec.  # noqa: E501


        :return: The customer_supplied of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: SatelliteNodeCustomerSuppliedSpec
        """
        return self._customer_supplied

    @customer_supplied.setter
    def customer_supplied(self, customer_supplied):
        """Sets the customer_supplied of this SatelliteNodeExpansionNodeSpec.


        :param customer_supplied: The customer_supplied of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: SatelliteNodeCustomerSuppliedSpec
        """
        if customer_supplied is None:
            raise ValueError("Invalid value for `customer_supplied`, must not be `None`")  # noqa: E501

        self._customer_supplied = customer_supplied

    @property
    def hostname(self):
        """Gets the hostname of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        Hostname of the host  # noqa: E501

        :return: The hostname of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SatelliteNodeExpansionNodeSpec.

        Hostname of the host  # noqa: E501

        :param hostname: The hostname of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def domain_name(self):
        """Gets the domain_name of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        Domain name of the host  # noqa: E501

        :return: The domain_name of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this SatelliteNodeExpansionNodeSpec.

        Domain name of the host  # noqa: E501

        :param domain_name: The domain_name of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def accounts(self):
        """Gets the accounts of this SatelliteNodeExpansionNodeSpec.  # noqa: E501


        :return: The accounts of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: NodeAccount
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SatelliteNodeExpansionNodeSpec.


        :param accounts: The accounts of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: NodeAccount
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def network(self):
        """Gets the network of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        An array of network information for the host components  # noqa: E501

        :return: The network of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: list[SatelliteNodeNetwork]
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SatelliteNodeExpansionNodeSpec.

        An array of network information for the host components  # noqa: E501

        :param network: The network of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: list[SatelliteNodeNetwork]
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def dns_servers(self):
        """Gets the dns_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        An array of dns servers information for the host components  # noqa: E501

        :return: The dns_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this SatelliteNodeExpansionNodeSpec.

        An array of dns servers information for the host components  # noqa: E501

        :param dns_servers: The dns_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: list[str]
        """
        if dns_servers is None:
            raise ValueError("Invalid value for `dns_servers`, must not be `None`")  # noqa: E501

        self._dns_servers = dns_servers

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        An array of ntp servers information for the host components  # noqa: E501

        :return: The ntp_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this SatelliteNodeExpansionNodeSpec.

        An array of ntp servers information for the host components  # noqa: E501

        :param ntp_servers: The ntp_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def syslog_servers(self):
        """Gets the syslog_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501

        An array of syslog servers information for the host components  # noqa: E501

        :return: The syslog_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._syslog_servers

    @syslog_servers.setter
    def syslog_servers(self, syslog_servers):
        """Sets the syslog_servers of this SatelliteNodeExpansionNodeSpec.

        An array of syslog servers information for the host components  # noqa: E501

        :param syslog_servers: The syslog_servers of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: list[str]
        """

        self._syslog_servers = syslog_servers

    @property
    def geo_location(self):
        """Gets the geo_location of this SatelliteNodeExpansionNodeSpec.  # noqa: E501


        :return: The geo_location of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :rtype: GeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this SatelliteNodeExpansionNodeSpec.


        :param geo_location: The geo_location of this SatelliteNodeExpansionNodeSpec.  # noqa: E501
        :type: GeoLocation
        """

        self._geo_location = geo_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SatelliteNodeExpansionNodeSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SatelliteNodeExpansionNodeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
