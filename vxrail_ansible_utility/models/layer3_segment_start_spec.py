# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer3SegmentStartSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment': 'Layer3SegmentSpec',
        'vcenter': 'Account'
    }

    attribute_map = {
        'segment': 'segment',
        'vcenter': 'vcenter'
    }

    def __init__(self, segment=None, vcenter=None):  # noqa: E501
        """Layer3SegmentStartSpec - a model defined in Swagger"""  # noqa: E501
        self._segment = None
        self._vcenter = None
        self.discriminator = None
        self.segment = segment
        self.vcenter = vcenter

    @property
    def segment(self):
        """Gets the segment of this Layer3SegmentStartSpec.  # noqa: E501


        :return: The segment of this Layer3SegmentStartSpec.  # noqa: E501
        :rtype: Layer3SegmentSpec
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this Layer3SegmentStartSpec.


        :param segment: The segment of this Layer3SegmentStartSpec.  # noqa: E501
        :type: Layer3SegmentSpec
        """
        if segment is None:
            raise ValueError("Invalid value for `segment`, must not be `None`")  # noqa: E501

        self._segment = segment

    @property
    def vcenter(self):
        """Gets the vcenter of this Layer3SegmentStartSpec.  # noqa: E501


        :return: The vcenter of this Layer3SegmentStartSpec.  # noqa: E501
        :rtype: Account
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this Layer3SegmentStartSpec.


        :param vcenter: The vcenter of this Layer3SegmentStartSpec.  # noqa: E501
        :type: Account
        """
        if vcenter is None:
            raise ValueError("Invalid value for `vcenter`, must not be `None`")  # noqa: E501

        self._vcenter = vcenter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer3SegmentStartSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer3SegmentStartSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
