# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterHostPNicInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'serial_number': 'str',
        'psnt': 'str',
        'model': 'str',
        'vmnics': 'list[ClusterNodesPnics]'
    }

    attribute_map = {
        'hostname': 'hostname',
        'serial_number': 'serial_number',
        'psnt': 'psnt',
        'model': 'model',
        'vmnics': 'vmnics'
    }

    def __init__(self, hostname=None, serial_number=None, psnt=None, model=None, vmnics=None):  # noqa: E501
        """ClusterHostPNicInfo - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._serial_number = None
        self._psnt = None
        self._model = None
        self._vmnics = None
        self.discriminator = None
        self.hostname = hostname
        self.serial_number = serial_number
        if psnt is not None:
            self.psnt = psnt
        self.model = model
        self.vmnics = vmnics

    @property
    def hostname(self):
        """Gets the hostname of this ClusterHostPNicInfo.  # noqa: E501

        Name of the host  # noqa: E501

        :return: The hostname of this ClusterHostPNicInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ClusterHostPNicInfo.

        Name of the host  # noqa: E501

        :param hostname: The hostname of this ClusterHostPNicInfo.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def serial_number(self):
        """Gets the serial_number of this ClusterHostPNicInfo.  # noqa: E501

        Serial number of the host.  # noqa: E501

        :return: The serial_number of this ClusterHostPNicInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ClusterHostPNicInfo.

        Serial number of the host.  # noqa: E501

        :param serial_number: The serial_number of this ClusterHostPNicInfo.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def psnt(self):
        """Gets the psnt of this ClusterHostPNicInfo.  # noqa: E501

        Product serial number tag (PSNT) of the host.  # noqa: E501

        :return: The psnt of this ClusterHostPNicInfo.  # noqa: E501
        :rtype: str
        """
        return self._psnt

    @psnt.setter
    def psnt(self, psnt):
        """Sets the psnt of this ClusterHostPNicInfo.

        Product serial number tag (PSNT) of the host.  # noqa: E501

        :param psnt: The psnt of this ClusterHostPNicInfo.  # noqa: E501
        :type: str
        """

        self._psnt = psnt

    @property
    def model(self):
        """Gets the model of this ClusterHostPNicInfo.  # noqa: E501

        Model type of the host  # noqa: E501

        :return: The model of this ClusterHostPNicInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClusterHostPNicInfo.

        Model type of the host  # noqa: E501

        :param model: The model of this ClusterHostPNicInfo.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def vmnics(self):
        """Gets the vmnics of this ClusterHostPNicInfo.  # noqa: E501

        Physical adapter on VMWare ESXi host  # noqa: E501

        :return: The vmnics of this ClusterHostPNicInfo.  # noqa: E501
        :rtype: list[ClusterNodesPnics]
        """
        return self._vmnics

    @vmnics.setter
    def vmnics(self, vmnics):
        """Sets the vmnics of this ClusterHostPNicInfo.

        Physical adapter on VMWare ESXi host  # noqa: E501

        :param vmnics: The vmnics of this ClusterHostPNicInfo.  # noqa: E501
        :type: list[ClusterNodesPnics]
        """
        if vmnics is None:
            raise ValueError("Invalid value for `vmnics`, must not be `None`")  # noqa: E501

        self._vmnics = vmnics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterHostPNicInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterHostPNicInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
