# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer3ExpansionHostSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sn': 'str',
        'customer_supplied': 'CustomerSuppliedSpec',
        'hostname': 'str',
        'network': 'list[HostIp]',
        'accounts': 'NodeAccount',
        'geo_location': 'GeoLocation',
        'root_password': 'str',
        'is_maintenance_mode': 'Object',
        'nic_mappings': 'list[NicUplinkV2]',
        'storage': 'StroageInfoPrivate'
    }

    attribute_map = {
        'sn': 'sn',
        'customer_supplied': 'customer_supplied',
        'hostname': 'hostname',
        'network': 'network',
        'accounts': 'accounts',
        'geo_location': 'geo_location',
        'root_password': 'root_password',
        'is_maintenance_mode': 'is_maintenance_mode',
        'nic_mappings': 'nic_mappings',
        'storage': 'storage'
    }

    def __init__(self, sn=None, customer_supplied=None, hostname=None, network=None, accounts=None, geo_location=None, root_password=None, is_maintenance_mode=None, nic_mappings=None, storage=None):  # noqa: E501
        """Layer3ExpansionHostSpec - a model defined in Swagger"""  # noqa: E501
        self._sn = None
        self._customer_supplied = None
        self._hostname = None
        self._network = None
        self._accounts = None
        self._geo_location = None
        self._root_password = None
        self._is_maintenance_mode = None
        self._nic_mappings = None
        self._storage = None
        self.discriminator = None
        if sn is not None:
            self.sn = sn
        if customer_supplied is not None:
            self.customer_supplied = customer_supplied
        self.hostname = hostname
        self.network = network
        self.accounts = accounts
        if geo_location is not None:
            self.geo_location = geo_location
        if root_password is not None:
            self.root_password = root_password
        if is_maintenance_mode is not None:
            self.is_maintenance_mode = is_maintenance_mode
        self.nic_mappings = nic_mappings
        if storage is not None:
            self.storage = storage

    @property
    def sn(self):
        """Gets the sn of this Layer3ExpansionHostSpec.  # noqa: E501

        sn of the host  # noqa: E501

        :return: The sn of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this Layer3ExpansionHostSpec.

        sn of the host  # noqa: E501

        :param sn: The sn of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def customer_supplied(self):
        """Gets the customer_supplied of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The customer_supplied of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: CustomerSuppliedSpec
        """
        return self._customer_supplied

    @customer_supplied.setter
    def customer_supplied(self, customer_supplied):
        """Sets the customer_supplied of this Layer3ExpansionHostSpec.


        :param customer_supplied: The customer_supplied of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: CustomerSuppliedSpec
        """

        self._customer_supplied = customer_supplied

    @property
    def hostname(self):
        """Gets the hostname of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The hostname of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Layer3ExpansionHostSpec.


        :param hostname: The hostname of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def network(self):
        """Gets the network of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The network of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: list[HostIp]
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Layer3ExpansionHostSpec.


        :param network: The network of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: list[HostIp]
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def accounts(self):
        """Gets the accounts of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The accounts of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: NodeAccount
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Layer3ExpansionHostSpec.


        :param accounts: The accounts of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: NodeAccount
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def geo_location(self):
        """Gets the geo_location of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The geo_location of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: GeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this Layer3ExpansionHostSpec.


        :param geo_location: The geo_location of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: GeoLocation
        """

        self._geo_location = geo_location

    @property
    def root_password(self):
        """Gets the root_password of this Layer3ExpansionHostSpec.  # noqa: E501

        Root password of host.  # noqa: E501

        :return: The root_password of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this Layer3ExpansionHostSpec.

        Root password of host.  # noqa: E501

        :param root_password: The root_password of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: str
        """

        self._root_password = root_password

    @property
    def is_maintenance_mode(self):
        """Gets the is_maintenance_mode of this Layer3ExpansionHostSpec.  # noqa: E501

        whether to put the host in maintenance mode or not  # noqa: E501

        :return: The is_maintenance_mode of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: Object
        """
        return self._is_maintenance_mode

    @is_maintenance_mode.setter
    def is_maintenance_mode(self, is_maintenance_mode):
        """Sets the is_maintenance_mode of this Layer3ExpansionHostSpec.

        whether to put the host in maintenance mode or not  # noqa: E501

        :param is_maintenance_mode: The is_maintenance_mode of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: Object
        """

        self._is_maintenance_mode = is_maintenance_mode

    @property
    def nic_mappings(self):
        """Gets the nic_mappings of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The nic_mappings of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: list[NicUplinkV2]
        """
        return self._nic_mappings

    @nic_mappings.setter
    def nic_mappings(self, nic_mappings):
        """Sets the nic_mappings of this Layer3ExpansionHostSpec.


        :param nic_mappings: The nic_mappings of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: list[NicUplinkV2]
        """
        if nic_mappings is None:
            raise ValueError("Invalid value for `nic_mappings`, must not be `None`")  # noqa: E501

        self._nic_mappings = nic_mappings

    @property
    def storage(self):
        """Gets the storage of this Layer3ExpansionHostSpec.  # noqa: E501


        :return: The storage of this Layer3ExpansionHostSpec.  # noqa: E501
        :rtype: StroageInfoPrivate
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Layer3ExpansionHostSpec.


        :param storage: The storage of this Layer3ExpansionHostSpec.  # noqa: E501
        :type: StroageInfoPrivate
        """

        self._storage = storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer3ExpansionHostSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer3ExpansionHostSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
