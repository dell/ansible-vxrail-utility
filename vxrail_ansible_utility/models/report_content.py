# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_type': 'str',
        'report_key': 'int',
        'encrypt_key': 'str',
        'created_at': 'int',
        'desired_state': 'str',
        'cluster_data': 'ReportClusterDataContent',
        'host_data': 'ReportHostDataContent',
        'pre_check_data': 'ReportPrecheckDataContent',
        'customize_component_data': 'list[ReportCustomizeComponentData]',
        'vlcm_status': 'ReportVlcmStatus',
        'update_type': 'str',
        'quick_patch_compatible': 'bool'
    }

    attribute_map = {
        'report_type': 'reportType',
        'report_key': 'report_key',
        'encrypt_key': 'encrypt_key',
        'created_at': 'created_at',
        'desired_state': 'desired_state',
        'cluster_data': 'cluster_data',
        'host_data': 'host_data',
        'pre_check_data': 'pre_check_data',
        'customize_component_data': 'customize_component_data',
        'vlcm_status': 'vlcm_status',
        'update_type': 'update_type',
        'quick_patch_compatible': 'quick_patch_compatible'
    }

    def __init__(self, report_type=None, report_key=None, encrypt_key=None, created_at=None, desired_state=None, cluster_data=None, host_data=None, pre_check_data=None, customize_component_data=None, vlcm_status=None, update_type=None, quick_patch_compatible=None):  # noqa: E501
        """ReportContent - a model defined in Swagger"""  # noqa: E501
        self._report_type = None
        self._report_key = None
        self._encrypt_key = None
        self._created_at = None
        self._desired_state = None
        self._cluster_data = None
        self._host_data = None
        self._pre_check_data = None
        self._customize_component_data = None
        self._vlcm_status = None
        self._update_type = None
        self._quick_patch_compatible = None
        self.discriminator = None
        if report_type is not None:
            self.report_type = report_type
        if report_key is not None:
            self.report_key = report_key
        if encrypt_key is not None:
            self.encrypt_key = encrypt_key
        if created_at is not None:
            self.created_at = created_at
        if desired_state is not None:
            self.desired_state = desired_state
        if cluster_data is not None:
            self.cluster_data = cluster_data
        if host_data is not None:
            self.host_data = host_data
        if pre_check_data is not None:
            self.pre_check_data = pre_check_data
        if customize_component_data is not None:
            self.customize_component_data = customize_component_data
        if vlcm_status is not None:
            self.vlcm_status = vlcm_status
        if update_type is not None:
            self.update_type = update_type
        if quick_patch_compatible is not None:
            self.quick_patch_compatible = quick_patch_compatible

    @property
    def report_type(self):
        """Gets the report_type of this ReportContent.  # noqa: E501


        :return: The report_type of this ReportContent.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportContent.


        :param report_type: The report_type of this ReportContent.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def report_key(self):
        """Gets the report_key of this ReportContent.  # noqa: E501


        :return: The report_key of this ReportContent.  # noqa: E501
        :rtype: int
        """
        return self._report_key

    @report_key.setter
    def report_key(self, report_key):
        """Sets the report_key of this ReportContent.


        :param report_key: The report_key of this ReportContent.  # noqa: E501
        :type: int
        """

        self._report_key = report_key

    @property
    def encrypt_key(self):
        """Gets the encrypt_key of this ReportContent.  # noqa: E501


        :return: The encrypt_key of this ReportContent.  # noqa: E501
        :rtype: str
        """
        return self._encrypt_key

    @encrypt_key.setter
    def encrypt_key(self, encrypt_key):
        """Sets the encrypt_key of this ReportContent.


        :param encrypt_key: The encrypt_key of this ReportContent.  # noqa: E501
        :type: str
        """

        self._encrypt_key = encrypt_key

    @property
    def created_at(self):
        """Gets the created_at of this ReportContent.  # noqa: E501


        :return: The created_at of this ReportContent.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportContent.


        :param created_at: The created_at of this ReportContent.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def desired_state(self):
        """Gets the desired_state of this ReportContent.  # noqa: E501


        :return: The desired_state of this ReportContent.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this ReportContent.


        :param desired_state: The desired_state of this ReportContent.  # noqa: E501
        :type: str
        """

        self._desired_state = desired_state

    @property
    def cluster_data(self):
        """Gets the cluster_data of this ReportContent.  # noqa: E501


        :return: The cluster_data of this ReportContent.  # noqa: E501
        :rtype: ReportClusterDataContent
        """
        return self._cluster_data

    @cluster_data.setter
    def cluster_data(self, cluster_data):
        """Sets the cluster_data of this ReportContent.


        :param cluster_data: The cluster_data of this ReportContent.  # noqa: E501
        :type: ReportClusterDataContent
        """

        self._cluster_data = cluster_data

    @property
    def host_data(self):
        """Gets the host_data of this ReportContent.  # noqa: E501


        :return: The host_data of this ReportContent.  # noqa: E501
        :rtype: ReportHostDataContent
        """
        return self._host_data

    @host_data.setter
    def host_data(self, host_data):
        """Sets the host_data of this ReportContent.


        :param host_data: The host_data of this ReportContent.  # noqa: E501
        :type: ReportHostDataContent
        """

        self._host_data = host_data

    @property
    def pre_check_data(self):
        """Gets the pre_check_data of this ReportContent.  # noqa: E501


        :return: The pre_check_data of this ReportContent.  # noqa: E501
        :rtype: ReportPrecheckDataContent
        """
        return self._pre_check_data

    @pre_check_data.setter
    def pre_check_data(self, pre_check_data):
        """Sets the pre_check_data of this ReportContent.


        :param pre_check_data: The pre_check_data of this ReportContent.  # noqa: E501
        :type: ReportPrecheckDataContent
        """

        self._pre_check_data = pre_check_data

    @property
    def customize_component_data(self):
        """Gets the customize_component_data of this ReportContent.  # noqa: E501


        :return: The customize_component_data of this ReportContent.  # noqa: E501
        :rtype: list[ReportCustomizeComponentData]
        """
        return self._customize_component_data

    @customize_component_data.setter
    def customize_component_data(self, customize_component_data):
        """Sets the customize_component_data of this ReportContent.


        :param customize_component_data: The customize_component_data of this ReportContent.  # noqa: E501
        :type: list[ReportCustomizeComponentData]
        """

        self._customize_component_data = customize_component_data

    @property
    def vlcm_status(self):
        """Gets the vlcm_status of this ReportContent.  # noqa: E501


        :return: The vlcm_status of this ReportContent.  # noqa: E501
        :rtype: ReportVlcmStatus
        """
        return self._vlcm_status

    @vlcm_status.setter
    def vlcm_status(self, vlcm_status):
        """Sets the vlcm_status of this ReportContent.


        :param vlcm_status: The vlcm_status of this ReportContent.  # noqa: E501
        :type: ReportVlcmStatus
        """

        self._vlcm_status = vlcm_status

    @property
    def update_type(self):
        """Gets the update_type of this ReportContent.  # noqa: E501


        :return: The update_type of this ReportContent.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this ReportContent.


        :param update_type: The update_type of this ReportContent.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def quick_patch_compatible(self):
        """Gets the quick_patch_compatible of this ReportContent.  # noqa: E501


        :return: The quick_patch_compatible of this ReportContent.  # noqa: E501
        :rtype: bool
        """
        return self._quick_patch_compatible

    @quick_patch_compatible.setter
    def quick_patch_compatible(self, quick_patch_compatible):
        """Sets the quick_patch_compatible of this ReportContent.


        :param quick_patch_compatible: The quick_patch_compatible of this ReportContent.  # noqa: E501
        :type: bool
        """

        self._quick_patch_compatible = quick_patch_compatible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
