# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer2ExpansionPreviewInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'cluster_size': 'str',
        'cluster_type': 'str'
    }

    attribute_map = {
        'domain_name': 'domain_name',
        'cluster_size': 'cluster_size',
        'cluster_type': 'cluster_type'
    }

    def __init__(self, domain_name=None, cluster_size=None, cluster_type=None):  # noqa: E501
        """Layer2ExpansionPreviewInfo - a model defined in Swagger"""  # noqa: E501
        self._domain_name = None
        self._cluster_size = None
        self._cluster_type = None
        self.discriminator = None
        self.domain_name = domain_name
        self.cluster_size = cluster_size
        self.cluster_type = cluster_type

    @property
    def domain_name(self):
        """Gets the domain_name of this Layer2ExpansionPreviewInfo.  # noqa: E501


        :return: The domain_name of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Layer2ExpansionPreviewInfo.


        :param domain_name: The domain_name of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def cluster_size(self):
        """Gets the cluster_size of this Layer2ExpansionPreviewInfo.  # noqa: E501


        :return: The cluster_size of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_size

    @cluster_size.setter
    def cluster_size(self, cluster_size):
        """Sets the cluster_size of this Layer2ExpansionPreviewInfo.


        :param cluster_size: The cluster_size of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :type: str
        """
        if cluster_size is None:
            raise ValueError("Invalid value for `cluster_size`, must not be `None`")  # noqa: E501

        self._cluster_size = cluster_size

    @property
    def cluster_type(self):
        """Gets the cluster_type of this Layer2ExpansionPreviewInfo.  # noqa: E501


        :return: The cluster_type of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this Layer2ExpansionPreviewInfo.


        :param cluster_type: The cluster_type of this Layer2ExpansionPreviewInfo.  # noqa: E501
        :type: str
        """
        if cluster_type is None:
            raise ValueError("Invalid value for `cluster_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NORMAL", "COMPUTE", "VSAN2NODE", "UNKNOWN"]  # noqa: E501
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer2ExpansionPreviewInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer2ExpansionPreviewInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
