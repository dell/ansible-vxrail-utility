# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.410
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthPrecheckSpecV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_file_locator': 'str',
        'health_precheck_type': 'str',
        'vxrail': 'VxRailManagerSpec',
        'vcenter': 'VcenterEmbeddedPSCSpec',
        'witness': 'WitnessSpec',
        'upgrade_sequence': 'UpgradeSequence'
    }

    attribute_map = {
        'bundle_file_locator': 'bundle_file_locator',
        'health_precheck_type': 'health_precheck_type',
        'vxrail': 'vxrail',
        'vcenter': 'vcenter',
        'witness': 'witness',
        'upgrade_sequence': 'upgrade_sequence'
    }

    def __init__(self, bundle_file_locator=None, health_precheck_type=None, vxrail=None, vcenter=None, witness=None, upgrade_sequence=None):  # noqa: E501
        """HealthPrecheckSpecV1 - a model defined in Swagger"""  # noqa: E501
        self._bundle_file_locator = None
        self._health_precheck_type = None
        self._vxrail = None
        self._vcenter = None
        self._witness = None
        self._upgrade_sequence = None
        self.discriminator = None
        self.bundle_file_locator = bundle_file_locator
        self.health_precheck_type = health_precheck_type
        self.vxrail = vxrail
        self.vcenter = vcenter
        if witness is not None:
            self.witness = witness
        if upgrade_sequence is not None:
            self.upgrade_sequence = upgrade_sequence

    @property
    def bundle_file_locator(self):
        """Gets the bundle_file_locator of this HealthPrecheckSpecV1.  # noqa: E501

        The full path of the single upgrade bundle or first package of a multiple part upgrade bundle  # noqa: E501

        :return: The bundle_file_locator of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: str
        """
        return self._bundle_file_locator

    @bundle_file_locator.setter
    def bundle_file_locator(self, bundle_file_locator):
        """Sets the bundle_file_locator of this HealthPrecheckSpecV1.

        The full path of the single upgrade bundle or first package of a multiple part upgrade bundle  # noqa: E501

        :param bundle_file_locator: The bundle_file_locator of this HealthPrecheckSpecV1.  # noqa: E501
        :type: str
        """
        if bundle_file_locator is None:
            raise ValueError("Invalid value for `bundle_file_locator`, must not be `None`")  # noqa: E501

        self._bundle_file_locator = bundle_file_locator

    @property
    def health_precheck_type(self):
        """Gets the health_precheck_type of this HealthPrecheckSpecV1.  # noqa: E501

        health pre-check type  # noqa: E501

        :return: The health_precheck_type of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: str
        """
        return self._health_precheck_type

    @health_precheck_type.setter
    def health_precheck_type(self, health_precheck_type):
        """Sets the health_precheck_type of this HealthPrecheckSpecV1.

        health pre-check type  # noqa: E501

        :param health_precheck_type: The health_precheck_type of this HealthPrecheckSpecV1.  # noqa: E501
        :type: str
        """
        if health_precheck_type is None:
            raise ValueError("Invalid value for `health_precheck_type`, must not be `None`")  # noqa: E501

        self._health_precheck_type = health_precheck_type

    @property
    def vxrail(self):
        """Gets the vxrail of this HealthPrecheckSpecV1.  # noqa: E501


        :return: The vxrail of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: VxRailManagerSpec
        """
        return self._vxrail

    @vxrail.setter
    def vxrail(self, vxrail):
        """Sets the vxrail of this HealthPrecheckSpecV1.


        :param vxrail: The vxrail of this HealthPrecheckSpecV1.  # noqa: E501
        :type: VxRailManagerSpec
        """
        if vxrail is None:
            raise ValueError("Invalid value for `vxrail`, must not be `None`")  # noqa: E501

        self._vxrail = vxrail

    @property
    def vcenter(self):
        """Gets the vcenter of this HealthPrecheckSpecV1.  # noqa: E501


        :return: The vcenter of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: VcenterEmbeddedPSCSpec
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this HealthPrecheckSpecV1.


        :param vcenter: The vcenter of this HealthPrecheckSpecV1.  # noqa: E501
        :type: VcenterEmbeddedPSCSpec
        """
        if vcenter is None:
            raise ValueError("Invalid value for `vcenter`, must not be `None`")  # noqa: E501

        self._vcenter = vcenter

    @property
    def witness(self):
        """Gets the witness of this HealthPrecheckSpecV1.  # noqa: E501


        :return: The witness of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: WitnessSpec
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this HealthPrecheckSpecV1.


        :param witness: The witness of this HealthPrecheckSpecV1.  # noqa: E501
        :type: WitnessSpec
        """

        self._witness = witness

    @property
    def upgrade_sequence(self):
        """Gets the upgrade_sequence of this HealthPrecheckSpecV1.  # noqa: E501


        :return: The upgrade_sequence of this HealthPrecheckSpecV1.  # noqa: E501
        :rtype: UpgradeSequence
        """
        return self._upgrade_sequence

    @upgrade_sequence.setter
    def upgrade_sequence(self, upgrade_sequence):
        """Sets the upgrade_sequence of this HealthPrecheckSpecV1.


        :param upgrade_sequence: The upgrade_sequence of this HealthPrecheckSpecV1.  # noqa: E501
        :type: UpgradeSequence
        """

        self._upgrade_sequence = upgrade_sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthPrecheckSpecV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthPrecheckSpecV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
