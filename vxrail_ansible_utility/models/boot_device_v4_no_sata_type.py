# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from vxrail_ansible_utility.models.boot_device_v3_no_sata_type import BootDeviceV3NoSataType  # noqa: F401,E501

class BootDeviceV4NoSataType(BootDeviceV3NoSataType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encryption_ability': 'str',
        'encryption_status': 'str',
        'controller_encryption_capability': 'str',
        'controller_encryption_mode': 'str'
    }
    if hasattr(BootDeviceV3NoSataType, "swagger_types"):
        swagger_types.update(BootDeviceV3NoSataType.swagger_types)

    attribute_map = {
        'encryption_ability': 'encryption_ability',
        'encryption_status': 'encryption_status',
        'controller_encryption_capability': 'controller_encryption_capability',
        'controller_encryption_mode': 'controller_encryption_mode'
    }
    if hasattr(BootDeviceV3NoSataType, "attribute_map"):
        attribute_map.update(BootDeviceV3NoSataType.attribute_map)

    def __init__(self, encryption_ability=None, encryption_status=None, controller_encryption_capability=None, controller_encryption_mode=None, *args, **kwargs):  # noqa: E501
        """BootDeviceV4NoSataType - a model defined in Swagger"""  # noqa: E501
        self._encryption_ability = None
        self._encryption_status = None
        self._controller_encryption_capability = None
        self._controller_encryption_mode = None
        self.discriminator = None
        if encryption_ability is not None:
            self.encryption_ability = encryption_ability
        if encryption_status is not None:
            self.encryption_status = encryption_status
        if controller_encryption_capability is not None:
            self.controller_encryption_capability = controller_encryption_capability
        if controller_encryption_mode is not None:
            self.controller_encryption_mode = controller_encryption_mode
        BootDeviceV3NoSataType.__init__(self, *args, **kwargs)

    @property
    def encryption_ability(self):
        """Gets the encryption_ability of this BootDeviceV4NoSataType.  # noqa: E501

        Encryption ability of the boot device  # noqa: E501

        :return: The encryption_ability of this BootDeviceV4NoSataType.  # noqa: E501
        :rtype: str
        """
        return self._encryption_ability

    @encryption_ability.setter
    def encryption_ability(self, encryption_ability):
        """Sets the encryption_ability of this BootDeviceV4NoSataType.

        Encryption ability of the boot device  # noqa: E501

        :param encryption_ability: The encryption_ability of this BootDeviceV4NoSataType.  # noqa: E501
        :type: str
        """

        self._encryption_ability = encryption_ability

    @property
    def encryption_status(self):
        """Gets the encryption_status of this BootDeviceV4NoSataType.  # noqa: E501

        Encryption status of the boot device  # noqa: E501

        :return: The encryption_status of this BootDeviceV4NoSataType.  # noqa: E501
        :rtype: str
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this BootDeviceV4NoSataType.

        Encryption status of the boot device  # noqa: E501

        :param encryption_status: The encryption_status of this BootDeviceV4NoSataType.  # noqa: E501
        :type: str
        """

        self._encryption_status = encryption_status

    @property
    def controller_encryption_capability(self):
        """Gets the controller_encryption_capability of this BootDeviceV4NoSataType.  # noqa: E501

        Controller encryption capability of the boot device  # noqa: E501

        :return: The controller_encryption_capability of this BootDeviceV4NoSataType.  # noqa: E501
        :rtype: str
        """
        return self._controller_encryption_capability

    @controller_encryption_capability.setter
    def controller_encryption_capability(self, controller_encryption_capability):
        """Sets the controller_encryption_capability of this BootDeviceV4NoSataType.

        Controller encryption capability of the boot device  # noqa: E501

        :param controller_encryption_capability: The controller_encryption_capability of this BootDeviceV4NoSataType.  # noqa: E501
        :type: str
        """

        self._controller_encryption_capability = controller_encryption_capability

    @property
    def controller_encryption_mode(self):
        """Gets the controller_encryption_mode of this BootDeviceV4NoSataType.  # noqa: E501

        Controller encryption mode of the boot device  # noqa: E501

        :return: The controller_encryption_mode of this BootDeviceV4NoSataType.  # noqa: E501
        :rtype: str
        """
        return self._controller_encryption_mode

    @controller_encryption_mode.setter
    def controller_encryption_mode(self, controller_encryption_mode):
        """Sets the controller_encryption_mode of this BootDeviceV4NoSataType.

        Controller encryption mode of the boot device  # noqa: E501

        :param controller_encryption_mode: The controller_encryption_mode of this BootDeviceV4NoSataType.  # noqa: E501
        :type: str
        """

        self._controller_encryption_mode = controller_encryption_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BootDeviceV4NoSataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BootDeviceV4NoSataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
