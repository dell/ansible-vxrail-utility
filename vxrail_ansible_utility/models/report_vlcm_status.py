# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportVlcmStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlcm_enable': 'bool',
        'vlcm_policy': 'ReportVlcmStatusVlcmPolicy',
        'total_hosts_count': 'int',
        'enable_quickboot_hosts_count': 'int'
    }

    attribute_map = {
        'vlcm_enable': 'vlcm_enable',
        'vlcm_policy': 'vlcm_policy',
        'total_hosts_count': 'total_hosts_count',
        'enable_quickboot_hosts_count': 'enable_quickboot_hosts_count'
    }

    def __init__(self, vlcm_enable=None, vlcm_policy=None, total_hosts_count=None, enable_quickboot_hosts_count=None):  # noqa: E501
        """ReportVlcmStatus - a model defined in Swagger"""  # noqa: E501
        self._vlcm_enable = None
        self._vlcm_policy = None
        self._total_hosts_count = None
        self._enable_quickboot_hosts_count = None
        self.discriminator = None
        if vlcm_enable is not None:
            self.vlcm_enable = vlcm_enable
        if vlcm_policy is not None:
            self.vlcm_policy = vlcm_policy
        if total_hosts_count is not None:
            self.total_hosts_count = total_hosts_count
        if enable_quickboot_hosts_count is not None:
            self.enable_quickboot_hosts_count = enable_quickboot_hosts_count

    @property
    def vlcm_enable(self):
        """Gets the vlcm_enable of this ReportVlcmStatus.  # noqa: E501


        :return: The vlcm_enable of this ReportVlcmStatus.  # noqa: E501
        :rtype: bool
        """
        return self._vlcm_enable

    @vlcm_enable.setter
    def vlcm_enable(self, vlcm_enable):
        """Sets the vlcm_enable of this ReportVlcmStatus.


        :param vlcm_enable: The vlcm_enable of this ReportVlcmStatus.  # noqa: E501
        :type: bool
        """

        self._vlcm_enable = vlcm_enable

    @property
    def vlcm_policy(self):
        """Gets the vlcm_policy of this ReportVlcmStatus.  # noqa: E501


        :return: The vlcm_policy of this ReportVlcmStatus.  # noqa: E501
        :rtype: ReportVlcmStatusVlcmPolicy
        """
        return self._vlcm_policy

    @vlcm_policy.setter
    def vlcm_policy(self, vlcm_policy):
        """Sets the vlcm_policy of this ReportVlcmStatus.


        :param vlcm_policy: The vlcm_policy of this ReportVlcmStatus.  # noqa: E501
        :type: ReportVlcmStatusVlcmPolicy
        """

        self._vlcm_policy = vlcm_policy

    @property
    def total_hosts_count(self):
        """Gets the total_hosts_count of this ReportVlcmStatus.  # noqa: E501


        :return: The total_hosts_count of this ReportVlcmStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_hosts_count

    @total_hosts_count.setter
    def total_hosts_count(self, total_hosts_count):
        """Sets the total_hosts_count of this ReportVlcmStatus.


        :param total_hosts_count: The total_hosts_count of this ReportVlcmStatus.  # noqa: E501
        :type: int
        """

        self._total_hosts_count = total_hosts_count

    @property
    def enable_quickboot_hosts_count(self):
        """Gets the enable_quickboot_hosts_count of this ReportVlcmStatus.  # noqa: E501


        :return: The enable_quickboot_hosts_count of this ReportVlcmStatus.  # noqa: E501
        :rtype: int
        """
        return self._enable_quickboot_hosts_count

    @enable_quickboot_hosts_count.setter
    def enable_quickboot_hosts_count(self, enable_quickboot_hosts_count):
        """Sets the enable_quickboot_hosts_count of this ReportVlcmStatus.


        :param enable_quickboot_hosts_count: The enable_quickboot_hosts_count of this ReportVlcmStatus.  # noqa: E501
        :type: int
        """

        self._enable_quickboot_hosts_count = enable_quickboot_hosts_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportVlcmStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportVlcmStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
