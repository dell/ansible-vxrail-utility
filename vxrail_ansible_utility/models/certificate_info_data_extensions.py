# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CertificateInfoDataExtensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_usage': 'str',
        'subject_alternative_name': 'str',
        'subject_key_identifier': 'str',
        'authority_key_identifier': 'str'
    }

    attribute_map = {
        'key_usage': 'key_usage',
        'subject_alternative_name': 'subject_alternative_name',
        'subject_key_identifier': 'subject_key_identifier',
        'authority_key_identifier': 'authority_key_identifier'
    }

    def __init__(self, key_usage=None, subject_alternative_name=None, subject_key_identifier=None, authority_key_identifier=None):  # noqa: E501
        """CertificateInfoDataExtensions - a model defined in Swagger"""  # noqa: E501
        self._key_usage = None
        self._subject_alternative_name = None
        self._subject_key_identifier = None
        self._authority_key_identifier = None
        self.discriminator = None
        if key_usage is not None:
            self.key_usage = key_usage
        if subject_alternative_name is not None:
            self.subject_alternative_name = subject_alternative_name
        if subject_key_identifier is not None:
            self.subject_key_identifier = subject_key_identifier
        if authority_key_identifier is not None:
            self.authority_key_identifier = authority_key_identifier

    @property
    def key_usage(self):
        """Gets the key_usage of this CertificateInfoDataExtensions.  # noqa: E501

        key usage  # noqa: E501

        :return: The key_usage of this CertificateInfoDataExtensions.  # noqa: E501
        :rtype: str
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage):
        """Sets the key_usage of this CertificateInfoDataExtensions.

        key usage  # noqa: E501

        :param key_usage: The key_usage of this CertificateInfoDataExtensions.  # noqa: E501
        :type: str
        """

        self._key_usage = key_usage

    @property
    def subject_alternative_name(self):
        """Gets the subject_alternative_name of this CertificateInfoDataExtensions.  # noqa: E501

        subject alternative name  # noqa: E501

        :return: The subject_alternative_name of this CertificateInfoDataExtensions.  # noqa: E501
        :rtype: str
        """
        return self._subject_alternative_name

    @subject_alternative_name.setter
    def subject_alternative_name(self, subject_alternative_name):
        """Sets the subject_alternative_name of this CertificateInfoDataExtensions.

        subject alternative name  # noqa: E501

        :param subject_alternative_name: The subject_alternative_name of this CertificateInfoDataExtensions.  # noqa: E501
        :type: str
        """

        self._subject_alternative_name = subject_alternative_name

    @property
    def subject_key_identifier(self):
        """Gets the subject_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501

        subject key identifier  # noqa: E501

        :return: The subject_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501
        :rtype: str
        """
        return self._subject_key_identifier

    @subject_key_identifier.setter
    def subject_key_identifier(self, subject_key_identifier):
        """Sets the subject_key_identifier of this CertificateInfoDataExtensions.

        subject key identifier  # noqa: E501

        :param subject_key_identifier: The subject_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501
        :type: str
        """

        self._subject_key_identifier = subject_key_identifier

    @property
    def authority_key_identifier(self):
        """Gets the authority_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501

        authority key identifier  # noqa: E501

        :return: The authority_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501
        :rtype: str
        """
        return self._authority_key_identifier

    @authority_key_identifier.setter
    def authority_key_identifier(self, authority_key_identifier):
        """Sets the authority_key_identifier of this CertificateInfoDataExtensions.

        authority key identifier  # noqa: E501

        :param authority_key_identifier: The authority_key_identifier of this CertificateInfoDataExtensions.  # noqa: E501
        :type: str
        """

        self._authority_key_identifier = authority_key_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateInfoDataExtensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateInfoDataExtensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
