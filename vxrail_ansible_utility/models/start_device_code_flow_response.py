# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StartDeviceCodeFlowResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_code': 'str',
        'verification_uri': 'str',
        'verification_uri_complete': 'str',
        'expires_in': 'int'
    }

    attribute_map = {
        'user_code': 'user_code',
        'verification_uri': 'verification_uri',
        'verification_uri_complete': 'verification_uri_complete',
        'expires_in': 'expires_in'
    }

    def __init__(self, user_code=None, verification_uri=None, verification_uri_complete=None, expires_in=None):  # noqa: E501
        """StartDeviceCodeFlowResponse - a model defined in Swagger"""  # noqa: E501
        self._user_code = None
        self._verification_uri = None
        self._verification_uri_complete = None
        self._expires_in = None
        self.discriminator = None
        if user_code is not None:
            self.user_code = user_code
        if verification_uri is not None:
            self.verification_uri = verification_uri
        if verification_uri_complete is not None:
            self.verification_uri_complete = verification_uri_complete
        if expires_in is not None:
            self.expires_in = expires_in

    @property
    def user_code(self):
        """Gets the user_code of this StartDeviceCodeFlowResponse.  # noqa: E501

        user code. This is the code the user needs to enter after authentication  # noqa: E501

        :return: The user_code of this StartDeviceCodeFlowResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_code

    @user_code.setter
    def user_code(self, user_code):
        """Sets the user_code of this StartDeviceCodeFlowResponse.

        user code. This is the code the user needs to enter after authentication  # noqa: E501

        :param user_code: The user_code of this StartDeviceCodeFlowResponse.  # noqa: E501
        :type: str
        """

        self._user_code = user_code

    @property
    def verification_uri(self):
        """Gets the verification_uri of this StartDeviceCodeFlowResponse.  # noqa: E501

        verification_uri. URI for user authentication.  # noqa: E501

        :return: The verification_uri of this StartDeviceCodeFlowResponse.  # noqa: E501
        :rtype: str
        """
        return self._verification_uri

    @verification_uri.setter
    def verification_uri(self, verification_uri):
        """Sets the verification_uri of this StartDeviceCodeFlowResponse.

        verification_uri. URI for user authentication.  # noqa: E501

        :param verification_uri: The verification_uri of this StartDeviceCodeFlowResponse.  # noqa: E501
        :type: str
        """

        self._verification_uri = verification_uri

    @property
    def verification_uri_complete(self):
        """Gets the verification_uri_complete of this StartDeviceCodeFlowResponse.  # noqa: E501

        verification_uri_complete_value. This URL is the combination of verification URI and user code.  # noqa: E501

        :return: The verification_uri_complete of this StartDeviceCodeFlowResponse.  # noqa: E501
        :rtype: str
        """
        return self._verification_uri_complete

    @verification_uri_complete.setter
    def verification_uri_complete(self, verification_uri_complete):
        """Sets the verification_uri_complete of this StartDeviceCodeFlowResponse.

        verification_uri_complete_value. This URL is the combination of verification URI and user code.  # noqa: E501

        :param verification_uri_complete: The verification_uri_complete of this StartDeviceCodeFlowResponse.  # noqa: E501
        :type: str
        """

        self._verification_uri_complete = verification_uri_complete

    @property
    def expires_in(self):
        """Gets the expires_in of this StartDeviceCodeFlowResponse.  # noqa: E501

        When the return verification URL and user code expire, the value is provided in seconds.  # noqa: E501

        :return: The expires_in of this StartDeviceCodeFlowResponse.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this StartDeviceCodeFlowResponse.

        When the return verification URL and user code expire, the value is provided in seconds.  # noqa: E501

        :param expires_in: The expires_in of this StartDeviceCodeFlowResponse.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StartDeviceCodeFlowResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartDeviceCodeFlowResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
