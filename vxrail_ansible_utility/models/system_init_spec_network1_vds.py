# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemInitSpecNetwork1Vds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vds_name': 'str',
        'mtu': 'int',
        'nic_mappings': 'list[SystemInitSpecNetwork1NicMappings]',
        'portgroups': 'list[SystemInitSpecNetwork1Portgroups]'
    }

    attribute_map = {
        'vds_name': 'vds_name',
        'mtu': 'mtu',
        'nic_mappings': 'nic_mappings',
        'portgroups': 'portgroups'
    }

    def __init__(self, vds_name=None, mtu=None, nic_mappings=None, portgroups=None):  # noqa: E501
        """SystemInitSpecNetwork1Vds - a model defined in Swagger"""  # noqa: E501
        self._vds_name = None
        self._mtu = None
        self._nic_mappings = None
        self._portgroups = None
        self.discriminator = None
        if vds_name is not None:
            self.vds_name = vds_name
        if mtu is not None:
            self.mtu = mtu
        if nic_mappings is not None:
            self.nic_mappings = nic_mappings
        if portgroups is not None:
            self.portgroups = portgroups

    @property
    def vds_name(self):
        """Gets the vds_name of this SystemInitSpecNetwork1Vds.  # noqa: E501


        :return: The vds_name of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :rtype: str
        """
        return self._vds_name

    @vds_name.setter
    def vds_name(self, vds_name):
        """Sets the vds_name of this SystemInitSpecNetwork1Vds.


        :param vds_name: The vds_name of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :type: str
        """

        self._vds_name = vds_name

    @property
    def mtu(self):
        """Gets the mtu of this SystemInitSpecNetwork1Vds.  # noqa: E501


        :return: The mtu of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this SystemInitSpecNetwork1Vds.


        :param mtu: The mtu of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def nic_mappings(self):
        """Gets the nic_mappings of this SystemInitSpecNetwork1Vds.  # noqa: E501


        :return: The nic_mappings of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :rtype: list[SystemInitSpecNetwork1NicMappings]
        """
        return self._nic_mappings

    @nic_mappings.setter
    def nic_mappings(self, nic_mappings):
        """Sets the nic_mappings of this SystemInitSpecNetwork1Vds.


        :param nic_mappings: The nic_mappings of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :type: list[SystemInitSpecNetwork1NicMappings]
        """

        self._nic_mappings = nic_mappings

    @property
    def portgroups(self):
        """Gets the portgroups of this SystemInitSpecNetwork1Vds.  # noqa: E501


        :return: The portgroups of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :rtype: list[SystemInitSpecNetwork1Portgroups]
        """
        return self._portgroups

    @portgroups.setter
    def portgroups(self, portgroups):
        """Sets the portgroups of this SystemInitSpecNetwork1Vds.


        :param portgroups: The portgroups of this SystemInitSpecNetwork1Vds.  # noqa: E501
        :type: list[SystemInitSpecNetwork1Portgroups]
        """

        self._portgroups = portgroups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitSpecNetwork1Vds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitSpecNetwork1Vds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
