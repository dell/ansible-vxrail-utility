# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemInitSpecV3Network1Portgroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'vlan_id': 'int',
        'uplinks': 'list[str]',
        'lags': 'list[str]',
        'failover_order': 'SystemInitSpecV3Network1FailoverOrder'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'vlan_id': 'vlan_id',
        'uplinks': 'uplinks',
        'lags': 'lags',
        'failover_order': 'failover_order'
    }

    def __init__(self, name=None, type=None, vlan_id=None, uplinks=None, lags=None, failover_order=None):  # noqa: E501
        """SystemInitSpecV3Network1Portgroups - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._vlan_id = None
        self._uplinks = None
        self._lags = None
        self._failover_order = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if uplinks is not None:
            self.uplinks = uplinks
        if lags is not None:
            self.lags = lags
        if failover_order is not None:
            self.failover_order = failover_order

    @property
    def name(self):
        """Gets the name of this SystemInitSpecV3Network1Portgroups.  # noqa: E501

        Name of the port group. This property is only for a ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile.  # noqa: E501

        :return: The name of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInitSpecV3Network1Portgroups.

        Name of the port group. This property is only for a ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile.  # noqa: E501

        :param name: The name of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this SystemInitSpecV3Network1Portgroups.  # noqa: E501

        The type of portgroup. The VXRAILDISCOVERY option is only used for ADVANCED_VXRAIL_SUPPLIED_VDS or ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile.  # noqa: E501

        :return: The type of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInitSpecV3Network1Portgroups.

        The type of portgroup. The VXRAILDISCOVERY option is only used for ADVANCED_VXRAIL_SUPPLIED_VDS or ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile.  # noqa: E501

        :param type: The type of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: str
        """
        allowed_values = ["VSAN", "VMOTION", "MANAGEMENT", "WITNESS", "VXRAILSYSTEMVM", "CUSTOMERVM", "VXRAILDISCOVERY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this SystemInitSpecV3Network1Portgroups.  # noqa: E501

        The VLAN ID of the port group. If you use an ADVANCED_VXRAIL_SUPPLIED_VDS or ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile and sfs_disabled = false , the VLAN ID for a VXRAILDISCOVERY portgroup type must be set to 3939.  # noqa: E501

        :return: The vlan_id of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this SystemInitSpecV3Network1Portgroups.

        The VLAN ID of the port group. If you use an ADVANCED_VXRAIL_SUPPLIED_VDS or ADVANCED_CUSTOMER_SUPPLIED_VDS nic_profile and sfs_disabled = false , the VLAN ID for a VXRAILDISCOVERY portgroup type must be set to 3939.  # noqa: E501

        :param vlan_id: The vlan_id of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def uplinks(self):
        """Gets the uplinks of this SystemInitSpecV3Network1Portgroups.  # noqa: E501

        A list of uplinks. This property is only used when nic_profile is ADVANCED_CUSTOMER_SUPPLIED_VDS and sfs_disabled is false  # noqa: E501

        :return: The uplinks of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._uplinks

    @uplinks.setter
    def uplinks(self, uplinks):
        """Sets the uplinks of this SystemInitSpecV3Network1Portgroups.

        A list of uplinks. This property is only used when nic_profile is ADVANCED_CUSTOMER_SUPPLIED_VDS and sfs_disabled is false  # noqa: E501

        :param uplinks: The uplinks of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: list[str]
        """

        self._uplinks = uplinks

    @property
    def lags(self):
        """Gets the lags of this SystemInitSpecV3Network1Portgroups.  # noqa: E501

        A list of link aggregation groups (LAG). This property is only used when nic_profile is ADVANCED_CUSTOMER_SUPPLIED_VDS and LAG is used on the portgroup.  # noqa: E501

        :return: The lags of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._lags

    @lags.setter
    def lags(self, lags):
        """Sets the lags of this SystemInitSpecV3Network1Portgroups.

        A list of link aggregation groups (LAG). This property is only used when nic_profile is ADVANCED_CUSTOMER_SUPPLIED_VDS and LAG is used on the portgroup.  # noqa: E501

        :param lags: The lags of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: list[str]
        """

        self._lags = lags

    @property
    def failover_order(self):
        """Gets the failover_order of this SystemInitSpecV3Network1Portgroups.  # noqa: E501


        :return: The failover_order of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :rtype: SystemInitSpecV3Network1FailoverOrder
        """
        return self._failover_order

    @failover_order.setter
    def failover_order(self, failover_order):
        """Sets the failover_order of this SystemInitSpecV3Network1Portgroups.


        :param failover_order: The failover_order of this SystemInitSpecV3Network1Portgroups.  # noqa: E501
        :type: SystemInitSpecV3Network1FailoverOrder
        """

        self._failover_order = failover_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitSpecV3Network1Portgroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitSpecV3Network1Portgroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
