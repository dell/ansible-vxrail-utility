# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportPrecheckDataContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_severity': 'str',
        'radar_version': 'str',
        'vxrail_version': 'str',
        'vcenter_version': 'str',
        'execution_mode': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'status': 'str',
        'results': 'ReportPrecheckDataContentResults'
    }

    attribute_map = {
        'total_severity': 'total_severity',
        'radar_version': 'radar_version',
        'vxrail_version': 'vxrail_version',
        'vcenter_version': 'vcenter_version',
        'execution_mode': 'execution_mode',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'status': 'status',
        'results': 'results'
    }

    def __init__(self, total_severity=None, radar_version=None, vxrail_version=None, vcenter_version=None, execution_mode=None, start_time=None, end_time=None, status=None, results=None):  # noqa: E501
        """ReportPrecheckDataContent - a model defined in Swagger"""  # noqa: E501
        self._total_severity = None
        self._radar_version = None
        self._vxrail_version = None
        self._vcenter_version = None
        self._execution_mode = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._results = None
        self.discriminator = None
        if total_severity is not None:
            self.total_severity = total_severity
        if radar_version is not None:
            self.radar_version = radar_version
        if vxrail_version is not None:
            self.vxrail_version = vxrail_version
        if vcenter_version is not None:
            self.vcenter_version = vcenter_version
        if execution_mode is not None:
            self.execution_mode = execution_mode
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status
        if results is not None:
            self.results = results

    @property
    def total_severity(self):
        """Gets the total_severity of this ReportPrecheckDataContent.  # noqa: E501


        :return: The total_severity of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._total_severity

    @total_severity.setter
    def total_severity(self, total_severity):
        """Sets the total_severity of this ReportPrecheckDataContent.


        :param total_severity: The total_severity of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._total_severity = total_severity

    @property
    def radar_version(self):
        """Gets the radar_version of this ReportPrecheckDataContent.  # noqa: E501


        :return: The radar_version of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._radar_version

    @radar_version.setter
    def radar_version(self, radar_version):
        """Sets the radar_version of this ReportPrecheckDataContent.


        :param radar_version: The radar_version of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._radar_version = radar_version

    @property
    def vxrail_version(self):
        """Gets the vxrail_version of this ReportPrecheckDataContent.  # noqa: E501


        :return: The vxrail_version of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._vxrail_version

    @vxrail_version.setter
    def vxrail_version(self, vxrail_version):
        """Sets the vxrail_version of this ReportPrecheckDataContent.


        :param vxrail_version: The vxrail_version of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._vxrail_version = vxrail_version

    @property
    def vcenter_version(self):
        """Gets the vcenter_version of this ReportPrecheckDataContent.  # noqa: E501


        :return: The vcenter_version of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._vcenter_version

    @vcenter_version.setter
    def vcenter_version(self, vcenter_version):
        """Sets the vcenter_version of this ReportPrecheckDataContent.


        :param vcenter_version: The vcenter_version of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._vcenter_version = vcenter_version

    @property
    def execution_mode(self):
        """Gets the execution_mode of this ReportPrecheckDataContent.  # noqa: E501


        :return: The execution_mode of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this ReportPrecheckDataContent.


        :param execution_mode: The execution_mode of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._execution_mode = execution_mode

    @property
    def start_time(self):
        """Gets the start_time of this ReportPrecheckDataContent.  # noqa: E501


        :return: The start_time of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReportPrecheckDataContent.


        :param start_time: The start_time of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ReportPrecheckDataContent.  # noqa: E501


        :return: The end_time of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReportPrecheckDataContent.


        :param end_time: The end_time of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this ReportPrecheckDataContent.  # noqa: E501


        :return: The status of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportPrecheckDataContent.


        :param status: The status of this ReportPrecheckDataContent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def results(self):
        """Gets the results of this ReportPrecheckDataContent.  # noqa: E501


        :return: The results of this ReportPrecheckDataContent.  # noqa: E501
        :rtype: ReportPrecheckDataContentResults
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ReportPrecheckDataContent.


        :param results: The results of this ReportPrecheckDataContent.  # noqa: E501
        :type: ReportPrecheckDataContentResults
        """

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPrecheckDataContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPrecheckDataContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
