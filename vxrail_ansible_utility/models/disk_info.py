# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiskInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sn': 'str',
        'guid': 'str',
        'disk_type': 'str',
        'protocol': 'str',
        'enclosure': 'int',
        'bay': 'int',
        'slot': 'int',
        'missing': 'bool',
        'capacity': 'str'
    }

    attribute_map = {
        'id': 'id',
        'sn': 'sn',
        'guid': 'guid',
        'disk_type': 'disk_type',
        'protocol': 'protocol',
        'enclosure': 'enclosure',
        'bay': 'bay',
        'slot': 'slot',
        'missing': 'missing',
        'capacity': 'capacity'
    }

    def __init__(self, id=None, sn=None, guid=None, disk_type=None, protocol=None, enclosure=None, bay=None, slot=None, missing=None, capacity=None):  # noqa: E501
        """DiskInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sn = None
        self._guid = None
        self._disk_type = None
        self._protocol = None
        self._enclosure = None
        self._bay = None
        self._slot = None
        self._missing = None
        self._capacity = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sn is not None:
            self.sn = sn
        if guid is not None:
            self.guid = guid
        if disk_type is not None:
            self.disk_type = disk_type
        if protocol is not None:
            self.protocol = protocol
        if enclosure is not None:
            self.enclosure = enclosure
        if bay is not None:
            self.bay = bay
        if slot is not None:
            self.slot = slot
        if missing is not None:
            self.missing = missing
        if capacity is not None:
            self.capacity = capacity

    @property
    def id(self):
        """Gets the id of this DiskInfo.  # noqa: E501

        ID of the disk  # noqa: E501

        :return: The id of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiskInfo.

        ID of the disk  # noqa: E501

        :param id: The id of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sn(self):
        """Gets the sn of this DiskInfo.  # noqa: E501

        Serial number of the disk  # noqa: E501

        :return: The sn of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this DiskInfo.

        Serial number of the disk  # noqa: E501

        :param sn: The sn of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def guid(self):
        """Gets the guid of this DiskInfo.  # noqa: E501

        disk guid  # noqa: E501

        :return: The guid of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this DiskInfo.

        disk guid  # noqa: E501

        :param guid: The guid of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def disk_type(self):
        """Gets the disk_type of this DiskInfo.  # noqa: E501

        Type of disk drive  # noqa: E501

        :return: The disk_type of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this DiskInfo.

        Type of disk drive  # noqa: E501

        :param disk_type: The disk_type of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._disk_type = disk_type

    @property
    def protocol(self):
        """Gets the protocol of this DiskInfo.  # noqa: E501

        Type of transport protocol  # noqa: E501

        :return: The protocol of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DiskInfo.

        Type of transport protocol  # noqa: E501

        :param protocol: The protocol of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def enclosure(self):
        """Gets the enclosure of this DiskInfo.  # noqa: E501

        Enclosure where the disk is installed  # noqa: E501

        :return: The enclosure of this DiskInfo.  # noqa: E501
        :rtype: int
        """
        return self._enclosure

    @enclosure.setter
    def enclosure(self, enclosure):
        """Sets the enclosure of this DiskInfo.

        Enclosure where the disk is installed  # noqa: E501

        :param enclosure: The enclosure of this DiskInfo.  # noqa: E501
        :type: int
        """

        self._enclosure = enclosure

    @property
    def bay(self):
        """Gets the bay of this DiskInfo.  # noqa: E501

        Bay number of the disk  # noqa: E501

        :return: The bay of this DiskInfo.  # noqa: E501
        :rtype: int
        """
        return self._bay

    @bay.setter
    def bay(self, bay):
        """Sets the bay of this DiskInfo.

        Bay number of the disk  # noqa: E501

        :param bay: The bay of this DiskInfo.  # noqa: E501
        :type: int
        """

        self._bay = bay

    @property
    def slot(self):
        """Gets the slot of this DiskInfo.  # noqa: E501

        Slot where the disk is installed  # noqa: E501

        :return: The slot of this DiskInfo.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this DiskInfo.

        Slot where the disk is installed  # noqa: E501

        :param slot: The slot of this DiskInfo.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def missing(self):
        """Gets the missing of this DiskInfo.  # noqa: E501

        Whether the disk health status is critical. Supported values are false (not critical) and true (critical)  # noqa: E501

        :return: The missing of this DiskInfo.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this DiskInfo.

        Whether the disk health status is critical. Supported values are false (not critical) and true (critical)  # noqa: E501

        :param missing: The missing of this DiskInfo.  # noqa: E501
        :type: bool
        """

        self._missing = missing

    @property
    def capacity(self):
        """Gets the capacity of this DiskInfo.  # noqa: E501

        Capacity of the disk  # noqa: E501

        :return: The capacity of this DiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DiskInfo.

        Capacity of the disk  # noqa: E501

        :param capacity: The capacity of this DiskInfo.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
