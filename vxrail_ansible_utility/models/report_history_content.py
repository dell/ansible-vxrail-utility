# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportHistoryContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'current_state': 'str',
        'desired_state': 'str',
        'report': 'ReportContent'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'current_state': 'current_state',
        'desired_state': 'desired_state',
        'report': 'report'
    }

    def __init__(self, id=None, created_at=None, current_state=None, desired_state=None, report=None):  # noqa: E501
        """ReportHistoryContent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._current_state = None
        self._desired_state = None
        self._report = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if current_state is not None:
            self.current_state = current_state
        if desired_state is not None:
            self.desired_state = desired_state
        if report is not None:
            self.report = report

    @property
    def id(self):
        """Gets the id of this ReportHistoryContent.  # noqa: E501


        :return: The id of this ReportHistoryContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportHistoryContent.


        :param id: The id of this ReportHistoryContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ReportHistoryContent.  # noqa: E501


        :return: The created_at of this ReportHistoryContent.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportHistoryContent.


        :param created_at: The created_at of this ReportHistoryContent.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def current_state(self):
        """Gets the current_state of this ReportHistoryContent.  # noqa: E501


        :return: The current_state of this ReportHistoryContent.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this ReportHistoryContent.


        :param current_state: The current_state of this ReportHistoryContent.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def desired_state(self):
        """Gets the desired_state of this ReportHistoryContent.  # noqa: E501


        :return: The desired_state of this ReportHistoryContent.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this ReportHistoryContent.


        :param desired_state: The desired_state of this ReportHistoryContent.  # noqa: E501
        :type: str
        """

        self._desired_state = desired_state

    @property
    def report(self):
        """Gets the report of this ReportHistoryContent.  # noqa: E501


        :return: The report of this ReportHistoryContent.  # noqa: E501
        :rtype: ReportContent
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this ReportHistoryContent.


        :param report: The report of this ReportHistoryContent.  # noqa: E501
        :type: ReportContent
        """

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportHistoryContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportHistoryContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
