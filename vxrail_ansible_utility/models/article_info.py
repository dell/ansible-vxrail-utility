# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArticleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'url': 'str',
        'author': 'str',
        '_date': 'int',
        'products': 'str',
        'audience': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'url': 'url',
        'author': 'author',
        '_date': 'date',
        'products': 'products',
        'audience': 'audience'
    }

    def __init__(self, id=None, title=None, url=None, author=None, _date=None, products=None, audience=None):  # noqa: E501
        """ArticleInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._url = None
        self._author = None
        self.__date = None
        self._products = None
        self._audience = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.url = url
        self.author = author
        self._date = _date
        if products is not None:
            self.products = products
        if audience is not None:
            self.audience = audience

    @property
    def id(self):
        """Gets the id of this ArticleInfo.  # noqa: E501

        ID of the article  # noqa: E501

        :return: The id of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArticleInfo.

        ID of the article  # noqa: E501

        :param id: The id of this ArticleInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this ArticleInfo.  # noqa: E501

        Title of the article  # noqa: E501

        :return: The title of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleInfo.

        Title of the article  # noqa: E501

        :param title: The title of this ArticleInfo.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this ArticleInfo.  # noqa: E501

        URL of the article  # noqa: E501

        :return: The url of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticleInfo.

        URL of the article  # noqa: E501

        :param url: The url of this ArticleInfo.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def author(self):
        """Gets the author of this ArticleInfo.  # noqa: E501

        Author of the article  # noqa: E501

        :return: The author of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ArticleInfo.

        Author of the article  # noqa: E501

        :param author: The author of this ArticleInfo.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def _date(self):
        """Gets the _date of this ArticleInfo.  # noqa: E501

        Date that the article was posted  # noqa: E501

        :return: The _date of this ArticleInfo.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ArticleInfo.

        Date that the article was posted  # noqa: E501

        :param _date: The _date of this ArticleInfo.  # noqa: E501
        :type: int
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def products(self):
        """Gets the products of this ArticleInfo.  # noqa: E501

        Products that the article relates to  # noqa: E501

        :return: The products of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ArticleInfo.

        Products that the article relates to  # noqa: E501

        :param products: The products of this ArticleInfo.  # noqa: E501
        :type: str
        """

        self._products = products

    @property
    def audience(self):
        """Gets the audience of this ArticleInfo.  # noqa: E501

        Audience level of the article  # noqa: E501

        :return: The audience of this ArticleInfo.  # noqa: E501
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this ArticleInfo.

        Audience level of the article  # noqa: E501

        :param audience: The audience of this ArticleInfo.  # noqa: E501
        :type: str
        """

        self._audience = audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
