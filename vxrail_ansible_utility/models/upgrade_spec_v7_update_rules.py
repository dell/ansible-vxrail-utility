# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeSpecV7UpdateRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'skip_failed_hosts': 'bool',
        'missing_file_check': 'bool',
        'ecosystem_check': 'LcmEcosystemCheckSpec'
    }

    attribute_map = {
        'skip_failed_hosts': 'skip_failed_hosts',
        'missing_file_check': 'missing_file_check',
        'ecosystem_check': 'ecosystem_check'
    }

    def __init__(self, skip_failed_hosts=None, missing_file_check=None, ecosystem_check=None):  # noqa: E501
        """UpgradeSpecV7UpdateRules - a model defined in Swagger"""  # noqa: E501
        self._skip_failed_hosts = None
        self._missing_file_check = None
        self._ecosystem_check = None
        self.discriminator = None
        if skip_failed_hosts is not None:
            self.skip_failed_hosts = skip_failed_hosts
        if missing_file_check is not None:
            self.missing_file_check = missing_file_check
        if ecosystem_check is not None:
            self.ecosystem_check = ecosystem_check

    @property
    def skip_failed_hosts(self):
        """Gets the skip_failed_hosts of this UpgradeSpecV7UpdateRules.  # noqa: E501


        :return: The skip_failed_hosts of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :rtype: bool
        """
        return self._skip_failed_hosts

    @skip_failed_hosts.setter
    def skip_failed_hosts(self, skip_failed_hosts):
        """Sets the skip_failed_hosts of this UpgradeSpecV7UpdateRules.


        :param skip_failed_hosts: The skip_failed_hosts of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :type: bool
        """

        self._skip_failed_hosts = skip_failed_hosts

    @property
    def missing_file_check(self):
        """Gets the missing_file_check of this UpgradeSpecV7UpdateRules.  # noqa: E501


        :return: The missing_file_check of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :rtype: bool
        """
        return self._missing_file_check

    @missing_file_check.setter
    def missing_file_check(self, missing_file_check):
        """Sets the missing_file_check of this UpgradeSpecV7UpdateRules.


        :param missing_file_check: The missing_file_check of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :type: bool
        """

        self._missing_file_check = missing_file_check

    @property
    def ecosystem_check(self):
        """Gets the ecosystem_check of this UpgradeSpecV7UpdateRules.  # noqa: E501


        :return: The ecosystem_check of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :rtype: LcmEcosystemCheckSpec
        """
        return self._ecosystem_check

    @ecosystem_check.setter
    def ecosystem_check(self, ecosystem_check):
        """Sets the ecosystem_check of this UpgradeSpecV7UpdateRules.


        :param ecosystem_check: The ecosystem_check of this UpgradeSpecV7UpdateRules.  # noqa: E501
        :type: LcmEcosystemCheckSpec
        """

        self._ecosystem_check = ecosystem_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeSpecV7UpdateRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeSpecV7UpdateRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
