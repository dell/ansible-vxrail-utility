# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ESAConfigSpecV7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kms_provider_type': 'str',
        'kms_provider_name': 'str',
        'standard_key_provider': 'list[ESAConfigSpecV7StandardKeyProvider]',
        'proxy_configuration': 'ESAConfigSpecV7ProxyConfiguration',
        'password_protection': 'ESAConfigSpecV7PasswordProtection',
        'server_certificate': 'list[str]',
        'client_cert': 'ESAConfigSpecV7ClientCert',
        'use_nkp_only_on_tpm_protected_host': 'bool'
    }

    attribute_map = {
        'kms_provider_type': 'kms_provider_type',
        'kms_provider_name': 'kms_provider_name',
        'standard_key_provider': 'standard_key_provider',
        'proxy_configuration': 'proxy_configuration',
        'password_protection': 'password_protection',
        'server_certificate': 'server_certificate',
        'client_cert': 'client_cert',
        'use_nkp_only_on_tpm_protected_host': 'use_nkp_only_on_tpm_protected_host'
    }

    def __init__(self, kms_provider_type=None, kms_provider_name=None, standard_key_provider=None, proxy_configuration=None, password_protection=None, server_certificate=None, client_cert=None, use_nkp_only_on_tpm_protected_host=None):  # noqa: E501
        """ESAConfigSpecV7 - a model defined in Swagger"""  # noqa: E501
        self._kms_provider_type = None
        self._kms_provider_name = None
        self._standard_key_provider = None
        self._proxy_configuration = None
        self._password_protection = None
        self._server_certificate = None
        self._client_cert = None
        self._use_nkp_only_on_tpm_protected_host = None
        self.discriminator = None
        if kms_provider_type is not None:
            self.kms_provider_type = kms_provider_type
        if kms_provider_name is not None:
            self.kms_provider_name = kms_provider_name
        if standard_key_provider is not None:
            self.standard_key_provider = standard_key_provider
        if proxy_configuration is not None:
            self.proxy_configuration = proxy_configuration
        if password_protection is not None:
            self.password_protection = password_protection
        if server_certificate is not None:
            self.server_certificate = server_certificate
        if client_cert is not None:
            self.client_cert = client_cert
        if use_nkp_only_on_tpm_protected_host is not None:
            self.use_nkp_only_on_tpm_protected_host = use_nkp_only_on_tpm_protected_host

    @property
    def kms_provider_type(self):
        """Gets the kms_provider_type of this ESAConfigSpecV7.  # noqa: E501

        The key provider name in VMware vCenter Server.  # noqa: E501

        :return: The kms_provider_type of this ESAConfigSpecV7.  # noqa: E501
        :rtype: str
        """
        return self._kms_provider_type

    @kms_provider_type.setter
    def kms_provider_type(self, kms_provider_type):
        """Sets the kms_provider_type of this ESAConfigSpecV7.

        The key provider name in VMware vCenter Server.  # noqa: E501

        :param kms_provider_type: The kms_provider_type of this ESAConfigSpecV7.  # noqa: E501
        :type: str
        """
        allowed_values = ["NKP", "STANDARD_KMS"]  # noqa: E501
        if kms_provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `kms_provider_type` ({0}), must be one of {1}"  # noqa: E501
                .format(kms_provider_type, allowed_values)
            )

        self._kms_provider_type = kms_provider_type

    @property
    def kms_provider_name(self):
        """Gets the kms_provider_name of this ESAConfigSpecV7.  # noqa: E501


        :return: The kms_provider_name of this ESAConfigSpecV7.  # noqa: E501
        :rtype: str
        """
        return self._kms_provider_name

    @kms_provider_name.setter
    def kms_provider_name(self, kms_provider_name):
        """Sets the kms_provider_name of this ESAConfigSpecV7.


        :param kms_provider_name: The kms_provider_name of this ESAConfigSpecV7.  # noqa: E501
        :type: str
        """

        self._kms_provider_name = kms_provider_name

    @property
    def standard_key_provider(self):
        """Gets the standard_key_provider of this ESAConfigSpecV7.  # noqa: E501


        :return: The standard_key_provider of this ESAConfigSpecV7.  # noqa: E501
        :rtype: list[ESAConfigSpecV7StandardKeyProvider]
        """
        return self._standard_key_provider

    @standard_key_provider.setter
    def standard_key_provider(self, standard_key_provider):
        """Sets the standard_key_provider of this ESAConfigSpecV7.


        :param standard_key_provider: The standard_key_provider of this ESAConfigSpecV7.  # noqa: E501
        :type: list[ESAConfigSpecV7StandardKeyProvider]
        """

        self._standard_key_provider = standard_key_provider

    @property
    def proxy_configuration(self):
        """Gets the proxy_configuration of this ESAConfigSpecV7.  # noqa: E501


        :return: The proxy_configuration of this ESAConfigSpecV7.  # noqa: E501
        :rtype: ESAConfigSpecV7ProxyConfiguration
        """
        return self._proxy_configuration

    @proxy_configuration.setter
    def proxy_configuration(self, proxy_configuration):
        """Sets the proxy_configuration of this ESAConfigSpecV7.


        :param proxy_configuration: The proxy_configuration of this ESAConfigSpecV7.  # noqa: E501
        :type: ESAConfigSpecV7ProxyConfiguration
        """

        self._proxy_configuration = proxy_configuration

    @property
    def password_protection(self):
        """Gets the password_protection of this ESAConfigSpecV7.  # noqa: E501


        :return: The password_protection of this ESAConfigSpecV7.  # noqa: E501
        :rtype: ESAConfigSpecV7PasswordProtection
        """
        return self._password_protection

    @password_protection.setter
    def password_protection(self, password_protection):
        """Sets the password_protection of this ESAConfigSpecV7.


        :param password_protection: The password_protection of this ESAConfigSpecV7.  # noqa: E501
        :type: ESAConfigSpecV7PasswordProtection
        """

        self._password_protection = password_protection

    @property
    def server_certificate(self):
        """Gets the server_certificate of this ESAConfigSpecV7.  # noqa: E501

        The KMS server certificate chain  # noqa: E501

        :return: The server_certificate of this ESAConfigSpecV7.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this ESAConfigSpecV7.

        The KMS server certificate chain  # noqa: E501

        :param server_certificate: The server_certificate of this ESAConfigSpecV7.  # noqa: E501
        :type: list[str]
        """

        self._server_certificate = server_certificate

    @property
    def client_cert(self):
        """Gets the client_cert of this ESAConfigSpecV7.  # noqa: E501


        :return: The client_cert of this ESAConfigSpecV7.  # noqa: E501
        :rtype: ESAConfigSpecV7ClientCert
        """
        return self._client_cert

    @client_cert.setter
    def client_cert(self, client_cert):
        """Sets the client_cert of this ESAConfigSpecV7.


        :param client_cert: The client_cert of this ESAConfigSpecV7.  # noqa: E501
        :type: ESAConfigSpecV7ClientCert
        """

        self._client_cert = client_cert

    @property
    def use_nkp_only_on_tpm_protected_host(self):
        """Gets the use_nkp_only_on_tpm_protected_host of this ESAConfigSpecV7.  # noqa: E501


        :return: The use_nkp_only_on_tpm_protected_host of this ESAConfigSpecV7.  # noqa: E501
        :rtype: bool
        """
        return self._use_nkp_only_on_tpm_protected_host

    @use_nkp_only_on_tpm_protected_host.setter
    def use_nkp_only_on_tpm_protected_host(self, use_nkp_only_on_tpm_protected_host):
        """Sets the use_nkp_only_on_tpm_protected_host of this ESAConfigSpecV7.


        :param use_nkp_only_on_tpm_protected_host: The use_nkp_only_on_tpm_protected_host of this ESAConfigSpecV7.  # noqa: E501
        :type: bool
        """

        self._use_nkp_only_on_tpm_protected_host = use_nkp_only_on_tpm_protected_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESAConfigSpecV7, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESAConfigSpecV7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
