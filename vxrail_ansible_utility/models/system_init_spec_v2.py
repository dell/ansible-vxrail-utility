# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemInitSpecV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        '_global': 'SystemInitSpecGlobal',
        'hosts': 'list[SystemInitSpecV2Hosts]',
        'vcenter': 'SystemInitSpecVcenter',
        'witness_node': 'SystemInitSpecWitnessNode',
        'vxrail_manager': 'SystemInitSpecVxrailManager',
        'network': 'SystemInitSpecNetwork1'
    }

    attribute_map = {
        'version': 'version',
        '_global': 'global',
        'hosts': 'hosts',
        'vcenter': 'vcenter',
        'witness_node': 'witness_node',
        'vxrail_manager': 'vxrail_manager',
        'network': 'network'
    }

    def __init__(self, version=None, _global=None, hosts=None, vcenter=None, witness_node=None, vxrail_manager=None, network=None):  # noqa: E501
        """SystemInitSpecV2 - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self.__global = None
        self._hosts = None
        self._vcenter = None
        self._witness_node = None
        self._vxrail_manager = None
        self._network = None
        self.discriminator = None
        self.version = version
        self._global = _global
        self.hosts = hosts
        self.vcenter = vcenter
        if witness_node is not None:
            self.witness_node = witness_node
        self.vxrail_manager = vxrail_manager
        self.network = network

    @property
    def version(self):
        """Gets the version of this SystemInitSpecV2.  # noqa: E501

        should provide current VxRail Manager version  # noqa: E501

        :return: The version of this SystemInitSpecV2.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInitSpecV2.

        should provide current VxRail Manager version  # noqa: E501

        :param version: The version of this SystemInitSpecV2.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def _global(self):
        """Gets the _global of this SystemInitSpecV2.  # noqa: E501


        :return: The _global of this SystemInitSpecV2.  # noqa: E501
        :rtype: SystemInitSpecGlobal
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this SystemInitSpecV2.


        :param _global: The _global of this SystemInitSpecV2.  # noqa: E501
        :type: SystemInitSpecGlobal
        """
        if _global is None:
            raise ValueError("Invalid value for `_global`, must not be `None`")  # noqa: E501

        self.__global = _global

    @property
    def hosts(self):
        """Gets the hosts of this SystemInitSpecV2.  # noqa: E501


        :return: The hosts of this SystemInitSpecV2.  # noqa: E501
        :rtype: list[SystemInitSpecV2Hosts]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this SystemInitSpecV2.


        :param hosts: The hosts of this SystemInitSpecV2.  # noqa: E501
        :type: list[SystemInitSpecV2Hosts]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")  # noqa: E501

        self._hosts = hosts

    @property
    def vcenter(self):
        """Gets the vcenter of this SystemInitSpecV2.  # noqa: E501


        :return: The vcenter of this SystemInitSpecV2.  # noqa: E501
        :rtype: SystemInitSpecVcenter
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this SystemInitSpecV2.


        :param vcenter: The vcenter of this SystemInitSpecV2.  # noqa: E501
        :type: SystemInitSpecVcenter
        """
        if vcenter is None:
            raise ValueError("Invalid value for `vcenter`, must not be `None`")  # noqa: E501

        self._vcenter = vcenter

    @property
    def witness_node(self):
        """Gets the witness_node of this SystemInitSpecV2.  # noqa: E501


        :return: The witness_node of this SystemInitSpecV2.  # noqa: E501
        :rtype: SystemInitSpecWitnessNode
        """
        return self._witness_node

    @witness_node.setter
    def witness_node(self, witness_node):
        """Sets the witness_node of this SystemInitSpecV2.


        :param witness_node: The witness_node of this SystemInitSpecV2.  # noqa: E501
        :type: SystemInitSpecWitnessNode
        """

        self._witness_node = witness_node

    @property
    def vxrail_manager(self):
        """Gets the vxrail_manager of this SystemInitSpecV2.  # noqa: E501


        :return: The vxrail_manager of this SystemInitSpecV2.  # noqa: E501
        :rtype: SystemInitSpecVxrailManager
        """
        return self._vxrail_manager

    @vxrail_manager.setter
    def vxrail_manager(self, vxrail_manager):
        """Sets the vxrail_manager of this SystemInitSpecV2.


        :param vxrail_manager: The vxrail_manager of this SystemInitSpecV2.  # noqa: E501
        :type: SystemInitSpecVxrailManager
        """
        if vxrail_manager is None:
            raise ValueError("Invalid value for `vxrail_manager`, must not be `None`")  # noqa: E501

        self._vxrail_manager = vxrail_manager

    @property
    def network(self):
        """Gets the network of this SystemInitSpecV2.  # noqa: E501


        :return: The network of this SystemInitSpecV2.  # noqa: E501
        :rtype: SystemInitSpecNetwork1
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SystemInitSpecV2.


        :param network: The network of this SystemInitSpecV2.  # noqa: E501
        :type: SystemInitSpecNetwork1
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInitSpecV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInitSpecV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
