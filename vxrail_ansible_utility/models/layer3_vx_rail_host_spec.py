# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer3VxRailHostSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_label': 'str',
        'node_version': 'str',
        'serial_number': 'str',
        'psnt': 'str',
        'appliance_id': 'str',
        'model': 'str',
        'configuration_state': 'str',
        'ssl_thumbprint': 'str',
        'rsa_public_key': 'str',
        'vmnics': 'list[HostVmnic]'
    }

    attribute_map = {
        'segment_label': 'segmentLabel',
        'node_version': 'nodeVersion',
        'serial_number': 'serial_number',
        'psnt': 'psnt',
        'appliance_id': 'appliance_id',
        'model': 'model',
        'configuration_state': 'configurationState',
        'ssl_thumbprint': 'sslThumbprint',
        'rsa_public_key': 'rsaPublicKey',
        'vmnics': 'vmnics'
    }

    def __init__(self, segment_label=None, node_version=None, serial_number=None, psnt=None, appliance_id=None, model=None, configuration_state=None, ssl_thumbprint=None, rsa_public_key=None, vmnics=None):  # noqa: E501
        """Layer3VxRailHostSpec - a model defined in Swagger"""  # noqa: E501
        self._segment_label = None
        self._node_version = None
        self._serial_number = None
        self._psnt = None
        self._appliance_id = None
        self._model = None
        self._configuration_state = None
        self._ssl_thumbprint = None
        self._rsa_public_key = None
        self._vmnics = None
        self.discriminator = None
        self.segment_label = segment_label
        self.node_version = node_version
        self.serial_number = serial_number
        self.psnt = psnt
        self.appliance_id = appliance_id
        self.model = model
        self.configuration_state = configuration_state
        self.ssl_thumbprint = ssl_thumbprint
        self.rsa_public_key = rsa_public_key
        if vmnics is not None:
            self.vmnics = vmnics

    @property
    def segment_label(self):
        """Gets the segment_label of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The segment_label of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._segment_label

    @segment_label.setter
    def segment_label(self, segment_label):
        """Sets the segment_label of this Layer3VxRailHostSpec.


        :param segment_label: The segment_label of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if segment_label is None:
            raise ValueError("Invalid value for `segment_label`, must not be `None`")  # noqa: E501

        self._segment_label = segment_label

    @property
    def node_version(self):
        """Gets the node_version of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The node_version of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version):
        """Sets the node_version of this Layer3VxRailHostSpec.


        :param node_version: The node_version of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if node_version is None:
            raise ValueError("Invalid value for `node_version`, must not be `None`")  # noqa: E501

        self._node_version = node_version

    @property
    def serial_number(self):
        """Gets the serial_number of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The serial_number of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Layer3VxRailHostSpec.


        :param serial_number: The serial_number of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def psnt(self):
        """Gets the psnt of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The psnt of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._psnt

    @psnt.setter
    def psnt(self, psnt):
        """Sets the psnt of this Layer3VxRailHostSpec.


        :param psnt: The psnt of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if psnt is None:
            raise ValueError("Invalid value for `psnt`, must not be `None`")  # noqa: E501

        self._psnt = psnt

    @property
    def appliance_id(self):
        """Gets the appliance_id of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The appliance_id of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this Layer3VxRailHostSpec.


        :param appliance_id: The appliance_id of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if appliance_id is None:
            raise ValueError("Invalid value for `appliance_id`, must not be `None`")  # noqa: E501

        self._appliance_id = appliance_id

    @property
    def model(self):
        """Gets the model of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The model of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Layer3VxRailHostSpec.


        :param model: The model of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def configuration_state(self):
        """Gets the configuration_state of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The configuration_state of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._configuration_state

    @configuration_state.setter
    def configuration_state(self, configuration_state):
        """Sets the configuration_state of this Layer3VxRailHostSpec.


        :param configuration_state: The configuration_state of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if configuration_state is None:
            raise ValueError("Invalid value for `configuration_state`, must not be `None`")  # noqa: E501
        allowed_values = ["UNCONFIGURED", "CONFIGURING", "CONFIGURED"]  # noqa: E501
        if configuration_state not in allowed_values:
            raise ValueError(
                "Invalid value for `configuration_state` ({0}), must be one of {1}"  # noqa: E501
                .format(configuration_state, allowed_values)
            )

        self._configuration_state = configuration_state

    @property
    def ssl_thumbprint(self):
        """Gets the ssl_thumbprint of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The ssl_thumbprint of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._ssl_thumbprint

    @ssl_thumbprint.setter
    def ssl_thumbprint(self, ssl_thumbprint):
        """Sets the ssl_thumbprint of this Layer3VxRailHostSpec.


        :param ssl_thumbprint: The ssl_thumbprint of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if ssl_thumbprint is None:
            raise ValueError("Invalid value for `ssl_thumbprint`, must not be `None`")  # noqa: E501

        self._ssl_thumbprint = ssl_thumbprint

    @property
    def rsa_public_key(self):
        """Gets the rsa_public_key of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The rsa_public_key of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: str
        """
        return self._rsa_public_key

    @rsa_public_key.setter
    def rsa_public_key(self, rsa_public_key):
        """Sets the rsa_public_key of this Layer3VxRailHostSpec.


        :param rsa_public_key: The rsa_public_key of this Layer3VxRailHostSpec.  # noqa: E501
        :type: str
        """
        if rsa_public_key is None:
            raise ValueError("Invalid value for `rsa_public_key`, must not be `None`")  # noqa: E501

        self._rsa_public_key = rsa_public_key

    @property
    def vmnics(self):
        """Gets the vmnics of this Layer3VxRailHostSpec.  # noqa: E501


        :return: The vmnics of this Layer3VxRailHostSpec.  # noqa: E501
        :rtype: list[HostVmnic]
        """
        return self._vmnics

    @vmnics.setter
    def vmnics(self, vmnics):
        """Sets the vmnics of this Layer3VxRailHostSpec.


        :param vmnics: The vmnics of this Layer3VxRailHostSpec.  # noqa: E501
        :type: list[HostVmnic]
        """

        self._vmnics = vmnics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer3VxRailHostSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer3VxRailHostSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
