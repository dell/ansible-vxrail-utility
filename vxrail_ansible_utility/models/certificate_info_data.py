# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CertificateInfoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'serial_number': 'str',
        'signature_algorithm': 'str',
        'issuer': 'str',
        'subject': 'str',
        'validity': 'CertificateInfoDataValidity',
        'public_key': 'CertificateInfoDataPublicKey',
        'extensions': 'CertificateInfoDataExtensions'
    }

    attribute_map = {
        'version': 'version',
        'serial_number': 'serial_number',
        'signature_algorithm': 'signature_algorithm',
        'issuer': 'issuer',
        'subject': 'subject',
        'validity': 'validity',
        'public_key': 'public_key',
        'extensions': 'extensions'
    }

    def __init__(self, version=None, serial_number=None, signature_algorithm=None, issuer=None, subject=None, validity=None, public_key=None, extensions=None):  # noqa: E501
        """CertificateInfoData - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._serial_number = None
        self._signature_algorithm = None
        self._issuer = None
        self._subject = None
        self._validity = None
        self._public_key = None
        self._extensions = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if serial_number is not None:
            self.serial_number = serial_number
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if issuer is not None:
            self.issuer = issuer
        if subject is not None:
            self.subject = subject
        if validity is not None:
            self.validity = validity
        if public_key is not None:
            self.public_key = public_key
        if extensions is not None:
            self.extensions = extensions

    @property
    def version(self):
        """Gets the version of this CertificateInfoData.  # noqa: E501

        version  # noqa: E501

        :return: The version of this CertificateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CertificateInfoData.

        version  # noqa: E501

        :param version: The version of this CertificateInfoData.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateInfoData.  # noqa: E501

        serial number  # noqa: E501

        :return: The serial_number of this CertificateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateInfoData.

        serial number  # noqa: E501

        :param serial_number: The serial_number of this CertificateInfoData.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertificateInfoData.  # noqa: E501

        signature algorithm  # noqa: E501

        :return: The signature_algorithm of this CertificateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertificateInfoData.

        signature algorithm  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this CertificateInfoData.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def issuer(self):
        """Gets the issuer of this CertificateInfoData.  # noqa: E501

        issuer  # noqa: E501

        :return: The issuer of this CertificateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateInfoData.

        issuer  # noqa: E501

        :param issuer: The issuer of this CertificateInfoData.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def subject(self):
        """Gets the subject of this CertificateInfoData.  # noqa: E501

        subject  # noqa: E501

        :return: The subject of this CertificateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateInfoData.

        subject  # noqa: E501

        :param subject: The subject of this CertificateInfoData.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def validity(self):
        """Gets the validity of this CertificateInfoData.  # noqa: E501


        :return: The validity of this CertificateInfoData.  # noqa: E501
        :rtype: CertificateInfoDataValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this CertificateInfoData.


        :param validity: The validity of this CertificateInfoData.  # noqa: E501
        :type: CertificateInfoDataValidity
        """

        self._validity = validity

    @property
    def public_key(self):
        """Gets the public_key of this CertificateInfoData.  # noqa: E501


        :return: The public_key of this CertificateInfoData.  # noqa: E501
        :rtype: CertificateInfoDataPublicKey
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this CertificateInfoData.


        :param public_key: The public_key of this CertificateInfoData.  # noqa: E501
        :type: CertificateInfoDataPublicKey
        """

        self._public_key = public_key

    @property
    def extensions(self):
        """Gets the extensions of this CertificateInfoData.  # noqa: E501


        :return: The extensions of this CertificateInfoData.  # noqa: E501
        :rtype: CertificateInfoDataExtensions
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this CertificateInfoData.


        :param extensions: The extensions of this CertificateInfoData.  # noqa: E501
        :type: CertificateInfoDataExtensions
        """

        self._extensions = extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateInfoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
