# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 7.0.400
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NicV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'mac': 'str',
        'link_status': 'str',
        'link_speed': 'str',
        'slot': 'int',
        'port': 'int',
        'firmware_family_version': 'str',
        'drivers': 'list[NicDriverInfo]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'mac': 'mac',
        'link_status': 'link_status',
        'link_speed': 'link_speed',
        'slot': 'slot',
        'port': 'port',
        'firmware_family_version': 'firmware_family_version',
        'drivers': 'drivers'
    }

    def __init__(self, id=None, type=None, mac=None, link_status=None, link_speed=None, slot=None, port=None, firmware_family_version=None, drivers=None):  # noqa: E501
        """NicV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._mac = None
        self._link_status = None
        self._link_speed = None
        self._slot = None
        self._port = None
        self._firmware_family_version = None
        self._drivers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if mac is not None:
            self.mac = mac
        if link_status is not None:
            self.link_status = link_status
        if link_speed is not None:
            self.link_speed = link_speed
        if slot is not None:
            self.slot = slot
        if port is not None:
            self.port = port
        if firmware_family_version is not None:
            self.firmware_family_version = firmware_family_version
        if drivers is not None:
            self.drivers = drivers

    @property
    def id(self):
        """Gets the id of this NicV2.  # noqa: E501

        ID of the NIC  # noqa: E501

        :return: The id of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NicV2.

        ID of the NIC  # noqa: E501

        :param id: The id of this NicV2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this NicV2.  # noqa: E501

        type of the NIC  # noqa: E501

        :return: The type of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NicV2.

        type of the NIC  # noqa: E501

        :param type: The type of this NicV2.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def mac(self):
        """Gets the mac of this NicV2.  # noqa: E501

        MAC address of the NIC  # noqa: E501

        :return: The mac of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NicV2.

        MAC address of the NIC  # noqa: E501

        :param mac: The mac of this NicV2.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def link_status(self):
        """Gets the link_status of this NicV2.  # noqa: E501

        The link status of the NIC  # noqa: E501

        :return: The link_status of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this NicV2.

        The link status of the NIC  # noqa: E501

        :param link_status: The link_status of this NicV2.  # noqa: E501
        :type: str
        """

        self._link_status = link_status

    @property
    def link_speed(self):
        """Gets the link_speed of this NicV2.  # noqa: E501

        The link speed of the NIC  # noqa: E501

        :return: The link_speed of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NicV2.

        The link speed of the NIC  # noqa: E501

        :param link_speed: The link_speed of this NicV2.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def slot(self):
        """Gets the slot of this NicV2.  # noqa: E501

        The slot position of the NIC  # noqa: E501

        :return: The slot of this NicV2.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NicV2.

        The slot position of the NIC  # noqa: E501

        :param slot: The slot of this NicV2.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def port(self):
        """Gets the port of this NicV2.  # noqa: E501

        The port position of the NIC  # noqa: E501

        :return: The port of this NicV2.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NicV2.

        The port position of the NIC  # noqa: E501

        :param port: The port of this NicV2.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def firmware_family_version(self):
        """Gets the firmware_family_version of this NicV2.  # noqa: E501

        Version of the firmware for the NIC  # noqa: E501

        :return: The firmware_family_version of this NicV2.  # noqa: E501
        :rtype: str
        """
        return self._firmware_family_version

    @firmware_family_version.setter
    def firmware_family_version(self, firmware_family_version):
        """Sets the firmware_family_version of this NicV2.

        Version of the firmware for the NIC  # noqa: E501

        :param firmware_family_version: The firmware_family_version of this NicV2.  # noqa: E501
        :type: str
        """

        self._firmware_family_version = firmware_family_version

    @property
    def drivers(self):
        """Gets the drivers of this NicV2.  # noqa: E501


        :return: The drivers of this NicV2.  # noqa: E501
        :rtype: list[NicDriverInfo]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this NicV2.


        :param drivers: The drivers of this NicV2.  # noqa: E501
        :type: list[NicDriverInfo]
        """

        self._drivers = drivers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NicV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NicV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
