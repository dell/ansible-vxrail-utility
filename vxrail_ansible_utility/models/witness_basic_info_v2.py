# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WitnessBasicInfoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sn': 'str',
        'psnt': 'str',
        'moid': 'str',
        'hostname': 'str',
        'os_version': 'str',
        'bios_version': 'str',
        'cpu': 'str',
        'power_status': 'str',
        'memory': 'str',
        'witness_management': 'str',
        'boot_devices': 'list[WitnessBootDevice]',
        'nics': 'list[NicV4]',
        'disks': 'list[WitnessDiskInfo]'
    }

    attribute_map = {
        'sn': 'sn',
        'psnt': 'psnt',
        'moid': 'moid',
        'hostname': 'hostname',
        'os_version': 'os_version',
        'bios_version': 'bios_version',
        'cpu': 'cpu',
        'power_status': 'power_status',
        'memory': 'memory',
        'witness_management': 'witness_management',
        'boot_devices': 'boot_devices',
        'nics': 'nics',
        'disks': 'disks'
    }

    def __init__(self, sn=None, psnt=None, moid=None, hostname=None, os_version=None, bios_version=None, cpu=None, power_status=None, memory=None, witness_management=None, boot_devices=None, nics=None, disks=None):  # noqa: E501
        """WitnessBasicInfoV2 - a model defined in Swagger"""  # noqa: E501
        self._sn = None
        self._psnt = None
        self._moid = None
        self._hostname = None
        self._os_version = None
        self._bios_version = None
        self._cpu = None
        self._power_status = None
        self._memory = None
        self._witness_management = None
        self._boot_devices = None
        self._nics = None
        self._disks = None
        self.discriminator = None
        if sn is not None:
            self.sn = sn
        if psnt is not None:
            self.psnt = psnt
        if moid is not None:
            self.moid = moid
        if hostname is not None:
            self.hostname = hostname
        if os_version is not None:
            self.os_version = os_version
        if bios_version is not None:
            self.bios_version = bios_version
        if cpu is not None:
            self.cpu = cpu
        if power_status is not None:
            self.power_status = power_status
        if memory is not None:
            self.memory = memory
        if witness_management is not None:
            self.witness_management = witness_management
        if boot_devices is not None:
            self.boot_devices = boot_devices
        if nics is not None:
            self.nics = nics
        if disks is not None:
            self.disks = disks

    @property
    def sn(self):
        """Gets the sn of this WitnessBasicInfoV2.  # noqa: E501

        Serial number of the host  # noqa: E501

        :return: The sn of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this WitnessBasicInfoV2.

        Serial number of the host  # noqa: E501

        :param sn: The sn of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def psnt(self):
        """Gets the psnt of this WitnessBasicInfoV2.  # noqa: E501

        PSNT of the host  # noqa: E501

        :return: The psnt of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._psnt

    @psnt.setter
    def psnt(self, psnt):
        """Sets the psnt of this WitnessBasicInfoV2.

        PSNT of the host  # noqa: E501

        :param psnt: The psnt of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._psnt = psnt

    @property
    def moid(self):
        """Gets the moid of this WitnessBasicInfoV2.  # noqa: E501

        MOID of the host  # noqa: E501

        :return: The moid of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """Sets the moid of this WitnessBasicInfoV2.

        MOID of the host  # noqa: E501

        :param moid: The moid of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._moid = moid

    @property
    def hostname(self):
        """Gets the hostname of this WitnessBasicInfoV2.  # noqa: E501

        hostname of the host  # noqa: E501

        :return: The hostname of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this WitnessBasicInfoV2.

        hostname of the host  # noqa: E501

        :param hostname: The hostname of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def os_version(self):
        """Gets the os_version of this WitnessBasicInfoV2.  # noqa: E501

        OS version of the host  # noqa: E501

        :return: The os_version of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this WitnessBasicInfoV2.

        OS version of the host  # noqa: E501

        :param os_version: The os_version of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def bios_version(self):
        """Gets the bios_version of this WitnessBasicInfoV2.  # noqa: E501

        BIOS version of the host  # noqa: E501

        :return: The bios_version of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._bios_version

    @bios_version.setter
    def bios_version(self, bios_version):
        """Sets the bios_version of this WitnessBasicInfoV2.

        BIOS version of the host  # noqa: E501

        :param bios_version: The bios_version of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._bios_version = bios_version

    @property
    def cpu(self):
        """Gets the cpu of this WitnessBasicInfoV2.  # noqa: E501

        CPU of the host  # noqa: E501

        :return: The cpu of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this WitnessBasicInfoV2.

        CPU of the host  # noqa: E501

        :param cpu: The cpu of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def power_status(self):
        """Gets the power_status of this WitnessBasicInfoV2.  # noqa: E501

        Power status of the host  # noqa: E501

        :return: The power_status of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._power_status

    @power_status.setter
    def power_status(self, power_status):
        """Sets the power_status of this WitnessBasicInfoV2.

        Power status of the host  # noqa: E501

        :param power_status: The power_status of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._power_status = power_status

    @property
    def memory(self):
        """Gets the memory of this WitnessBasicInfoV2.  # noqa: E501

        Information about the memory  # noqa: E501

        :return: The memory of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this WitnessBasicInfoV2.

        Information about the memory  # noqa: E501

        :param memory: The memory of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def witness_management(self):
        """Gets the witness_management of this WitnessBasicInfoV2.  # noqa: E501

        Witness management version of the host  # noqa: E501

        :return: The witness_management of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._witness_management

    @witness_management.setter
    def witness_management(self, witness_management):
        """Sets the witness_management of this WitnessBasicInfoV2.

        Witness management version of the host  # noqa: E501

        :param witness_management: The witness_management of this WitnessBasicInfoV2.  # noqa: E501
        :type: str
        """

        self._witness_management = witness_management

    @property
    def boot_devices(self):
        """Gets the boot_devices of this WitnessBasicInfoV2.  # noqa: E501


        :return: The boot_devices of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: list[WitnessBootDevice]
        """
        return self._boot_devices

    @boot_devices.setter
    def boot_devices(self, boot_devices):
        """Sets the boot_devices of this WitnessBasicInfoV2.


        :param boot_devices: The boot_devices of this WitnessBasicInfoV2.  # noqa: E501
        :type: list[WitnessBootDevice]
        """

        self._boot_devices = boot_devices

    @property
    def nics(self):
        """Gets the nics of this WitnessBasicInfoV2.  # noqa: E501


        :return: The nics of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: list[NicV4]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this WitnessBasicInfoV2.


        :param nics: The nics of this WitnessBasicInfoV2.  # noqa: E501
        :type: list[NicV4]
        """

        self._nics = nics

    @property
    def disks(self):
        """Gets the disks of this WitnessBasicInfoV2.  # noqa: E501


        :return: The disks of this WitnessBasicInfoV2.  # noqa: E501
        :rtype: list[WitnessDiskInfo]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this WitnessBasicInfoV2.


        :param disks: The disks of this WitnessBasicInfoV2.  # noqa: E501
        :type: list[WitnessDiskInfo]
        """

        self._disks = disks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WitnessBasicInfoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WitnessBasicInfoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
