# coding: utf-8

"""
    VxRail Cluster and System Management

    APIs for cluster management and system management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Layer3HostNetworkConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'management': 'ManagementHostNetworkSetting',
        'vsan': 'ManagementHostNetworkSetting',
        'vmotion': 'ManagementHostNetworkSetting',
        'witness': 'ManagementHostNetworkSetting'
    }

    attribute_map = {
        'management': 'management',
        'vsan': 'vsan',
        'vmotion': 'vmotion',
        'witness': 'witness'
    }

    def __init__(self, management=None, vsan=None, vmotion=None, witness=None):  # noqa: E501
        """Layer3HostNetworkConfiguration - a model defined in Swagger"""  # noqa: E501
        self._management = None
        self._vsan = None
        self._vmotion = None
        self._witness = None
        self.discriminator = None
        self.management = management
        self.vsan = vsan
        self.vmotion = vmotion
        if witness is not None:
            self.witness = witness

    @property
    def management(self):
        """Gets the management of this Layer3HostNetworkConfiguration.  # noqa: E501


        :return: The management of this Layer3HostNetworkConfiguration.  # noqa: E501
        :rtype: ManagementHostNetworkSetting
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this Layer3HostNetworkConfiguration.


        :param management: The management of this Layer3HostNetworkConfiguration.  # noqa: E501
        :type: ManagementHostNetworkSetting
        """
        if management is None:
            raise ValueError("Invalid value for `management`, must not be `None`")  # noqa: E501

        self._management = management

    @property
    def vsan(self):
        """Gets the vsan of this Layer3HostNetworkConfiguration.  # noqa: E501


        :return: The vsan of this Layer3HostNetworkConfiguration.  # noqa: E501
        :rtype: ManagementHostNetworkSetting
        """
        return self._vsan

    @vsan.setter
    def vsan(self, vsan):
        """Sets the vsan of this Layer3HostNetworkConfiguration.


        :param vsan: The vsan of this Layer3HostNetworkConfiguration.  # noqa: E501
        :type: ManagementHostNetworkSetting
        """
        if vsan is None:
            raise ValueError("Invalid value for `vsan`, must not be `None`")  # noqa: E501

        self._vsan = vsan

    @property
    def vmotion(self):
        """Gets the vmotion of this Layer3HostNetworkConfiguration.  # noqa: E501


        :return: The vmotion of this Layer3HostNetworkConfiguration.  # noqa: E501
        :rtype: ManagementHostNetworkSetting
        """
        return self._vmotion

    @vmotion.setter
    def vmotion(self, vmotion):
        """Sets the vmotion of this Layer3HostNetworkConfiguration.


        :param vmotion: The vmotion of this Layer3HostNetworkConfiguration.  # noqa: E501
        :type: ManagementHostNetworkSetting
        """
        if vmotion is None:
            raise ValueError("Invalid value for `vmotion`, must not be `None`")  # noqa: E501

        self._vmotion = vmotion

    @property
    def witness(self):
        """Gets the witness of this Layer3HostNetworkConfiguration.  # noqa: E501


        :return: The witness of this Layer3HostNetworkConfiguration.  # noqa: E501
        :rtype: ManagementHostNetworkSetting
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this Layer3HostNetworkConfiguration.


        :param witness: The witness of this Layer3HostNetworkConfiguration.  # noqa: E501
        :type: ManagementHostNetworkSetting
        """

        self._witness = witness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer3HostNetworkConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer3HostNetworkConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
