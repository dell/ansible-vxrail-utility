# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vxrail_ansible_utility.api_client import ApiClient


class CertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_certificates_csr_post(self, body, **kwargs):  # noqa: E501
        """Generate a Certificate Signing Request.  # noqa: E501

        Generate a CSR with the given parameters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_csr_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCsrSpec body: The VxRail Manager parameters to generate a CSR. (required)
        :return: VxMCsrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_csr_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_csr_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_certificates_csr_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate a Certificate Signing Request.  # noqa: E501

        Generate a CSR with the given parameters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_csr_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCsrSpec body: The VxRail Manager parameters to generate a CSR. (required)
        :return: VxMCsrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_csr_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_certificates_csr_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/certificates/csr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VxMCsrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_certificates_import_vxm_post(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 1)  # noqa: E501

        Update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_import_vxm_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateSpec body: Parameters of the VxRail Manager certificate to update (required)
        :return: VxMCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_certificates_import_vxm_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 1)  # noqa: E501

        Update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_import_vxm_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateSpec body: Parameters of the VxRail Manager certificate to update (required)
        :return: VxMCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_import_vxm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_certificates_import_vxm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/certificates/import-vxm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VxMCertificateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_certificates_scep_config_get(self, **kwargs):  # noqa: E501
        """Get automated renewal configurations of the certificate  # noqa: E501

        Automated renewal configurations of the VxRail Manager TLS certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScepConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_scep_config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_scep_config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_certificates_scep_config_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get automated renewal configurations of the certificate  # noqa: E501

        Automated renewal configurations of the VxRail Manager TLS certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScepConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_scep_config_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/cluster/certificates/scep/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScepConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_certificates_scep_config_post(self, body, **kwargs):  # noqa: E501
        """Update automated renewal configurations of certificate through SCEP  # noqa: E501

        Udpate automated renewal configurations of the VxRail Manager TLS certificate through SCEP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_config_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScepConfigPostSpec body: Automated renewal configurations of the VxRail Manager TLS certificate (required)
        :return: ScepConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_scep_config_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_scep_config_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_certificates_scep_config_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update automated renewal configurations of certificate through SCEP  # noqa: E501

        Udpate automated renewal configurations of the VxRail Manager TLS certificate through SCEP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_config_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScepConfigPostSpec body: Automated renewal configurations of the VxRail Manager TLS certificate (required)
        :return: ScepConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_scep_config_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_certificates_scep_config_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/cluster/certificates/scep/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScepConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_certificates_scep_status_get(self, **kwargs):  # noqa: E501
        """Get automated renewal status of the certificate  # noqa: E501

        Automated renewal status of the VxRail Manager TLS certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScepStatusGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_scep_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_scep_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_certificates_scep_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get automated renewal status of the certificate  # noqa: E501

        Automated renewal status of the VxRail Manager TLS certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_scep_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScepStatusGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_scep_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/cluster/certificates/scep/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScepStatusGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_certificates_validate_post(self, body, **kwargs):  # noqa: E501
        """Verify the certificate  # noqa: E501

        Verify the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_validate_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateValidateSpec body: Certificate to be validated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_certificates_validate_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_certificates_validate_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_certificates_validate_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Verify the certificate  # noqa: E501

        Verify the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_certificates_validate_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateValidateSpec body: Certificate to be validated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_certificates_validate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_certificates_validate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/certificates/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_trust_store_certificates_fingerprint_delete(self, fingerprint, **kwargs):  # noqa: E501
        """Delete the certificate file from the VxRail Manager trust store according to the fingerprint.  # noqa: E501

        API to delete certificate file from the VxRail Manager trust store according to fingerprint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprint_delete(fingerprint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fingerprint: The fingerprint certificate to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_trust_store_certificates_fingerprint_delete_with_http_info(fingerprint, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_trust_store_certificates_fingerprint_delete_with_http_info(fingerprint, **kwargs)  # noqa: E501
            return data

    def v1_trust_store_certificates_fingerprint_delete_with_http_info(self, fingerprint, **kwargs):  # noqa: E501
        """Delete the certificate file from the VxRail Manager trust store according to the fingerprint.  # noqa: E501

        API to delete certificate file from the VxRail Manager trust store according to fingerprint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprint_delete_with_http_info(fingerprint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fingerprint: The fingerprint certificate to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fingerprint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_trust_store_certificates_fingerprint_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fingerprint' is set
        if ('fingerprint' not in params or
                params['fingerprint'] is None):
            raise ValueError("Missing the required parameter `fingerprint` when calling `v1_trust_store_certificates_fingerprint_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fingerprint' in params:
            path_params['fingerprint'] = params['fingerprint']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trust-store/certificates/{fingerprint}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_trust_store_certificates_fingerprint_get(self, fingerprint, **kwargs):  # noqa: E501
        """Search the VxRail Manager trust store and get the certificate content information (PEM form) according to fingerprint parameter.  # noqa: E501

        API to search and get the certificate content from the VxRail Manager trust store according to the fingerprint parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprint_get(fingerprint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fingerprint: The fingerprint certificate you want to query. (required)
        :return: CertificateContentInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_trust_store_certificates_fingerprint_get_with_http_info(fingerprint, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_trust_store_certificates_fingerprint_get_with_http_info(fingerprint, **kwargs)  # noqa: E501
            return data

    def v1_trust_store_certificates_fingerprint_get_with_http_info(self, fingerprint, **kwargs):  # noqa: E501
        """Search the VxRail Manager trust store and get the certificate content information (PEM form) according to fingerprint parameter.  # noqa: E501

        API to search and get the certificate content from the VxRail Manager trust store according to the fingerprint parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprint_get_with_http_info(fingerprint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fingerprint: The fingerprint certificate you want to query. (required)
        :return: CertificateContentInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fingerprint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_trust_store_certificates_fingerprint_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fingerprint' is set
        if ('fingerprint' not in params or
                params['fingerprint'] is None):
            raise ValueError("Missing the required parameter `fingerprint` when calling `v1_trust_store_certificates_fingerprint_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fingerprint' in params:
            path_params['fingerprint'] = params['fingerprint']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trust-store/certificates/{fingerprint}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateContentInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_trust_store_certificates_fingerprints_get(self, **kwargs):  # noqa: E501
        """Get a list of fingerprints retrieved from the certificates in the VxRail Manager trust store used by the HTTP client.  # noqa: E501

        API to retrieve a fingerprint list (using the open SSL command to get the certificate fingerprints in VxRail Manager trust store).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprints_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TrustStoreFingerprintsInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_trust_store_certificates_fingerprints_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_trust_store_certificates_fingerprints_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_trust_store_certificates_fingerprints_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of fingerprints retrieved from the certificates in the VxRail Manager trust store used by the HTTP client.  # noqa: E501

        API to retrieve a fingerprint list (using the open SSL command to get the certificate fingerprints in VxRail Manager trust store).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_fingerprints_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TrustStoreFingerprintsInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_trust_store_certificates_fingerprints_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trust-store/certificates/fingerprints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustStoreFingerprintsInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_trust_store_certificates_post(self, body, **kwargs):  # noqa: E501
        """Import certificates into the VxRail Manager trust store.  # noqa: E501

        API to import certificates into the VxRail Manager trust store according to the certificates content list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificateContentSpec body: Provide the content of the certificate to be imported (PEM form). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_trust_store_certificates_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_trust_store_certificates_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_trust_store_certificates_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Import certificates into the VxRail Manager trust store.  # noqa: E501

        API to import certificates into the VxRail Manager trust store according to the certificates content list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_trust_store_certificates_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificateContentSpec body: Provide the content of the certificate to be imported (PEM form). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_trust_store_certificates_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_trust_store_certificates_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trust-store/certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_certificates_import_vxm_post(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 2)  # noqa: E501

        Async api to update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_certificates_import_vxm_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateSpec body: Parameters of the VxRail Manager certificate to update (required)
        :return: VxMCertificateV2Info
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v2_certificates_import_vxm_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 2)  # noqa: E501

        Async api to update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_certificates_import_vxm_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateSpec body: Parameters of the VxRail Manager certificate to update (required)
        :return: VxMCertificateV2Info
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_certificates_import_vxm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2_certificates_import_vxm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/certificates/import-vxm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VxMCertificateV2Info',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_certificates_import_vxm_post(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 3)  # noqa: E501

        Asynchronous API to update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_certificates_import_vxm_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateV3Spec body: The VxRail Manager certificate parameters for update. (required)
        :return: VxMCertificateV2Info
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v3_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v3_certificates_import_vxm_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v3_certificates_import_vxm_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the VxRail Manager certificate(Version 3)  # noqa: E501

        Asynchronous API to update the VxRail Manager certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_certificates_import_vxm_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VxMCertificateV3Spec body: The VxRail Manager certificate parameters for update. (required)
        :return: VxMCertificateV2Info
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_certificates_import_vxm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v3_certificates_import_vxm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificates/import-vxm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VxMCertificateV2Info',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
