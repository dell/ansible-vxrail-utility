# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vxrail_ansible_utility.api_client import ApiClient


class CallHomeOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def callhome_info_get_v1(self, **kwargs):  # noqa: E501
        """Get call home server information (v1)  # noqa: E501

        Retrieve information about the call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.callhome_info_get_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CallhomeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.callhome_info_get_v1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.callhome_info_get_v1_with_http_info(**kwargs)  # noqa: E501
            return data

    def callhome_info_get_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get call home server information (v1)  # noqa: E501

        Retrieve information about the call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.callhome_info_get_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CallhomeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method callhome_info_get_v1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallhomeInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_access_code_post(self, **kwargs):  # noqa: E501
        """Generate access code to activate internal call home server  # noqa: E501

        Generate an access code to activate the internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_access_code_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_access_code_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_access_code_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_callhome_access_code_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate access code to activate internal call home server  # noqa: E501

        Generate an access code to activate the internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_access_code_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_access_code_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/access-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_deployment_post(self, body, **kwargs):  # noqa: E501
        """Deploy internal call home server (v1)  # noqa: E501

        Deploy an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_deployment_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CallhomeDeploySpec body: Information about the SRS server to be deployed. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_deployment_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_deployment_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_callhome_deployment_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Deploy internal call home server (v1)  # noqa: E501

        Deploy an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_deployment_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CallhomeDeploySpec body: Information about the SRS server to be deployed. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_deployment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_callhome_deployment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/deployment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_disable_delete(self, **kwargs):  # noqa: E501
        """Unregister call home servers  # noqa: E501

        Unregister call home servers and delete the SRS VE virtual machine if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_disable_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_disable_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_disable_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_callhome_disable_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Unregister call home servers  # noqa: E501

        Unregister call home servers and delete the SRS VE virtual machine if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_disable_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_disable_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/disable', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_enable_post(self, body, **kwargs):  # noqa: E501
        """Enable call home functionality  # noqa: E501

        Enable call home functionality by enabing remote connectivity service.<br/> if remote connector type is ESE <br/>     1) Update ESE state to configuring <br/>     2) Initialize ESE lockbox<br/>     3) Update ESE configuation (product/gateway/proxy )<br/>     4) Generate universal key by PIN/access key or upload pre-installed universal key to ESE <br/>     5) Enable ESE connection<br/>     6) Update ESE state to configured<br/> Only support IPv4 connectivity<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_enable_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnableCallhomeSpec body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_enable_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_enable_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_callhome_enable_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enable call home functionality  # noqa: E501

        Enable call home functionality by enabing remote connectivity service.<br/> if remote connector type is ESE <br/>     1) Update ESE state to configuring <br/>     2) Initialize ESE lockbox<br/>     3) Update ESE configuation (product/gateway/proxy )<br/>     4) Generate universal key by PIN/access key or upload pre-installed universal key to ESE <br/>     5) Enable ESE connection<br/>     6) Update ESE state to configured<br/> Only support IPv4 connectivity<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_enable_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnableCallhomeSpec body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_callhome_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_external_register_post(self, body, **kwargs):  # noqa: E501
        """Register external call home servers (v1)  # noqa: E501

        Register external call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_external_register_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExternalCallhomeRegisterSpec body: Information about each of the external SRS servers to be registered. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_external_register_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_external_register_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_callhome_external_register_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register external call home servers (v1)  # noqa: E501

        Register external call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_external_register_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExternalCallhomeRegisterSpec body: Information about each of the external SRS servers to be registered. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_external_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_callhome_external_register_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/external/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_internal_register_post(self, body, **kwargs):  # noqa: E501
        """Activate and register internal call home server  # noqa: E501

        Activate and register an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_internal_register_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessCodeSpec body: Access code for activating an internal call home server. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_internal_register_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_internal_register_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_callhome_internal_register_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Activate and register internal call home server  # noqa: E501

        Activate and register an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_internal_register_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessCodeSpec body: Access code for activating an internal call home server. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_internal_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_callhome_internal_register_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/internal/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_callhome_internal_upgrade_post(self, body, **kwargs):  # noqa: E501
        """Upgrade internal SRS software  # noqa: E501

        Upgrade the internal SRS software. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_internal_upgrade_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SRSUpgradeSpec body: Parameters for activating a software upgrade on the internal SRS server. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_callhome_internal_upgrade_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_callhome_internal_upgrade_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_callhome_internal_upgrade_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upgrade internal SRS software  # noqa: E501

        Upgrade the internal SRS software. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_callhome_internal_upgrade_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SRSUpgradeSpec body: Parameters for activating a software upgrade on the internal SRS server. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_callhome_internal_upgrade_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_callhome_internal_upgrade_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/callhome/internal/upgrade', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_callhome_deployment_post(self, body, **kwargs):  # noqa: E501
        """Deploy internal call home server (v2)  # noqa: E501

        Deploy an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_deployment_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CallhomeDeploySpecV2 body: Details for SRS to be deployed. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_callhome_deployment_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_callhome_deployment_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v2_callhome_deployment_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Deploy internal call home server (v2)  # noqa: E501

        Deploy an internal call home server. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_deployment_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CallhomeDeploySpecV2 body: Details for SRS to be deployed. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_callhome_deployment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2_callhome_deployment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/callhome/deployment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_callhome_enable_post(self, body, **kwargs):  # noqa: E501
        """Enable call home functionality  # noqa: E501

        Enable call home functionality by enabing remote connectivity service.<br/> if remote connector type is ESE <br/>     1) Update ESE state to configuring <br/>     2) Initialize ESE lockbox<br/>     3) Update ESE configuation (product/gateway/proxy )<br/>     4) Generate universal key by PIN/access key or upload pre-installed universal key to ESE <br/>     5) Enable ESE connection<br/>     6) Update ESE state to configured<br/> v2 adds support for IPv6 connectivity<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_enable_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnableCallhomeSpecV2 body: (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_callhome_enable_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_callhome_enable_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v2_callhome_enable_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enable call home functionality  # noqa: E501

        Enable call home functionality by enabing remote connectivity service.<br/> if remote connector type is ESE <br/>     1) Update ESE state to configuring <br/>     2) Initialize ESE lockbox<br/>     3) Update ESE configuation (product/gateway/proxy )<br/>     4) Generate universal key by PIN/access key or upload pre-installed universal key to ESE <br/>     5) Enable ESE connection<br/>     6) Update ESE state to configured<br/> v2 adds support for IPv6 connectivity<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_enable_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnableCallhomeSpecV2 body: (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_callhome_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2_callhome_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/callhome/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_callhome_external_register_post(self, body, **kwargs):  # noqa: E501
        """Register external call home servers (v2)  # noqa: E501

        Register external call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_external_register_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExternalCallhomeRegisterSpecV2 body: Information about each of the external SRS servers to be registered. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_callhome_external_register_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_callhome_external_register_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v2_callhome_external_register_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register external call home servers (v2)  # noqa: E501

        Register external call home servers. This API has been deprecated and only response with status code 410 will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_external_register_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExternalCallhomeRegisterSpecV2 body: Information about each of the external SRS servers to be registered. (required)
        :return: Componentsresponses200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_callhome_external_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2_callhome_external_register_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/callhome/external/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Componentsresponses200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_callhome_info(self, **kwargs):  # noqa: E501
        """Get call home server information (v2)  # noqa: E501

        Retrieve information about the call home servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CallhomeInfoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_callhome_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_callhome_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_callhome_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get call home server information (v2)  # noqa: E501

        Retrieve information about the call home servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_callhome_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CallhomeInfoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_callhome_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/callhome/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallhomeInfoV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
