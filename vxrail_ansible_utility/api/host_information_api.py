# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vxrail_ansible_utility.api_client import ApiClient


class HostInformationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v10_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v10)  # noqa: E501

        New fields are added to v10 to distinguish between base storage and optional storage (VMware vSphere 7.x only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v10_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV10]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v10_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v10_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v10_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v10)  # noqa: E501

        New fields are added to v10 to distinguish between base storage and optional storage (VMware vSphere 7.x only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v10_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV10]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v10_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v10/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV10]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v10_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v10)  # noqa: E501

        Added new fields to v10 to distinguish between base storage and optional storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v10_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve information for. (required)
        :return: HostV10
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v10_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v10_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v10_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v10)  # noqa: E501

        Added new fields to v10 to distinguish between base storage and optional storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v10_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve information for. (required)
        :return: HostV10
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v10_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v10_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v10/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV10',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v11_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v11)  # noqa: E501

        New fields are added to v11 to distinguish between base storage and optional storage (VMware vSphere 7.x only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v11_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV11]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v11_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v11_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v11_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v11)  # noqa: E501

        New fields are added to v11 to distinguish between base storage and optional storage (VMware vSphere 7.x only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v11_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV11]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v11_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v11/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV11]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v11_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v11)  # noqa: E501

        Added new fields to v10 to distinguish between base storage and optional storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v11_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve information for. (required)
        :return: HostV11
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v11_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v11_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v11_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v11)  # noqa: E501

        Added new fields to v10 to distinguish between base storage and optional storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v11_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve information for. (required)
        :return: HostV11
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v11_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v11_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v11/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV11',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v12_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v12).  # noqa: E501

        New fields are added to the v12 hosts, including the marketing name, GPU health, firmware version, and deployment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v12_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV12]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v12_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v12_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v12_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v12).  # noqa: E501

        New fields are added to the v12 hosts, including the marketing name, GPU health, firmware version, and deployment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v12_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV12]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v12_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v12/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV12]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v12_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v12).  # noqa: E501

        New fields are added to the v12 hosts, including the marketing name, GPU health, firmware version, and deployment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v12_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV12
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v12_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v12_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v12_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v12).  # noqa: E501

        New fields are added to the v12 hosts, including the marketing name, GPU health, firmware version, and deployment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v12_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV12
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v12_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v12_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v12/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV12',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v13_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v13).  # noqa: E501

        Added a new field 'node_disk_type' to v13.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v13_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV13]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v13_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v13_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v13_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v13).  # noqa: E501

        Added a new field 'node_disk_type' to v13.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v13_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV13]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v13_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v13/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV13]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v13_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v13).  # noqa: E501

        Added a new field 'node_disk_type' to v13.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v13_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV13
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v13_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v13_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v13_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v13).  # noqa: E501

        Added a new field 'node_disk_type' to v13.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v13_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV13
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v13_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v13_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v13/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV13',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v14_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v14).  # noqa: E501

        New fields are added to v14 hosts, including tpm_version and tpm_status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v14_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV14]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v14_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v14_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v14_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v14).  # noqa: E501

        New fields are added to v14 hosts, including tpm_version and tpm_status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v14_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV14]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v14_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v14/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV14]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v14_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v14).  # noqa: E501

        New fields are added to v14 hosts, including tpm_version and tpm_status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v14_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV14
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v14_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v14_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v14_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v14).  # noqa: E501

        New fields are added to v14 hosts, including tpm_version and tpm_status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v14_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV14
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v14_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v14_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v14/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV14',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v15_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v15).  # noqa: E501

        New fields are added to the v15 hosts, including the NIC/HBA vendor and model information, Encryption Type/Status for BOSS-N1 SED/FIPS M.2 drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v15_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV15]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v15_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v15_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v15_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v15).  # noqa: E501

        New fields are added to the v15 hosts, including the NIC/HBA vendor and model information, Encryption Type/Status for BOSS-N1 SED/FIPS M.2 drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v15_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV15]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v15_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v15/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV15]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v15_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v15).  # noqa: E501

        New fields are added to the v15 hosts, including the NIC/HBA vendor and model information, Encryption Type/Status for BOSS-N1 SED/FIPS M.2 drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v15_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV15
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v15_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v15_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v15_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v15).  # noqa: E501

        New fields are added to the v15 hosts, including the NIC/HBA vendor and model information, Encryption Type/Status for BOSS-N1 SED/FIPS M.2 drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v15_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV15
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v15_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v15_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v15/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV15',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v16_hosts_get(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v16).  # noqa: E501

        New field, disk_tier is added to v16 hosts to define disk usage in VMware vSAN tier. disk_type represents physical disk type. Note: The values of disk_type and disk_claim_type are changed. Adopt the latest API and Ansible module.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v16_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information.
        :return: list[HostV16]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v16_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v16_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v16_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of VxRail hosts (v16).  # noqa: E501

        New field, disk_tier is added to v16 hosts to define disk usage in VMware vSAN tier. disk_type represents physical disk type. Note: The values of disk_type and disk_claim_type are changed. Adopt the latest API and Ansible module.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v16_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information.
        :return: list[HostV16]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v16_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sn' in params:
            query_params.append(('sn', params['sn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v16/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV16]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v16_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v16).  # noqa: E501

        New field, disk_tier is added to v16 hosts to define disk usage in VMware vSAN tier. disk_type represents physical disk type. Note: The values of disk_type and disk_claim_type are changed. Adopt the latest API and Ansible module.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v16_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV16
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v16_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v16_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v16_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Retrieves information about a host (v16).  # noqa: E501

        New field, disk_tier is added to v16 hosts to define disk usage in VMware vSAN tier. disk_type represents physical disk type. Note: The values of disk_type and disk_claim_type are changed. Adopt the latest API and Ansible module.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v16_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: Indicates the serial number of the node for which you want to retrieve information. (required)
        :return: HostV16
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v16_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v16_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v16/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV16',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v1)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Host]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v1)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Host]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Host]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v1)  # noqa: E501

        Get information about a specific host and its associated subcomponents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to access. (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v1_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v1)  # noqa: E501

        Get information about a specific host and its associated subcomponents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to access. (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v1_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Host',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_hosts_sn_patch(self, body, sn, **kwargs):  # noqa: E501
        """Update the geographical information about a host  # noqa: E501

        Update the geographical information about a specific host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_patch(body, sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostUpdateSpec body: Geographical information about the host that you want to update. (required)
        :param str sn: The serial number of the node that you want to access. (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_hosts_sn_patch_with_http_info(body, sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_hosts_sn_patch_with_http_info(body, sn, **kwargs)  # noqa: E501
            return data

    def v1_hosts_sn_patch_with_http_info(self, body, sn, **kwargs):  # noqa: E501
        """Update the geographical information about a host  # noqa: E501

        Update the geographical information about a specific host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_patch_with_http_info(body, sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostUpdateSpec body: Geographical information about the host that you want to update. (required)
        :param str sn: The serial number of the node that you want to access. (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_hosts_sn_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_hosts_sn_patch`")  # noqa: E501
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v1_hosts_sn_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/hosts/{sn}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_hosts_sn_shutdown_post(self, body, sn, **kwargs):  # noqa: E501
        """Shut down a host or perform a shutdown dry run  # noqa: E501

        Shut down a selected host or perform a shutdown dry run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_shutdown_post(body, sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostShutdownSpec body: Information required to shutdown the host. (required)
        :param str sn: The serial number of the node that you want to shut down. (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_hosts_sn_shutdown_post_with_http_info(body, sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_hosts_sn_shutdown_post_with_http_info(body, sn, **kwargs)  # noqa: E501
            return data

    def v1_hosts_sn_shutdown_post_with_http_info(self, body, sn, **kwargs):  # noqa: E501
        """Shut down a host or perform a shutdown dry run  # noqa: E501

        Shut down a selected host or perform a shutdown dry run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_hosts_sn_shutdown_post_with_http_info(body, sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostShutdownSpec body: Information required to shutdown the host. (required)
        :param str sn: The serial number of the node that you want to shut down. (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_hosts_sn_shutdown_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_hosts_sn_shutdown_post`")  # noqa: E501
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v1_hosts_sn_shutdown_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/hosts/{sn}/shutdown', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_system_cluster_hosts_pnics_get(self, **kwargs):  # noqa: E501
        """v1_system_cluster_hosts_pnics_get  # noqa: E501

        Get cluster configured hosts pnic information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_system_cluster_hosts_pnics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClusterHostPNicInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_system_cluster_hosts_pnics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_system_cluster_hosts_pnics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_system_cluster_hosts_pnics_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_system_cluster_hosts_pnics_get  # noqa: E501

        Get cluster configured hosts pnic information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_system_cluster_hosts_pnics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClusterHostPNicInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_system_cluster_hosts_pnics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/system/cluster-hosts/pnics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterHostPNicInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v2)  # noqa: E501

        Get a list of VxRail hosts and their subcomponent information. Version v2 contains the same attributes as the v1 version with the addition of a geo-location attribute in the HostV2 schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV2]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v2)  # noqa: E501

        Get a list of VxRail hosts and their subcomponent information. Version v2 contains the same attributes as the v1 version with the addition of a geo-location attribute in the HostV2 schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV2]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV2]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v2)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v2 contains the same attributes as the v1 version with the addition of a geo-location attribute in the HostV2 schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v2_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v2)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v2 contains the same attributes as the v1 version with the addition of a geo-location attribute in the HostV2 schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v2_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v3)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v3 contains the same attributes as the v2 version with the addition of a dcpm_version attribute in FirmwareInfoV2 and a disk_claim_type attribute in DiskInfoV2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV3]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v3_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v3_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v3_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v3)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v3 contains the same attributes as the v2 version with the addition of a dcpm_version attribute in FirmwareInfoV2 and a disk_claim_type attribute in DiskInfoV2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV3]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV3]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v3)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v3 contains the same attributes as the v2 version with the addition of a dcpm_version attribute in FirmwareInfoV2 and a disk_claim_type attribute in DiskInfoV2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v3_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v3_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v3_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v3)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v3 contains the same attributes as the v2 version with the addition of a dcpm_version attribute in FirmwareInfoV2 and a disk_claim_type attribute in DiskInfoV2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v3_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v4)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v4 contains drive configuration and BOSS card information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV4]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v4)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v4 contains drive configuration and BOSS card information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV4]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV4]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v4)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v4 contains drive configuration and BOSS card information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV4
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v4_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v4)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v4 contains drive configuration and BOSS card information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV4
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v4_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV4',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v5_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v5)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v5 provides support for satellite nodes, adding a new field \"type\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v5_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV5]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v5_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v5_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v5_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v5)  # noqa: E501

        Get a list of VxRail hosts and their associated subcomponent information. Version v5 provides support for satellite nodes, adding a new field \"type\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v5_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV5]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v5_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v5/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV5]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v5_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v5)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v5 provides support for satellite nodes, adding a new field \"type\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v5_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV5
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v5_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v5_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v5_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v5)  # noqa: E501

        Get information about a specific host and its associated subcomponents. Version v5 provides support for satellite nodes, adding a new field \"type\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v5_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV5
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v5_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v5_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v5/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV5',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v6_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v6)  # noqa: E501

        Version v6 contains new nic version, which contains type, port and drivers field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v6_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV6]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v6_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v6_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v6_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v6)  # noqa: E501

        Version v6 contains new nic version, which contains type, port and drivers field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v6_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV6]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v6_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV6]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v6_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v6)  # noqa: E501

        Version v6 contains new nic version, which contains type, port and drivers field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v6_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v6_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v6_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v6_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v6)  # noqa: E501

        Version v6 contains new nic version, which contains type, port and drivers field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v6_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to update. (required)
        :return: HostV6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v6_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v6_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v7_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v7)  # noqa: E501

        Version v7 adds the new fields to support encryption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v7_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV7]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v7_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v7_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v7_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v7)  # noqa: E501

        Version v7 adds the new fields to support encryption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v7_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV7]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v7_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v7/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV7]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v7_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v7)  # noqa: E501

        Version v7 contains new fields to support encryption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v7_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve inforamtion for. (required)
        :return: HostV7
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v7_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v7_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v7_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v7)  # noqa: E501

        Version v7 contains new fields to support encryption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v7_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve inforamtion for. (required)
        :return: HostV7
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v7_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v7_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v7/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV7',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v8_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v8).  # noqa: E501

        Version v8 adds the new fields to get WWNN/WWPN of Fibre Channel cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v8_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV8]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v8_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v8_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v8_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v8).  # noqa: E501

        Version v8 adds the new fields to get WWNN/WWPN of Fibre Channel cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v8_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV8]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v8_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v8/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV8]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v8_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v8).  # noqa: E501

        Version v8 adds the new fields to get WWNN/WWPN of Fibre Channel cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v8_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve inforamtion for. (required)
        :return: HostV8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v8_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v8_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v8_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about a host (v8).  # noqa: E501

        Version v8 adds the new fields to get WWNN/WWPN of Fibre Channel cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v8_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node that you want to retrieve inforamtion for. (required)
        :return: HostV8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v8_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v8_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v8/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v9_hosts_get(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v9)  # noqa: E501

        New fields are added to v9 to support the DPU hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v9_hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV9]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v9_hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v9_hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v9_hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of VxRail hosts (v9)  # noqa: E501

        New fields are added to v9 to support the DPU hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v9_hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HostV9]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v9_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v9/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostV9]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v9_hosts_sn_get(self, sn, **kwargs):  # noqa: E501
        """Get information about the host (v9)  # noqa: E501

        New fields are added to v9 to support the DPU hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v9_hosts_sn_get(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node for which you want to retrieve information. (required)
        :return: HostV9
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v9_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
        else:
            (data) = self.v9_hosts_sn_get_with_http_info(sn, **kwargs)  # noqa: E501
            return data

    def v9_hosts_sn_get_with_http_info(self, sn, **kwargs):  # noqa: E501
        """Get information about the host (v9)  # noqa: E501

        New fields are added to v9 to support the DPU hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v9_hosts_sn_get_with_http_info(sn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sn: The serial number of the node for which you want to retrieve information. (required)
        :return: HostV9
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v9_hosts_sn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sn' is set
        if ('sn' not in params or
                params['sn'] is None):
            raise ValueError("Missing the required parameter `sn` when calling `v9_hosts_sn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sn' in params:
            path_params['sn'] = params['sn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v9/hosts/{sn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostV9',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
